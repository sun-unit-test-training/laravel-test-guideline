{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gi\u1edbi thi\u1ec7u \u00b6 T\u00e0i li\u1ec7u n\u00e0y bao g\u1ed3m m\u1ed9t s\u1ed1 l\u00fd thuy\u1ebft c\u01a1 b\u1ea3n v\u1ec1 unit test n\u00f3i chung v\u00e0 c\u00e1ch tri\u1ec3n khai c\u1ee5 th\u1ec3 v\u1edbi framework Laravel v\u00e0 PHPUnit. Th\u1ef1c t\u1ebf th\u00ec c\u00f3 nhi\u1ec1u c\u00e1ch tri\u1ec3n khai unit test, \u0111\u1eb7c bi\u1ec7t l\u00e0 \u0111\u1ed1i v\u1edbi ng\u00f4n ng\u1eef m\u1ec1m d\u1ebbo nh\u01b0 PHP, v\u00e0 c\u0169ng c\u00f3 r\u1ea5t nhi\u1ec1u kh\u00e1i ni\u1ec7m nh\u01b0 unit test , integration test , feature test , system test , acceptance test ,.., hay c\u00e1c \u00fd ki\u1ebfn l\u00e0 b\u1ea1n ph\u1ea3i vi\u1ebft nh\u01b0 th\u1ebf n\u00e0y, th\u1ebf kia m\u1edbi \u0111\u00fang... Tuy nhi\u00ean, v\u1edbi m\u1ee5c \u0111\u00edch l\u00e0 gi\u00fap developer c\u00f3 th\u1ec3 tri\u1ec3n khai unit test m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng nh\u1ea5t, t\u00e0i li\u1ec7u n\u00e0y s\u1ebd c\u00f3 nhi\u1ec1u \u00fd ki\u1ebfn mang t\u00ednh quan \u0111i\u1ec3m , c\u00f3 th\u1ec3 n\u00f3 s\u1ebd kh\u00f4ng \u0111\u00fang trong m\u1ecdi tr\u01b0\u1eddng h\u1ee3p, c\u0169ng nh\u01b0 c\u1ed1 g\u1eafng s\u1eed d\u1ee5ng c\u00e1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 tri\u1ec3n khai. V\u1ec1 t\u00ednh hi\u1ec7u qu\u1ea3 th\u00ec ch\u01b0a th\u1ec3 \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c ngay, nh\u01b0ng ch\u00fang t\u00f4i s\u1ebd c\u1ed1 g\u1eafng \u0111\u00e1nh gi\u00e1 th\u01b0\u1eddng xuy\u00ean v\u00e0 c\u1ea3i thi\u1ec7n d\u1ea7n. R\u1ea5t mong nh\u1eadn \u0111\u01b0\u1ee3c \u00fd ki\u1ebfn \u0111\u00f3ng g\u00f3p c\u1ee7a c\u00e1c b\u1ea1n b\u1eb1ng c\u00e1ch t\u1ea1o issue ho\u1eb7c pull request \u0111\u1ec3 th\u1ea3o lu\u1eadn, s\u1eeda l\u1ed7i... Quan \u0111i\u1ec3m test \u00b6 Ch\u1ecdn c\u00e1ch \u0111\u01a1n gi\u1ea3n, kh\u00f4ng qu\u00e1 quan tr\u1ecdng ph\u1ea3i l\u00e0 unit test thu\u1ea7n Follow theo t\u00e0i li\u1ec7u c\u1ee7a framework \u0111\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm ki\u1ebfm, t\u00edch h\u1ee3p Test code c\u1ee7a project, kh\u00f4ng test code c\u1ee7a framework, th\u01b0 vi\u1ec7n V\u00ed d\u1ee5 v\u1edbi project Laravel: Controller: n\u1ebfu vi\u1ebft theo ki\u1ec3u unit test thu\u1ea7n th\u00ec \u0111\u00f2i h\u1ecfi ng\u01b0\u1eddi vi\u1ebft ph\u1ea3i c\u00f3 nhi\u1ec1u ki\u1ebfn th\u1ee9c v\u1ec1 framework, theo nh\u01b0 kinh nghi\u1ec7m th\u00ec l\u1ea7n \u0111\u1ea7u vi\u1ebft, t\u00f4i ph\u1ea3i dd xem response n\u00f3 l\u00e0 g\u00ec, sau \u0111\u00f3 l\u00e0 \u0111\u1ecdc code framework xem l\u00e0m sao \u0111\u1ec3 l\u1ea5y ra value t\u1eeb response \u0111\u1ec3 assert... m\u1eb7c d\u00f9 n\u00f3 c\u00f3 th\u1ec3 gi\u00fap ng\u01b0\u1eddi vi\u1ebft hi\u1ec3u s\u00e2u h\u01a1n v\u1ec1 framework, nh\u01b0ng n\u00f3 ph\u1ee9c t\u1ea1p, t\u1ed1n th\u1eddi gian. V\u1edbi c\u1ea3 controller th\u00ec ch\u1ee7 y\u1ebfu ch\u1ec9 \u0111\u1ec3 \u0111i\u1ec1u h\u01b0\u1edbng request, kh\u00f4ng c\u00f3 nhi\u1ec1u logic th\u00ec vi\u1ec7c vi\u1ebft unit test thu\u1ea7n c\u00f3 mang l\u1ea1i l\u1ee3i \u00edch? So v\u1edbi vi\u1ec7c d\u00f9ng http tests , ch\u00fang ta c\u00f3 t\u00e0i li\u1ec7u , c\u00f3 c\u00e1c helper method \u0111\u1ec3 vi\u1ebft test nhanh h\u01a1n, v\u1ec1 t\u1ed1c \u0111\u1ed9 th\u00ec n\u00f3 c\u0169ng kh\u00f4ng qu\u00e1 kh\u00e1c bi\u1ec7t so v\u1edbi unit test thu\u1ea7n v\u00ec g\u1ecdi l\u00e0 HTTP test nh\u01b0ng th\u1ef1c ch\u1ea5t ch\u1ec9 l\u00e0 s\u1eed d\u1ee5ng HTTP Kernel \u0111\u1ec3 handle request internal, kh\u00f4ng li\u00ean quan \u0111\u1ebfn network. Form request: \u0111a ph\u1ea7n th\u00ec class n\u00e0y ch\u1ec9 th\u1ef1c hi\u1ec7n khai b\u00e1o rules, kh\u00f4ng th\u1ef1c hi\u1ec7n logic g\u00ec \u0111\u1eb7c bi\u1ec7t n\u00ean kh\u00f4ng c\u1ea7n test ri\u00eang method rules() m\u00e0 test g\u1ed9p chung v\u1edbi controller Model: kh\u00f4ng c\u1ea7n test config c\u00e1c field nh\u01b0 fillable, casts, hidden, visible qua unit tests v\u00ec ph\u1ea7n n\u00e0y \u0111\u00e3 \u0111\u01b0\u1ee3c Laravel test, vi\u1ec7c c\u1ea7n test \u1edf \u0111\u00e2y l\u00e0 n\u00f3 c\u00f3 t\u00edch h\u1ee3p v\u1edbi database \u0111\u00fang kh\u00f4ng, v\u00ed d\u1ee5 t\u00ean tr\u01b0\u1eddng c\u00f3 \u0111\u00fang v\u1edbi db, value c\u00f3 v\u01b0\u1ee3t qu\u00e1 limit,... Developer Test \u00b6 Developer tr\u01b0\u1edbc ti\u00ean ch\u1ec9 c\u1ea7n focus v\u00e0o 2 lo\u1ea1i test Unit test \u00b6 Unit Testing l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p ki\u1ec3m th\u1eed ph\u1ea7n m\u1ec1m m\u00e0 \u1edf \u0111\u00f3 t\u1eebng \u0111\u01a1n v\u1ecb ri\u00eang l\u1ebb (Individual Unit) c\u1ee7a source code \u0111\u01b0\u1ee3c test \u1ede trong PHP Project, vi\u1ebft Unit Test l\u00e0 vi\u1ec7c vi\u1ebft test cho t\u1eebng function ho\u1eb7c method c\u1ee7a m\u1ed9t class Unit test kh\u00f4ng th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c sau: Truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) S\u1eed d\u1ee5ng network, g\u1ecdi api b\u00ean ngo\u00e0i (l\u00e0m ch\u1eadm, k\u1ebft qu\u1ea3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh v\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o m\u1ea1ng) S\u1eed d\u1ee5ng file system (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) Integration test \u00b6 Test vi\u1ec7c k\u1ebft h\u1ee3p gi\u1eefa c\u00e1c unit (function, method) v\u1edbi nhau => test m\u1ed9t nh\u00f3m Unit Ch\u1eb3ng h\u1ea1n Unit test, test t\u1eebng method c\u1ee7a Service v\u00e0 Controller s\u1eed d\u1ee5ng service => Integration s\u1ebd test vi\u1ec7c s\u1eed d\u1ee5ng k\u1ebft h\u1ee3p service v\u00e0 controller => Test route C\u00f3 th\u1ec3 truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (thi\u1ebft l\u1eadp m\u1ed9t database test ri\u00eang bi\u1ec7t) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng file system (test vi\u1ec7c import/export file, file permission...) V\u1edbi vi\u1ec7c focus v\u00e0o hai level test n\u00e0y, theo ch\u00fang t\u00f4i l\u00e0 t\u1ed1i \u01b0u v\u1ec1 c\u1ea3 th\u1eddi gian vi\u1ebft v\u00e0 th\u1eddi gian ch\u1ea1y test, c\u0169ng nh\u01b0 \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c ph\u1ea7n n\u00e0o \u0111\u00f3 t\u00ednh hi\u1ec7u qu\u1ea3 c\u1ee7a vi\u1ec7c test.","title":"Gi\u1edbi thi\u1ec7u"},{"location":"#gi\u1edbi-thi\u1ec7u","text":"T\u00e0i li\u1ec7u n\u00e0y bao g\u1ed3m m\u1ed9t s\u1ed1 l\u00fd thuy\u1ebft c\u01a1 b\u1ea3n v\u1ec1 unit test n\u00f3i chung v\u00e0 c\u00e1ch tri\u1ec3n khai c\u1ee5 th\u1ec3 v\u1edbi framework Laravel v\u00e0 PHPUnit. Th\u1ef1c t\u1ebf th\u00ec c\u00f3 nhi\u1ec1u c\u00e1ch tri\u1ec3n khai unit test, \u0111\u1eb7c bi\u1ec7t l\u00e0 \u0111\u1ed1i v\u1edbi ng\u00f4n ng\u1eef m\u1ec1m d\u1ebbo nh\u01b0 PHP, v\u00e0 c\u0169ng c\u00f3 r\u1ea5t nhi\u1ec1u kh\u00e1i ni\u1ec7m nh\u01b0 unit test , integration test , feature test , system test , acceptance test ,.., hay c\u00e1c \u00fd ki\u1ebfn l\u00e0 b\u1ea1n ph\u1ea3i vi\u1ebft nh\u01b0 th\u1ebf n\u00e0y, th\u1ebf kia m\u1edbi \u0111\u00fang... Tuy nhi\u00ean, v\u1edbi m\u1ee5c \u0111\u00edch l\u00e0 gi\u00fap developer c\u00f3 th\u1ec3 tri\u1ec3n khai unit test m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng nh\u1ea5t, t\u00e0i li\u1ec7u n\u00e0y s\u1ebd c\u00f3 nhi\u1ec1u \u00fd ki\u1ebfn mang t\u00ednh quan \u0111i\u1ec3m , c\u00f3 th\u1ec3 n\u00f3 s\u1ebd kh\u00f4ng \u0111\u00fang trong m\u1ecdi tr\u01b0\u1eddng h\u1ee3p, c\u0169ng nh\u01b0 c\u1ed1 g\u1eafng s\u1eed d\u1ee5ng c\u00e1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 tri\u1ec3n khai. V\u1ec1 t\u00ednh hi\u1ec7u qu\u1ea3 th\u00ec ch\u01b0a th\u1ec3 \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c ngay, nh\u01b0ng ch\u00fang t\u00f4i s\u1ebd c\u1ed1 g\u1eafng \u0111\u00e1nh gi\u00e1 th\u01b0\u1eddng xuy\u00ean v\u00e0 c\u1ea3i thi\u1ec7n d\u1ea7n. R\u1ea5t mong nh\u1eadn \u0111\u01b0\u1ee3c \u00fd ki\u1ebfn \u0111\u00f3ng g\u00f3p c\u1ee7a c\u00e1c b\u1ea1n b\u1eb1ng c\u00e1ch t\u1ea1o issue ho\u1eb7c pull request \u0111\u1ec3 th\u1ea3o lu\u1eadn, s\u1eeda l\u1ed7i...","title":"Gi\u1edbi thi\u1ec7u"},{"location":"#quan-\u0111i\u1ec3m-test","text":"Ch\u1ecdn c\u00e1ch \u0111\u01a1n gi\u1ea3n, kh\u00f4ng qu\u00e1 quan tr\u1ecdng ph\u1ea3i l\u00e0 unit test thu\u1ea7n Follow theo t\u00e0i li\u1ec7u c\u1ee7a framework \u0111\u1ec3 d\u1ec5 d\u00e0ng t\u00ecm ki\u1ebfm, t\u00edch h\u1ee3p Test code c\u1ee7a project, kh\u00f4ng test code c\u1ee7a framework, th\u01b0 vi\u1ec7n V\u00ed d\u1ee5 v\u1edbi project Laravel: Controller: n\u1ebfu vi\u1ebft theo ki\u1ec3u unit test thu\u1ea7n th\u00ec \u0111\u00f2i h\u1ecfi ng\u01b0\u1eddi vi\u1ebft ph\u1ea3i c\u00f3 nhi\u1ec1u ki\u1ebfn th\u1ee9c v\u1ec1 framework, theo nh\u01b0 kinh nghi\u1ec7m th\u00ec l\u1ea7n \u0111\u1ea7u vi\u1ebft, t\u00f4i ph\u1ea3i dd xem response n\u00f3 l\u00e0 g\u00ec, sau \u0111\u00f3 l\u00e0 \u0111\u1ecdc code framework xem l\u00e0m sao \u0111\u1ec3 l\u1ea5y ra value t\u1eeb response \u0111\u1ec3 assert... m\u1eb7c d\u00f9 n\u00f3 c\u00f3 th\u1ec3 gi\u00fap ng\u01b0\u1eddi vi\u1ebft hi\u1ec3u s\u00e2u h\u01a1n v\u1ec1 framework, nh\u01b0ng n\u00f3 ph\u1ee9c t\u1ea1p, t\u1ed1n th\u1eddi gian. V\u1edbi c\u1ea3 controller th\u00ec ch\u1ee7 y\u1ebfu ch\u1ec9 \u0111\u1ec3 \u0111i\u1ec1u h\u01b0\u1edbng request, kh\u00f4ng c\u00f3 nhi\u1ec1u logic th\u00ec vi\u1ec7c vi\u1ebft unit test thu\u1ea7n c\u00f3 mang l\u1ea1i l\u1ee3i \u00edch? So v\u1edbi vi\u1ec7c d\u00f9ng http tests , ch\u00fang ta c\u00f3 t\u00e0i li\u1ec7u , c\u00f3 c\u00e1c helper method \u0111\u1ec3 vi\u1ebft test nhanh h\u01a1n, v\u1ec1 t\u1ed1c \u0111\u1ed9 th\u00ec n\u00f3 c\u0169ng kh\u00f4ng qu\u00e1 kh\u00e1c bi\u1ec7t so v\u1edbi unit test thu\u1ea7n v\u00ec g\u1ecdi l\u00e0 HTTP test nh\u01b0ng th\u1ef1c ch\u1ea5t ch\u1ec9 l\u00e0 s\u1eed d\u1ee5ng HTTP Kernel \u0111\u1ec3 handle request internal, kh\u00f4ng li\u00ean quan \u0111\u1ebfn network. Form request: \u0111a ph\u1ea7n th\u00ec class n\u00e0y ch\u1ec9 th\u1ef1c hi\u1ec7n khai b\u00e1o rules, kh\u00f4ng th\u1ef1c hi\u1ec7n logic g\u00ec \u0111\u1eb7c bi\u1ec7t n\u00ean kh\u00f4ng c\u1ea7n test ri\u00eang method rules() m\u00e0 test g\u1ed9p chung v\u1edbi controller Model: kh\u00f4ng c\u1ea7n test config c\u00e1c field nh\u01b0 fillable, casts, hidden, visible qua unit tests v\u00ec ph\u1ea7n n\u00e0y \u0111\u00e3 \u0111\u01b0\u1ee3c Laravel test, vi\u1ec7c c\u1ea7n test \u1edf \u0111\u00e2y l\u00e0 n\u00f3 c\u00f3 t\u00edch h\u1ee3p v\u1edbi database \u0111\u00fang kh\u00f4ng, v\u00ed d\u1ee5 t\u00ean tr\u01b0\u1eddng c\u00f3 \u0111\u00fang v\u1edbi db, value c\u00f3 v\u01b0\u1ee3t qu\u00e1 limit,...","title":"Quan \u0111i\u1ec3m test"},{"location":"#developer-test","text":"Developer tr\u01b0\u1edbc ti\u00ean ch\u1ec9 c\u1ea7n focus v\u00e0o 2 lo\u1ea1i test","title":"Developer Test"},{"location":"#unit-test","text":"Unit Testing l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p ki\u1ec3m th\u1eed ph\u1ea7n m\u1ec1m m\u00e0 \u1edf \u0111\u00f3 t\u1eebng \u0111\u01a1n v\u1ecb ri\u00eang l\u1ebb (Individual Unit) c\u1ee7a source code \u0111\u01b0\u1ee3c test \u1ede trong PHP Project, vi\u1ebft Unit Test l\u00e0 vi\u1ec7c vi\u1ebft test cho t\u1eebng function ho\u1eb7c method c\u1ee7a m\u1ed9t class Unit test kh\u00f4ng th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c sau: Truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) S\u1eed d\u1ee5ng network, g\u1ecdi api b\u00ean ngo\u00e0i (l\u00e0m ch\u1eadm, k\u1ebft qu\u1ea3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh v\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o m\u1ea1ng) S\u1eed d\u1ee5ng file system (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test)","title":"Unit test"},{"location":"#integration-test","text":"Test vi\u1ec7c k\u1ebft h\u1ee3p gi\u1eefa c\u00e1c unit (function, method) v\u1edbi nhau => test m\u1ed9t nh\u00f3m Unit Ch\u1eb3ng h\u1ea1n Unit test, test t\u1eebng method c\u1ee7a Service v\u00e0 Controller s\u1eed d\u1ee5ng service => Integration s\u1ebd test vi\u1ec7c s\u1eed d\u1ee5ng k\u1ebft h\u1ee3p service v\u00e0 controller => Test route C\u00f3 th\u1ec3 truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (thi\u1ebft l\u1eadp m\u1ed9t database test ri\u00eang bi\u1ec7t) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng file system (test vi\u1ec7c import/export file, file permission...) V\u1edbi vi\u1ec7c focus v\u00e0o hai level test n\u00e0y, theo ch\u00fang t\u00f4i l\u00e0 t\u1ed1i \u01b0u v\u1ec1 c\u1ea3 th\u1eddi gian vi\u1ebft v\u00e0 th\u1eddi gian ch\u1ea1y test, c\u0169ng nh\u01b0 \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c ph\u1ea7n n\u00e0o \u0111\u00f3 t\u00ednh hi\u1ec7u qu\u1ea3 c\u1ee7a vi\u1ec7c test.","title":"Integration test"},{"location":"01-why/","text":"Vi\u1ebft test \u0111\u1ec3 l\u00e0m g\u00ec? \u00b6 C\u00f3 th\u1ec3 k\u1ec3 ra m\u1ed9t s\u1ed1 l\u1ee3i \u00edch khi vi\u1ebft test nh\u01b0: T\u1ef1 tin h\u01a1n trong vi\u1ec7c t\u00edch h\u1ee3p, b\u1ea3o tr\u00ec, m\u1edf r\u1ed9ng v\u00e0 refactor h\u1ec7 th\u1ed1ng Do \u0111\u00e3 c\u00f3 test case cho nh\u1eefng function, ch\u1ee9c n\u0103ng trong h\u1ec7 th\u1ed1ng, n\u00ean vi\u1ec7c refactor s\u1ebd tr\u1edf n\u00ean t\u1ef1 tin h\u01a1n, n\u1ebfu c\u00f3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn c\u00e1c ph\u1ea7n kh\u00e1c th\u00ec ch\u00fang ta s\u1ebd bi\u1ebft \u0111\u01b0\u1ee3c th\u00f4ng qua vi\u1ec7c test case b\u1ecb failed. T\u00edch h\u1ee3p CI/CD t\u1ef1 \u0111\u1ed9ng h\u00f3a qu\u00e1 tr\u00ecnh merge, deploy C\u1ea3i thi\u1ec7n k\u1ef9 n\u0103ng c\u1ee7a Developer Vi\u1ec7c vi\u1ebft test gi\u00fap developer hi\u1ec3u h\u01a1n v\u1ec1 thi\u1ebft k\u1ebf code, t\u1ee9c l\u00e0 khi vi\u1ebft code b\u1ea1n s\u1ebd ph\u1ea3i c\u00e2n nh\u1eafc \u0111\u1ec3 l\u00e0m sao cho \u0111o\u1ea1n code \u0111\u00f3 c\u00f3 th\u1ec3 d\u1ec5 \u0111\u1ecdc, d\u1ec5 hi\u1ec3u v\u00e0 d\u1ec5 test. Cover k\u1ef9 h\u01a1n y\u00eau c\u1ea7u h\u1ec7 th\u1ed1ng v\u00ec ph\u1ea3i vi\u1ebft test case \u0111\u1ea7y \u0111\u1ee7 h\u01a1n v\u00e0 ghi nh\u1edb th\u00f4ng qua vi\u1ec7c vi\u1ebft ra suy ngh\u0129, thay v\u00ec ch\u1ec9 test th\u1ee7 c\u00f4ng b\u1eb1ng vi\u1ec7c suy ngh\u0129 trong \u0111\u1ea7u. Gi\u00fap hi\u1ec3u h\u01a1n v\u1ec1 ki\u1ebfn tr\u00fac framework, v\u00ec khi vi\u1ebft test s\u1ebd c\u1ea7n bi\u1ebft lu\u1ed3ng ho\u1ea1t \u0111\u1ed9ng code, v\u1ec1 c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a DI v\u00e0 nhi\u1ec1u khi ph\u1ea3i debug \u0111\u1ec3 t\u00ecm ra nguy\u00ean nh\u00e2n test failed. Vi\u1ebft test gi\u1edd \u0111\u00e2y l\u00e0 m\u1ed9t y\u00eau c\u1ea7u b\u1eaft bu\u1ed9c \u0111\u1ed1i v\u1edbi h\u1ea7u h\u1ebft c\u00e1c d\u1ef1 \u00e1n open source, v\u1eady n\u00ean \u0111\u00e2y c\u0169ng l\u00e0 m\u1ed9t k\u1ef9 n\u0103ng quan tr\u1ecdng m\u00e0 developer c\u1ea7n c\u00f3 n\u1ebfu mu\u1ed1n l\u00e0m \u0111\u1eb9p profile c\u1ee7a m\u00ecnh.","title":"Vi\u1ebft test \u0111\u1ec3 l\u00e0m g\u00ec?"},{"location":"01-why/#vi\u1ebft-test-\u0111\u1ec3-l\u00e0m-g\u00ec","text":"C\u00f3 th\u1ec3 k\u1ec3 ra m\u1ed9t s\u1ed1 l\u1ee3i \u00edch khi vi\u1ebft test nh\u01b0: T\u1ef1 tin h\u01a1n trong vi\u1ec7c t\u00edch h\u1ee3p, b\u1ea3o tr\u00ec, m\u1edf r\u1ed9ng v\u00e0 refactor h\u1ec7 th\u1ed1ng Do \u0111\u00e3 c\u00f3 test case cho nh\u1eefng function, ch\u1ee9c n\u0103ng trong h\u1ec7 th\u1ed1ng, n\u00ean vi\u1ec7c refactor s\u1ebd tr\u1edf n\u00ean t\u1ef1 tin h\u01a1n, n\u1ebfu c\u00f3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn c\u00e1c ph\u1ea7n kh\u00e1c th\u00ec ch\u00fang ta s\u1ebd bi\u1ebft \u0111\u01b0\u1ee3c th\u00f4ng qua vi\u1ec7c test case b\u1ecb failed. T\u00edch h\u1ee3p CI/CD t\u1ef1 \u0111\u1ed9ng h\u00f3a qu\u00e1 tr\u00ecnh merge, deploy C\u1ea3i thi\u1ec7n k\u1ef9 n\u0103ng c\u1ee7a Developer Vi\u1ec7c vi\u1ebft test gi\u00fap developer hi\u1ec3u h\u01a1n v\u1ec1 thi\u1ebft k\u1ebf code, t\u1ee9c l\u00e0 khi vi\u1ebft code b\u1ea1n s\u1ebd ph\u1ea3i c\u00e2n nh\u1eafc \u0111\u1ec3 l\u00e0m sao cho \u0111o\u1ea1n code \u0111\u00f3 c\u00f3 th\u1ec3 d\u1ec5 \u0111\u1ecdc, d\u1ec5 hi\u1ec3u v\u00e0 d\u1ec5 test. Cover k\u1ef9 h\u01a1n y\u00eau c\u1ea7u h\u1ec7 th\u1ed1ng v\u00ec ph\u1ea3i vi\u1ebft test case \u0111\u1ea7y \u0111\u1ee7 h\u01a1n v\u00e0 ghi nh\u1edb th\u00f4ng qua vi\u1ec7c vi\u1ebft ra suy ngh\u0129, thay v\u00ec ch\u1ec9 test th\u1ee7 c\u00f4ng b\u1eb1ng vi\u1ec7c suy ngh\u0129 trong \u0111\u1ea7u. Gi\u00fap hi\u1ec3u h\u01a1n v\u1ec1 ki\u1ebfn tr\u00fac framework, v\u00ec khi vi\u1ebft test s\u1ebd c\u1ea7n bi\u1ebft lu\u1ed3ng ho\u1ea1t \u0111\u1ed9ng code, v\u1ec1 c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a DI v\u00e0 nhi\u1ec1u khi ph\u1ea3i debug \u0111\u1ec3 t\u00ecm ra nguy\u00ean nh\u00e2n test failed. Vi\u1ebft test gi\u1edd \u0111\u00e2y l\u00e0 m\u1ed9t y\u00eau c\u1ea7u b\u1eaft bu\u1ed9c \u0111\u1ed1i v\u1edbi h\u1ea7u h\u1ebft c\u00e1c d\u1ef1 \u00e1n open source, v\u1eady n\u00ean \u0111\u00e2y c\u0169ng l\u00e0 m\u1ed9t k\u1ef9 n\u0103ng quan tr\u1ecdng m\u00e0 developer c\u1ea7n c\u00f3 n\u1ebfu mu\u1ed1n l\u00e0m \u0111\u1eb9p profile c\u1ee7a m\u00ecnh.","title":"Vi\u1ebft test \u0111\u1ec3 l\u00e0m g\u00ec?"},{"location":"02-testcase/","text":"C\u01a1 b\u1ea3n v\u1ec1 test case \u00b6 Kh\u00e1i ni\u1ec7m \u00b6 Test Case l\u00e0 m\u1ed9t thu\u1eadt ng\u1eef ph\u1ed5 bi\u1ebfn th\u01b0\u1eddng d\u00f9ng trong c\u00e1c b\u00e0i Test c\u1ee5 th\u1ec3. N\u00f3 th\u01b0\u1eddng l\u00e0 \u0111\u01a1n v\u1ecb nh\u1ecf nh\u1ea5t c\u1ee7a Testing. M\u1ed9t Test Case s\u1ebd bao g\u1ed3m c\u00e1c th\u00f4ng tin nh\u01b0 requirements testing (c\u00e1c inputs, \u0111i\u1ec1u ki\u1ec7n th\u1ef1c thi), test steps, verification steps, prerequisites, outputs, test environment ... Vi\u1ebft test case \u00b6 Tr\u01b0\u1edbc khi t\u1ea1o b\u1ea5t c\u1ee9 Test Cases n\u00e0o, ch\u00fang ta n\u00ean x\u00e1c \u0111\u1ecbnh r\u00f5 gi\u00e1 tr\u1ecb \u0111\u1ea7u v\u00e0o c\u1ee7a t\u1eebng function/method c\u1ea7n \u0111\u01b0\u1ee3c test. C\u00e1c Test Cases ph\u1ea3i \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 c\u00f3 th\u1ec3 cover \u0111\u01b0\u1ee3c h\u1ebft c\u00e1c s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb inputs c\u00f9ng c\u00e1c \u0111i\u1ec1u ki\u1ec7n, bao ph\u1ee7 h\u1ebft c\u00e1c nh\u00e1nh if/else. Nh\u00ecn chung, ch\u00fang ta th\u01b0\u1eddng chia test case ra l\u00e0m 3 lo\u1ea1i d\u1ef1a tr\u00ean d\u1eef li\u1ec7u inputs cho Unit Test. Normal : Inputs thu\u1ed9c v\u00e0o d\u1ea3i d\u1eef li\u1ec7u b\u00ecnh th\u01b0\u1eddng (accepted). M\u1ed9t l\u01b0\u1ee3ng l\u1edbn codes c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cover b\u1eb1ng c\u00e1ch ch\u1ec9 c\u1ea7n ch\u1ea1y normal test cases. Boundary : Inputs b\u1eb1ng ho\u1eb7c x\u1ea5p x\u1ec9 gi\u00e1 tr\u1ecb maximum hay minimum. Ch\u00fang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e1t hi\u1ec7n l\u1ed7i t\u1ea1i c\u1eadn, thay v\u00ec t\u00ecm ki\u1ebfm l\u1ed7i t\u1ea1i nh\u1eefng v\u1ecb tr\u00ed \u1edf gi\u1eefa trong d\u1ea3i input. Abnormal : Inputs l\u00e0 kh\u00f4ng h\u1ee3p l\u1ec7 hay kh\u00f4ng \u0111\u01b0\u1ee3c k\u1ef3 v\u1ecdng, d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra kh\u1ea3 n\u0103ng handle l\u1ed7i. V\u00ed d\u1ee5: Gi\u1ea3 s\u1eed nh\u01b0 ch\u00fang ta c\u00f3 m\u1ed9t function \u0111\u1ec3 ki\u1ec3m tra \u0111\u1ecba ch\u1ec9 email nh\u1eadp v\u00e0o t\u1eeb user. \u0110\u1ed9 d\u00e0i t\u1ed1i \u0111a c\u1ee7a email l\u00e0 50 k\u00fd t\u1ef1. function validate ( $email ) { if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) && strlen ( $email ) <= 50 ) { return true ; } return false ; } Ch\u00fang ta n\u00ean vi\u1ebft c\u00e1c Test Cases nh\u01b0 sau: Normal cases \u00b6 public function test_valid_email_format_and_length () { // Email with length 18 (less than: maximum - 1) $email = 'sample@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } Boundary cases \u00b6 public function test_valid_email_format_and_length_max_minus () { // Email with length 49 (maximum - 1) $email = 'samplesamplesamplesamplesamplesamples@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max () { // Email with length 50 (equal maximum) $email = 'samplesamplesamplesamplesamplesamplesa@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max_plus () { // Email with length 51 (maximum + 1) $email = 'samplesamplesamplesamplesamplesamplesam@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } Abnormal cases \u00b6 public function test_invalid_email_format () { // Invalid email format with normal length (between 0 ~ 50) $email = 'framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } public function test_valid_email_format_and_length_exceeded () { // Email with length 54 $email = 'samplesamplesamplesamplesamplesamplesample@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); }","title":"C\u01a1 b\u1ea3n v\u1ec1 test case"},{"location":"02-testcase/#c\u01a1-b\u1ea3n-v\u1ec1-test-case","text":"","title":"C\u01a1 b\u1ea3n v\u1ec1 test case"},{"location":"02-testcase/#kh\u00e1i-ni\u1ec7m","text":"Test Case l\u00e0 m\u1ed9t thu\u1eadt ng\u1eef ph\u1ed5 bi\u1ebfn th\u01b0\u1eddng d\u00f9ng trong c\u00e1c b\u00e0i Test c\u1ee5 th\u1ec3. N\u00f3 th\u01b0\u1eddng l\u00e0 \u0111\u01a1n v\u1ecb nh\u1ecf nh\u1ea5t c\u1ee7a Testing. M\u1ed9t Test Case s\u1ebd bao g\u1ed3m c\u00e1c th\u00f4ng tin nh\u01b0 requirements testing (c\u00e1c inputs, \u0111i\u1ec1u ki\u1ec7n th\u1ef1c thi), test steps, verification steps, prerequisites, outputs, test environment ...","title":"Kh\u00e1i ni\u1ec7m"},{"location":"02-testcase/#vi\u1ebft-test-case","text":"Tr\u01b0\u1edbc khi t\u1ea1o b\u1ea5t c\u1ee9 Test Cases n\u00e0o, ch\u00fang ta n\u00ean x\u00e1c \u0111\u1ecbnh r\u00f5 gi\u00e1 tr\u1ecb \u0111\u1ea7u v\u00e0o c\u1ee7a t\u1eebng function/method c\u1ea7n \u0111\u01b0\u1ee3c test. C\u00e1c Test Cases ph\u1ea3i \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 c\u00f3 th\u1ec3 cover \u0111\u01b0\u1ee3c h\u1ebft c\u00e1c s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb inputs c\u00f9ng c\u00e1c \u0111i\u1ec1u ki\u1ec7n, bao ph\u1ee7 h\u1ebft c\u00e1c nh\u00e1nh if/else. Nh\u00ecn chung, ch\u00fang ta th\u01b0\u1eddng chia test case ra l\u00e0m 3 lo\u1ea1i d\u1ef1a tr\u00ean d\u1eef li\u1ec7u inputs cho Unit Test. Normal : Inputs thu\u1ed9c v\u00e0o d\u1ea3i d\u1eef li\u1ec7u b\u00ecnh th\u01b0\u1eddng (accepted). M\u1ed9t l\u01b0\u1ee3ng l\u1edbn codes c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cover b\u1eb1ng c\u00e1ch ch\u1ec9 c\u1ea7n ch\u1ea1y normal test cases. Boundary : Inputs b\u1eb1ng ho\u1eb7c x\u1ea5p x\u1ec9 gi\u00e1 tr\u1ecb maximum hay minimum. Ch\u00fang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e1t hi\u1ec7n l\u1ed7i t\u1ea1i c\u1eadn, thay v\u00ec t\u00ecm ki\u1ebfm l\u1ed7i t\u1ea1i nh\u1eefng v\u1ecb tr\u00ed \u1edf gi\u1eefa trong d\u1ea3i input. Abnormal : Inputs l\u00e0 kh\u00f4ng h\u1ee3p l\u1ec7 hay kh\u00f4ng \u0111\u01b0\u1ee3c k\u1ef3 v\u1ecdng, d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra kh\u1ea3 n\u0103ng handle l\u1ed7i. V\u00ed d\u1ee5: Gi\u1ea3 s\u1eed nh\u01b0 ch\u00fang ta c\u00f3 m\u1ed9t function \u0111\u1ec3 ki\u1ec3m tra \u0111\u1ecba ch\u1ec9 email nh\u1eadp v\u00e0o t\u1eeb user. \u0110\u1ed9 d\u00e0i t\u1ed1i \u0111a c\u1ee7a email l\u00e0 50 k\u00fd t\u1ef1. function validate ( $email ) { if ( filter_var ( $email , FILTER_VALIDATE_EMAIL ) && strlen ( $email ) <= 50 ) { return true ; } return false ; } Ch\u00fang ta n\u00ean vi\u1ebft c\u00e1c Test Cases nh\u01b0 sau:","title":"Vi\u1ebft test case"},{"location":"02-testcase/#normal-cases","text":"public function test_valid_email_format_and_length () { // Email with length 18 (less than: maximum - 1) $email = 'sample@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); }","title":"Normal cases"},{"location":"02-testcase/#boundary-cases","text":"public function test_valid_email_format_and_length_max_minus () { // Email with length 49 (maximum - 1) $email = 'samplesamplesamplesamplesamplesamples@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max () { // Email with length 50 (equal maximum) $email = 'samplesamplesamplesamplesamplesamplesa@framgia.com' ; $this -> assertEquals ( true , validate ( $email )); } public function test_valid_email_format_and_length_max_plus () { // Email with length 51 (maximum + 1) $email = 'samplesamplesamplesamplesamplesamplesam@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); }","title":"Boundary cases"},{"location":"02-testcase/#abnormal-cases","text":"public function test_invalid_email_format () { // Invalid email format with normal length (between 0 ~ 50) $email = 'framgia.com' ; $this -> assertEquals ( false , validate ( $email )); } public function test_valid_email_format_and_length_exceeded () { // Email with length 54 $email = 'samplesamplesamplesamplesamplesamplesample@framgia.com' ; $this -> assertEquals ( false , validate ( $email )); }","title":"Abnormal cases"},{"location":"03-phpunit/","text":"PHPUnit \u00b6 C\u00e0i \u0111\u1eb7t \u00b6 C\u00e0i \u0111\u1eb7t theo t\u1eebng project: composer require --dev phpunit/phpunit Khi \u0111\u00f3 ta c\u00f3 tool: ./vendor/bin/phpunit C\u1ea5u h\u00ecnh \u00b6 File c\u1ea5u h\u00ecnh phpunit.xml (th\u01b0\u1eddng \u0111\u00e3 c\u00f3 s\u1eb5n trong project Laravel): <?xml version=\"1.0\" encoding=\"UTF-8\"?> <phpunit bootstrap= \"vendor/autoload.php\" colors= \"true\" convertErrorsToExceptions= \"true\" convertNoticesToExceptions= \"true\" convertWarningsToExceptions= \"true\" processIsolation= \"false\" stopOnFailure= \"true\" > <testsuites> <testsuite name= \"Integration\" > <directory suffix= \"Test.php\" > ./tests/Integration </directory> </testsuite> <testsuite name= \"Unit\" > <directory suffix= \"Test.php\" > ./tests/Unit </directory> </testsuite> </testsuites> <filter> <!-- For generate coverage report --> <whitelist processUncoveredFilesFromWhitelist= \"true\" > <directory suffix= \".php\" > ./app </directory> </whitelist> </filter> <php> <!-- Environment variables --> <env name= \"APP_ENV\" value= \"testing\" /> <env name= \"APP_KEY\" value= \"App under test\" /> </php> </phpunit> Environment variables c\u00f3 th\u1ec3 khai b\u00e1o tr\u1ef1c ti\u1ebfp trong file phpunit.xml ho\u1eb7c s\u1eed d\u1ee5ng file env.testing (Laravel): APP_NAME = \"App Test\" APP_KEY = ... APP_DEBUG = false APP_URL = http://localhost DB_CONNECTION = mysql DB_HOST = 127.0.0.1 DB_PORT = 3306 DB_DATABASE = db_test DB_USERNAME = db_test DB_PASSWORD = secret Ch\u1ea1y test \u00b6 Ch\u1ea1y to\u00e0n b\u1ed9 test case \u00b6 ./vendor/bin/phpunit Ch\u1ea1y t\u1eebng test suite \u00b6 ./vendor/bin/phpunit --testsuite = Unit ./vendor/bin/phpunit --testsuite = Integration Ch\u1ea1y t\u1eebng file \u00b6 ./vendor/bin/phpunit tests/Unit/ProductServiceTest.php Filter test case \u00b6 ./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass::testMethod' ./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass' ./vendor/bin/phpunit --filter TestNamespace ./vendor/bin/phpunit --filter TestCaseClass ./vendor/bin/phpunit --filter testMethod Format output \u00b6 ./vendor/bin/phpunit --testdox Example test \u00b6 <? php // tests/Unit/CalculatorTest.php namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; // PHPUnit_Framework_TestCase (old version) use App\\Calculator ; class CalculatorTest extends TestCase { public function test_add_return_correct_value () { // Given (these numbers) // Arrange input $numbers = [ 1 , 2 ]; // When (add them) // Act: call unit $calculator = new Calculator ; // Class Under Test $actualResult = $calculator -> add ( $numbers ); // Method Under Test // Then (verify the result is correct) // Assert $expectedResult = 3 ; $this -> assertEquals ( $expectedResult , $actualResult ); } } Th\u01b0\u1eddng \u0111\u01b0\u1ee3c chia th\u00e0nh 3 ph\u1ea7n theo c\u00e1c pattern: Given - When - Then Arrange - Act - Assert Setup and Teardown \u00b6 PHPUnit TestCase cung c\u1ea5p m\u1ed9t s\u1ed1 method h\u1ed7 tr\u1ee3 cho vi\u1ec7c chu\u1ea9n b\u1ecb (arrange) input: setUp() : Ch\u1ea1y tr\u01b0\u1edbc m\u1ed7i method test tearDown() : Ch\u1ea1y sau m\u1ed7i method test setUpBeforeClass() : Ch\u1ea1y khi b\u1eaft \u0111\u1ea7u class test tearDownAfterClass() : Ch\u1ea1y sau khi k\u1ebft th\u00fac class test V\u00ed d\u1ee5: class ExampleTest extends TestCase { protected static $db ; protected $classUnderTest ; public static function setUpBeforeClass () { self :: $db = new PDO ( 'sqlite::memory:' ); } public function setUp () { parent :: setUp (); $this -> classUnderTest = new MyClass ; // Database begin transaction self :: $db -> beginTransaction (); } public function test_add_return_correct_value () { } public function test_add_throws_exception_if_input_is_nan () { } public function tearDown () { // Rollback transaction for fresh database state self :: $db -> rollback (); } public static function tearDownAfterClass () { self :: $db = null ; } } Tr\u00ecnh t\u1ef1 PHPUnit th\u1ef1c hi\u1ec7n test: (1) ExampleTest::setUpBeforeClass() (2) ExampleTest::setUp() (3) ExampleTest::test_add_return_correct_value() (4) ExampleTest::tearDown() (5) ExampleTest::setUp() (6) ExampleTest::test_add_throws_exception_if_input_is_nan() (7) ExampleTest::tearDown() (8) ExampleTest::tearDownAfterClass() Assertion \u00b6 ** * Verify $actualValue equals to $expectedValue ? * N\u1ebfu kh\u00f4ng \u0111\u00fang , th\u00ec show ra message * N\u1ebfu kh\u00f4ng truy\u1ec1n v\u00e0o message th\u00ec PHPUnit s\u1ebd t\u1ef1 \u0111\u1ed9ng generate : * => Failed asserting that 4 matches expected 5. */ function assertEquals ( $expectedValue , $actualValue , $message = '' ) M\u1ed9t s\u1ed1 assertion th\u01b0\u1eddng d\u00f9ng: assertTrue() <> assertFalse() assertEquals() <> assertNotEquals() : So s\u00e1nh b\u1eb1ng assertSame() <> assertNotSame() : So s\u00e1nh b\u1eb1ng, c\u00f9ng ki\u1ec3u assertContains() <> assertNotContains() : Array contain, String contains assertArrayHasKey() <> assertArrayNotHasKey() assertInstanceOf() <> assertNotInstanceOf() : \u0110\u1ed1i t\u01b0\u1ee3ng thu\u1ed9c class assertCount() expectException() : Expect s\u1ebd c\u00f3 Exception khi g\u1ecdi ch\u1ea1y unit, ch\u00fa \u00fd ph\u1ea3i g\u1ecdi tr\u01b0\u1edbc khi g\u1ecdi method / function public function test_foo () { $this -> expectException ( InvalidArgument :: class ); $this -> classUnderTest -> execute (); } Best practices \u00b6 S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass ); Data provider \u00b6 S\u1eed d\u1ee5ng @dataProvider cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p ch\u1ec9 kh\u00e1c nhau input, output /** * @dataProvider provider_test_foo */ public function test_foo ( $variableOne , $variableTwo ) { $this -> assertEquals ( $variableOne , $this -> classUnderTest -> execute ( $variableTwo )); } public function provider_test_foo () { return [ [ 'test 1, variable one' , 'test 1, variable two' ], [ 'test 2, variable one' , 'test 2, variable two' ], [ 'test 3, variable one' , 'test 3, variable two' ], ]; }","title":"PHPUnit"},{"location":"03-phpunit/#phpunit","text":"","title":"PHPUnit"},{"location":"03-phpunit/#c\u00e0i-\u0111\u1eb7t","text":"C\u00e0i \u0111\u1eb7t theo t\u1eebng project: composer require --dev phpunit/phpunit Khi \u0111\u00f3 ta c\u00f3 tool: ./vendor/bin/phpunit","title":"C\u00e0i \u0111\u1eb7t"},{"location":"03-phpunit/#c\u1ea5u-h\u00ecnh","text":"File c\u1ea5u h\u00ecnh phpunit.xml (th\u01b0\u1eddng \u0111\u00e3 c\u00f3 s\u1eb5n trong project Laravel): <?xml version=\"1.0\" encoding=\"UTF-8\"?> <phpunit bootstrap= \"vendor/autoload.php\" colors= \"true\" convertErrorsToExceptions= \"true\" convertNoticesToExceptions= \"true\" convertWarningsToExceptions= \"true\" processIsolation= \"false\" stopOnFailure= \"true\" > <testsuites> <testsuite name= \"Integration\" > <directory suffix= \"Test.php\" > ./tests/Integration </directory> </testsuite> <testsuite name= \"Unit\" > <directory suffix= \"Test.php\" > ./tests/Unit </directory> </testsuite> </testsuites> <filter> <!-- For generate coverage report --> <whitelist processUncoveredFilesFromWhitelist= \"true\" > <directory suffix= \".php\" > ./app </directory> </whitelist> </filter> <php> <!-- Environment variables --> <env name= \"APP_ENV\" value= \"testing\" /> <env name= \"APP_KEY\" value= \"App under test\" /> </php> </phpunit> Environment variables c\u00f3 th\u1ec3 khai b\u00e1o tr\u1ef1c ti\u1ebfp trong file phpunit.xml ho\u1eb7c s\u1eed d\u1ee5ng file env.testing (Laravel): APP_NAME = \"App Test\" APP_KEY = ... APP_DEBUG = false APP_URL = http://localhost DB_CONNECTION = mysql DB_HOST = 127.0.0.1 DB_PORT = 3306 DB_DATABASE = db_test DB_USERNAME = db_test DB_PASSWORD = secret","title":"C\u1ea5u h\u00ecnh"},{"location":"03-phpunit/#ch\u1ea1y-test","text":"","title":"Ch\u1ea1y test"},{"location":"03-phpunit/#ch\u1ea1y-to\u00e0n-b\u1ed9-test-case","text":"./vendor/bin/phpunit","title":"Ch\u1ea1y to\u00e0n b\u1ed9 test case"},{"location":"03-phpunit/#ch\u1ea1y-t\u1eebng-test-suite","text":"./vendor/bin/phpunit --testsuite = Unit ./vendor/bin/phpunit --testsuite = Integration","title":"Ch\u1ea1y t\u1eebng test suite"},{"location":"03-phpunit/#ch\u1ea1y-t\u1eebng-file","text":"./vendor/bin/phpunit tests/Unit/ProductServiceTest.php","title":"Ch\u1ea1y t\u1eebng file"},{"location":"03-phpunit/#filter-test-case","text":"./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass::testMethod' ./vendor/bin/phpunit --filter 'TestNamespace\\\\TestCaseClass' ./vendor/bin/phpunit --filter TestNamespace ./vendor/bin/phpunit --filter TestCaseClass ./vendor/bin/phpunit --filter testMethod","title":"Filter test case"},{"location":"03-phpunit/#format-output","text":"./vendor/bin/phpunit --testdox","title":"Format output"},{"location":"03-phpunit/#example-test","text":"<? php // tests/Unit/CalculatorTest.php namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; // PHPUnit_Framework_TestCase (old version) use App\\Calculator ; class CalculatorTest extends TestCase { public function test_add_return_correct_value () { // Given (these numbers) // Arrange input $numbers = [ 1 , 2 ]; // When (add them) // Act: call unit $calculator = new Calculator ; // Class Under Test $actualResult = $calculator -> add ( $numbers ); // Method Under Test // Then (verify the result is correct) // Assert $expectedResult = 3 ; $this -> assertEquals ( $expectedResult , $actualResult ); } } Th\u01b0\u1eddng \u0111\u01b0\u1ee3c chia th\u00e0nh 3 ph\u1ea7n theo c\u00e1c pattern: Given - When - Then Arrange - Act - Assert","title":"Example test"},{"location":"03-phpunit/#setup-and-teardown","text":"PHPUnit TestCase cung c\u1ea5p m\u1ed9t s\u1ed1 method h\u1ed7 tr\u1ee3 cho vi\u1ec7c chu\u1ea9n b\u1ecb (arrange) input: setUp() : Ch\u1ea1y tr\u01b0\u1edbc m\u1ed7i method test tearDown() : Ch\u1ea1y sau m\u1ed7i method test setUpBeforeClass() : Ch\u1ea1y khi b\u1eaft \u0111\u1ea7u class test tearDownAfterClass() : Ch\u1ea1y sau khi k\u1ebft th\u00fac class test V\u00ed d\u1ee5: class ExampleTest extends TestCase { protected static $db ; protected $classUnderTest ; public static function setUpBeforeClass () { self :: $db = new PDO ( 'sqlite::memory:' ); } public function setUp () { parent :: setUp (); $this -> classUnderTest = new MyClass ; // Database begin transaction self :: $db -> beginTransaction (); } public function test_add_return_correct_value () { } public function test_add_throws_exception_if_input_is_nan () { } public function tearDown () { // Rollback transaction for fresh database state self :: $db -> rollback (); } public static function tearDownAfterClass () { self :: $db = null ; } } Tr\u00ecnh t\u1ef1 PHPUnit th\u1ef1c hi\u1ec7n test: (1) ExampleTest::setUpBeforeClass() (2) ExampleTest::setUp() (3) ExampleTest::test_add_return_correct_value() (4) ExampleTest::tearDown() (5) ExampleTest::setUp() (6) ExampleTest::test_add_throws_exception_if_input_is_nan() (7) ExampleTest::tearDown() (8) ExampleTest::tearDownAfterClass()","title":"Setup and Teardown"},{"location":"03-phpunit/#assertion","text":"** * Verify $actualValue equals to $expectedValue ? * N\u1ebfu kh\u00f4ng \u0111\u00fang , th\u00ec show ra message * N\u1ebfu kh\u00f4ng truy\u1ec1n v\u00e0o message th\u00ec PHPUnit s\u1ebd t\u1ef1 \u0111\u1ed9ng generate : * => Failed asserting that 4 matches expected 5. */ function assertEquals ( $expectedValue , $actualValue , $message = '' ) M\u1ed9t s\u1ed1 assertion th\u01b0\u1eddng d\u00f9ng: assertTrue() <> assertFalse() assertEquals() <> assertNotEquals() : So s\u00e1nh b\u1eb1ng assertSame() <> assertNotSame() : So s\u00e1nh b\u1eb1ng, c\u00f9ng ki\u1ec3u assertContains() <> assertNotContains() : Array contain, String contains assertArrayHasKey() <> assertArrayNotHasKey() assertInstanceOf() <> assertNotInstanceOf() : \u0110\u1ed1i t\u01b0\u1ee3ng thu\u1ed9c class assertCount() expectException() : Expect s\u1ebd c\u00f3 Exception khi g\u1ecdi ch\u1ea1y unit, ch\u00fa \u00fd ph\u1ea3i g\u1ecdi tr\u01b0\u1edbc khi g\u1ecdi method / function public function test_foo () { $this -> expectException ( InvalidArgument :: class ); $this -> classUnderTest -> execute (); }","title":"Assertion"},{"location":"03-phpunit/#best-practices","text":"S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass );","title":"Best practices"},{"location":"03-phpunit/#data-provider","text":"S\u1eed d\u1ee5ng @dataProvider cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p ch\u1ec9 kh\u00e1c nhau input, output /** * @dataProvider provider_test_foo */ public function test_foo ( $variableOne , $variableTwo ) { $this -> assertEquals ( $variableOne , $this -> classUnderTest -> execute ( $variableTwo )); } public function provider_test_foo () { return [ [ 'test 1, variable one' , 'test 1, variable two' ], [ 'test 2, variable one' , 'test 2, variable two' ], [ 'test 3, variable one' , 'test 3, variable two' ], ]; }","title":"Data provider"},{"location":"04-code-coverage/","text":"Code Coverage \u00b6 Kh\u00e1i ni\u1ec7m \u00b6 Code coverage l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 m\u00f4 t\u1ea3 m\u1ee9c \u0111\u1ed9 m\u00e0 source code c\u1ee7a m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c thi, khi m\u00e0 m\u1ed9t b\u1ed9 Test c\u1ee5 th\u1ec3 ch\u1ea1y. N\u00f3i m\u1ed9t c\u00e1ch kh\u00e1c, Code coverage l\u00e0 m\u1ed9t c\u00e1ch \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng Tests c\u1ee7a b\u1ea1n th\u1ef1c s\u1ef1 \u0111ang test Codes c\u1ee7a b\u1ea1n! C\u00f4ng th\u1ee9c t\u00ednh Code coverage: Code Coverage = (T\u1ed5ng s\u1ed1 d\u00f2ng Code \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi c\u00e1c b\u00e0i Tests c\u1ee7a b\u1ea1n) / (T\u1ed5ng s\u1ed1 d\u00f2ng Code trong th\u1ef1c t\u1ebf) x 100% V\u00ed d\u1ee5: N\u1ebfu code coverage c\u1ee7a b\u1ea1n l\u00e0 90%, \u0111i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 90% c\u00e1c d\u00f2ng codes trong project c\u1ee7a b\u1ea1n \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1ecdi ghi ch\u1ea1y Test. T\u1ea1o report v\u1edbi PHPUnit \u00b6 Coverage driver \u00b6 \u0110\u1ec3 generate coverage report b\u1eb1ng PHPUnit, c\u1ea7n c\u00f3 coverage driver . C\u00f3 3 drivers bao g\u1ed3m (\u01b0u ti\u00ean t\u1eeb tr\u00ean xu\u1ed1ng d\u01b0\u1edbi): pcov cho PHPUnit version >= 8 php -dextension = pcov.so -dpcov.enabled = 1 -dpcov.directory = app ./vendor/bin/phpunit --coverage-text NOTE : pcov.directory=app , trong \u0111\u00f3 app l\u00e0 th\u01b0 m\u1ee5c ch\u1ee9a source code phpdbg phpdbg -qrr ./vendor/bin/phpunit --coverage-text XDebug php -dzend_extension = xdebug.so ./vendor/bin/phpunit --coverage-text Coverage format \u00b6 C\u00f3 nhi\u1ec1u lo\u1ea1i format cho coverage: Code Coverage Options: --coverage-clover <file> Generate code coverage report in Clover XML format --coverage-crap4j <file> Generate code coverage report in Crap4J XML format --coverage-html <dir> Generate code coverage report in HTML format --coverage-php <file> Export PHP_CodeCoverage object to file --coverage-text=<file> Generate code coverage report in text format [default: standard output] --coverage-xml <dir> Generate code coverage report in PHPUnit XML format Nh\u01b0ng th\u00f4ng d\u1ee5ng nh\u1ea5t l\u00e0 --coverage-text th\u01b0\u1eddng d\u00f9ng trong CI ho\u1eb7c xem nhanh k\u1ebft qu\u1ea3 v\u00e0 --coverage-html \u0111\u1ec3 xem chi ti\u1ebft d\u01b0\u1edbi d\u1ea1ng web dashboard v\u00e0 --coverage-clover d\u00f9ng cho CI. 100% code coverage \u00b6 100% code coverage is not our main purpose of test!!! 70 - 80% is ok! Quotes: Quality over quantity If it scares you then write test for it Think how to write enough test cases Think how to write simple code, simple test Think how to write fast test","title":"Code Coverage"},{"location":"04-code-coverage/#code-coverage","text":"","title":"Code Coverage"},{"location":"04-code-coverage/#kh\u00e1i-ni\u1ec7m","text":"Code coverage l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u00e1nh gi\u00e1 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 m\u00f4 t\u1ea3 m\u1ee9c \u0111\u1ed9 m\u00e0 source code c\u1ee7a m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c thi, khi m\u00e0 m\u1ed9t b\u1ed9 Test c\u1ee5 th\u1ec3 ch\u1ea1y. N\u00f3i m\u1ed9t c\u00e1ch kh\u00e1c, Code coverage l\u00e0 m\u1ed9t c\u00e1ch \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng Tests c\u1ee7a b\u1ea1n th\u1ef1c s\u1ef1 \u0111ang test Codes c\u1ee7a b\u1ea1n! C\u00f4ng th\u1ee9c t\u00ednh Code coverage: Code Coverage = (T\u1ed5ng s\u1ed1 d\u00f2ng Code \u0111\u01b0\u1ee3c g\u1ecdi b\u1edfi c\u00e1c b\u00e0i Tests c\u1ee7a b\u1ea1n) / (T\u1ed5ng s\u1ed1 d\u00f2ng Code trong th\u1ef1c t\u1ebf) x 100% V\u00ed d\u1ee5: N\u1ebfu code coverage c\u1ee7a b\u1ea1n l\u00e0 90%, \u0111i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 90% c\u00e1c d\u00f2ng codes trong project c\u1ee7a b\u1ea1n \u0111\u00e3 \u0111\u01b0\u1ee3c g\u1ecdi ghi ch\u1ea1y Test.","title":"Kh\u00e1i ni\u1ec7m"},{"location":"04-code-coverage/#t\u1ea1o-report-v\u1edbi-phpunit","text":"","title":"T\u1ea1o report v\u1edbi PHPUnit"},{"location":"04-code-coverage/#coverage-driver","text":"\u0110\u1ec3 generate coverage report b\u1eb1ng PHPUnit, c\u1ea7n c\u00f3 coverage driver . C\u00f3 3 drivers bao g\u1ed3m (\u01b0u ti\u00ean t\u1eeb tr\u00ean xu\u1ed1ng d\u01b0\u1edbi): pcov cho PHPUnit version >= 8 php -dextension = pcov.so -dpcov.enabled = 1 -dpcov.directory = app ./vendor/bin/phpunit --coverage-text NOTE : pcov.directory=app , trong \u0111\u00f3 app l\u00e0 th\u01b0 m\u1ee5c ch\u1ee9a source code phpdbg phpdbg -qrr ./vendor/bin/phpunit --coverage-text XDebug php -dzend_extension = xdebug.so ./vendor/bin/phpunit --coverage-text","title":"Coverage driver"},{"location":"04-code-coverage/#coverage-format","text":"C\u00f3 nhi\u1ec1u lo\u1ea1i format cho coverage: Code Coverage Options: --coverage-clover <file> Generate code coverage report in Clover XML format --coverage-crap4j <file> Generate code coverage report in Crap4J XML format --coverage-html <dir> Generate code coverage report in HTML format --coverage-php <file> Export PHP_CodeCoverage object to file --coverage-text=<file> Generate code coverage report in text format [default: standard output] --coverage-xml <dir> Generate code coverage report in PHPUnit XML format Nh\u01b0ng th\u00f4ng d\u1ee5ng nh\u1ea5t l\u00e0 --coverage-text th\u01b0\u1eddng d\u00f9ng trong CI ho\u1eb7c xem nhanh k\u1ebft qu\u1ea3 v\u00e0 --coverage-html \u0111\u1ec3 xem chi ti\u1ebft d\u01b0\u1edbi d\u1ea1ng web dashboard v\u00e0 --coverage-clover d\u00f9ng cho CI.","title":"Coverage format"},{"location":"04-code-coverage/#100-code-coverage","text":"100% code coverage is not our main purpose of test!!! 70 - 80% is ok! Quotes: Quality over quantity If it scares you then write test for it Think how to write enough test cases Think how to write simple code, simple test Think how to write fast test","title":"100% code coverage"},{"location":"05-test-doubles-and-di/","text":"Test Doubles v\u00e0 DI \u00b6 Kh\u00e1i ni\u1ec7m \u00b6 M\u1ed9t trong nh\u1eefng y\u00eau c\u1ea7u c\u01a1 b\u1ea3n c\u1ee7a Unit Test \u0111\u00f3 l\u00e0 t\u00ednh c\u00f4 l\u1eadp ( isolation ). Nh\u00ecn chung th\u00ec t\u00ednh c\u00f4 l\u1eadp l\u00e0 r\u1ea5t kh\u00f3 (n\u1ebfu kh\u00f4ng mu\u1ed1n n\u00f3i l\u00e0 kh\u00f4ng th\u1ec3) b\u1edfi lu\u00f4n lu\u00f4n c\u00f3 r\u1ea5t nhi\u1ec1u dependencies trong c\u1ea3 project. V\u00ec th\u1ebf, kh\u00e1i ni\u1ec7m v\u1ec1 Test Doubles ra \u0111\u1eddi. M\u1ed9t Test Double cho ph\u00e9p ch\u00fang ta lo\u1ea1i b\u1ecf dependency nguy\u00ean b\u1ea3n, t\u1eeb \u0111\u00f3 gi\u00fap c\u00f4 l\u1eadp unit. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00e0i lo\u1ea1i Test Doubles M\u1ed9t v\u00e0i ph\u1ea7n trong c\u00e1c \u0111\u1ecbnh ngh\u0129a sau \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb b\u00e0i vi\u1ebft Mocks Aren't Stubs tr\u00ean blog c\u1ee7a Martin Fowler Dummies \u00b6 Dummy l\u00e0 objects \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o nh\u01b0ng m\u00e0 kh\u00f4ng h\u1ec1 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang th\u01b0\u1eddng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 ho\u00e0n th\u00e0nh danh s\u00e1ch parameter. Fake \u00b6 Fake objects th\u1ef1c ra c\u00f3 mang nh\u1eefng tri\u1ec3n khai logic, th\u1ebf nh\u01b0ng th\u01b0\u1eddng s\u1eed d\u1ee5ng nh\u1eefng \"l\u1ed1i t\u1eaft\", khi\u1ebfn ch\u00fang kh\u00f4ng th\u00edch h\u1ee3p \u0111\u1ec3 tri\u1ec3n khai tr\u00ean production (V\u00ed d\u1ee5 nh\u01b0 in memory database) Stubs \u00b6 Stubs \u0111\u01b0a ra nh\u1eefng c\u00e2u tr\u1ea3 l\u1eddi c\u00f3 s\u1eb5n cho c\u00e1c l\u1eddi g\u1ecdi h\u00e0m \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong qu\u00e1 tr\u00ecnh test, v\u00e0 th\u01b0\u1eddng s\u1ebd kh\u00f4ng tr\u1ea3 v\u1ec1 b\u1ea5t c\u1ee9 c\u00e1i g\u00ec ngo\u00e0i nh\u1eefng th\u1ee9 m\u00e0 ch\u00fang \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh trong b\u00e0i test. Mocks \u00b6 Mocks l\u00e0 objects \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh tr\u01b0\u1edbc v\u1edbi c\u00e1c expectations, t\u1ea1o ra m\u1ed9t \u0111\u1eb7c t\u1ea3 cho l\u1eddi g\u1ecdi m\u00e0 ch\u00fang d\u1ef1 ki\u1ebfn s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c. Test c\u00f4 l\u1eadp \u00b6 Test c\u00f4 l\u1eadp: Gi\u1ea3 l\u1eadp access API / web service ngo\u00e0i (m\u1ea1ng) Gi\u1ea3 l\u1eadp access database? Gi\u1ea3 l\u1eadp l\u1eddi g\u1ecdi h\u00e0m t\u1eeb c\u00e1c class kh\u00e1c? Gi\u1ea3 l\u1eadp l\u00e0 g\u00ec? Gi\u1ea3 l\u1eadp = thay th\u1ebf c\u00e1c object s\u1eed d\u1ee5ng cho production v\u1edbi 1 m\u1ed9t object gi\u00fap cho vi\u1ec7c testing Gi\u1ea3 l\u1eadp = thay th\u1ebf real object v\u1edbi mock object Mock object b\u1eaft ch\u01b0\u1edbc h\u00e0nh vi c\u1ee7a real object, nh\u01b0ng ch\u00fang ta c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ecbnh ngh\u0129a k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 theo t\u1eebng k\u1ecbch b\u1ea3n test case C\u00f3 hai quan \u0111i\u1ec3m v\u1ec1 unit test c\u00f4 l\u1eadp: Sociable test : Ch\u1ec9 gi\u1ea3 l\u1eadp (mock) c\u00e1c dependencies g\u00e2y ch\u1eadm ho\u1eb7c c\u00f3 side effects l\u1edbn ho\u1eb7c kh\u00f4ng th\u1ec3 d\u00f9ng trong test environment: database, network call... Solitary test : Gi\u1ea3 l\u1eadp t\u1ea5t c\u1ea3 dependencies https://martinfowler.com/bliki/UnitTest.html V\u00ed d\u1ee5: C\u00f3 3 class Order , Customer , Product , v\u1edbi y\u00eau c\u1ea7u khi user order 1 s\u1ea3n ph\u1ea9m, n\u1ebfu ng\u00e0y order tr\u00f9ng v\u1edbi ng\u00e0y sinh c\u1ee7a user th\u00ec user s\u1ebd \u0111\u01b0\u1ee3c gi\u1ea3m 20%. Class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer , c\u1ea7n vi\u1ebft test cho method Order::price() : Sociable Test : do Product::getPrice() v\u00e0 Customer::getDiscount() \u0111\u1ec1u kh\u00f4ng c\u00f3 logic ph\u1ee9c t\u1ea1p hay c\u00f3 kh\u1ea3 n\u0103ng l\u00e0m ch\u1eadm test n\u00ean s\u1ebd kh\u00f4ng th\u1ef1c hi\u1ec7n gi\u1ea3 l\u1eadp namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; use App\\Customer ; use App\\Product ; use App\\Order ; use DateTimeImmutable ; class SociableOrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); $customer = new Customer ( 'Hunter' , new DateTimeImmutable ( date ( 'Y/m/d' ))); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Solitary Test : class SolitaryOrderTest extends TestCase { public function test_price_return_correct_value () { // Gi\u1ea3 l\u1eadp (mock) Product $product = $this -> createMock ( Product :: class ); // Expect $product->getPrice() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 100 $product -> expects ( $this -> once ()) -> method ( 'getPrice' ) -> willReturn ( 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } V\u00ec \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea3 l\u1eadp n\u00ean khi logic c\u1ee7a Product::getPrice() v\u00e0 Customer::getDiscount() thay \u0111\u1ed5i th\u00ec SolitaryOrderTest kh\u00f4ng c\u1ea7n ph\u1ea3i update l\u1ea1i. V\u1eady khi n\u00e0o c\u1ea7n gi\u1ea3 l\u1eadp (mock), ch\u00fang ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng c\u1ea3 2 quan \u0111i\u1ec3m: N\u1ebfu code \u0111\u01b0\u1ee3c c\u1ea5u tr\u00fac t\u1ed1t th\u00ec th\u01b0\u1eddng c\u00f3 2 lo\u1ea1i class: Model: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 \u0111\u1ec3 l\u01b0u d\u1eef li\u1ec7u b\u00ean trong v\u00e0 kh\u00f4ng th\u1ef1c hi\u1ec7n nhi\u1ec1u logic b\u00ean trong => kh\u00f4ng c\u1ea7n mock, ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 kh\u1edfi t\u1ea1o \u0111\u1ed1i t\u01b0\u1ee3ng v\u00e0 truy\u1ec1n v\u00e0o fake data cho n\u00f3 Service: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 th\u1ef1c hi\u1ec7n c\u00f4ng vi\u1ec7c, logic => mock class OrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Khi vi\u1ec7c mock qu\u00e1 ph\u1ee9c t\u1ea1p h\u00e3y th\u1ef1c hi\u1ec7n refactor code ho\u1eb7c th\u1ef1c hi\u1ec7n integration test Dependency Injection \u00b6 Method Order::price() c\u1ea7n s\u1eed d\u1ee5ng Product::getPrice() v\u00e0 Customer::getDiscount() n\u00ean class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer Mu\u1ed1n gi\u1ea3 l\u1eadp th\u00ec c\u00e1c dependencies ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o t\u01b0\u1eddng minh ( explicit dependencies ), t\u1ee9c l\u00e0 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o constructor, class kh\u00f4ng c\u00f3 nhi\u1ec7m v\u1ee5 kh\u1edfi t\u1ea1o dependencies N\u1ebfu kh\u1edfi t\u1ea1o b\u1eb1ng new ho\u1eb7c d\u00f9ng static method b\u00ean trong th\u00ec kh\u00f4ng c\u00f3 c\u00e1ch n\u00e0o \u0111\u1ec3 gi\u1ea3 l\u1eadp (th\u1ef1c ra th\u00ec c\u0169ng c\u00f3 nh\u01b0ng th\u01b0\u1eddng d\u00f9ng trick v\u1ec1 autoloading c\u1ee7a PHP ch\u1ee9 PHP kh\u00f4ng h\u1ed7 tr\u1ee3 k\u1ef9 thu\u1eadt Monkey Patching (*)) // Bad method public function register ( array $inputs ) { // ... ( new MailService ()) -> send ( $user ); // \u2026 MailService :: send ( $user ); } // Good, using dependency injection public function __construct ( MailService $mailService ) { $this -> mailService = $mailService ; } public function register ( array $inputs ) { $transaction = $this -> mailService -> send ( $user ); } Mocks vs Stubs \u00b6 C\u00f3 nhi\u1ec1u lo\u1ea1i test doubles, nh\u01b0ng ch\u1ec9 c\u1ea7n focus v\u00e0o 2 lo\u1ea1i ch\u00ednh Stubs \u00b6 Gi\u1ea3 l\u1eadp tr\u1ea1ng th\u00e1i => lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 logic b\u00ean trong method c\u1ee7a object th\u1eadt v\u00e0 c\u00f3 th\u1ec3 thay \u0111\u1ed5i k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a method theo \u00fd mu\u1ed1n // Create mock object $product = $this -> createMock ( Product :: class ); // Stub method price, make it return 100 $product -> method ( 'getPrice' ) -> will ( $this -> returnValue ( 100 )); Mocks \u00b6 Verify h\u00e0nh vi => khi method under test \u0111\u01b0\u1ee3c g\u1ecdi th\u00ec ch\u00fang ta expect mock method c\u0169ng \u0111\u01b0\u1ee3c g\u1ecdi, 1 l\u1ea7n ho\u1eb7c 2 l\u1ea7n ho\u1eb7c nhi\u1ec1u l\u1ea7n, \u0111\u01b0\u1ee3c truy\u1ec1n tham s\u1ed1 g\u00ec... public function test_order_sends_mail_if_succeeded () { $mailService = $this -> createMock ( MailService :: class ); $order = new Order ( 'Wine' , 'user@localhost' , $mailService ); // Expect method MailService::send \u0111\u01b0\u1ee3c g\u1ecdi duy nh\u1ea5t 1 l\u1ea7n, // v\u1edbi 2 tham s\u1ed1 l\u00e0 'user@localhost' v\u00e0 'Order succeeded!' // Expect c\u1ea7n \u0111\u01b0\u1ee3c vi\u1ebft tr\u01b0\u1edbc khi g\u1ecdi method test $mailService -> expects ( once ()) -> method ( 'send' ); -> with ( $this -> equalTo ( 'user@localhost' ), $this -> equalTo ( 'Order succeeded!' ) ); $result = $order -> process (); $this -> assertTrue ( $result ); } Tham kh\u1ea3o \u00b6 (*) https://github.com/Codeception/AspectMock https://github.com/kahlan/kahlan https://github.com/infection/infection https://www.phpspec.net/en/stable/","title":"Test Doubles v\u00e0 DI"},{"location":"05-test-doubles-and-di/#test-doubles-v\u00e0-di","text":"","title":"Test Doubles v\u00e0 DI"},{"location":"05-test-doubles-and-di/#kh\u00e1i-ni\u1ec7m","text":"M\u1ed9t trong nh\u1eefng y\u00eau c\u1ea7u c\u01a1 b\u1ea3n c\u1ee7a Unit Test \u0111\u00f3 l\u00e0 t\u00ednh c\u00f4 l\u1eadp ( isolation ). Nh\u00ecn chung th\u00ec t\u00ednh c\u00f4 l\u1eadp l\u00e0 r\u1ea5t kh\u00f3 (n\u1ebfu kh\u00f4ng mu\u1ed1n n\u00f3i l\u00e0 kh\u00f4ng th\u1ec3) b\u1edfi lu\u00f4n lu\u00f4n c\u00f3 r\u1ea5t nhi\u1ec1u dependencies trong c\u1ea3 project. V\u00ec th\u1ebf, kh\u00e1i ni\u1ec7m v\u1ec1 Test Doubles ra \u0111\u1eddi. M\u1ed9t Test Double cho ph\u00e9p ch\u00fang ta lo\u1ea1i b\u1ecf dependency nguy\u00ean b\u1ea3n, t\u1eeb \u0111\u00f3 gi\u00fap c\u00f4 l\u1eadp unit. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00e0i lo\u1ea1i Test Doubles M\u1ed9t v\u00e0i ph\u1ea7n trong c\u00e1c \u0111\u1ecbnh ngh\u0129a sau \u0111\u01b0\u1ee3c l\u1ea5y t\u1eeb b\u00e0i vi\u1ebft Mocks Aren't Stubs tr\u00ean blog c\u1ee7a Martin Fowler","title":"Kh\u00e1i ni\u1ec7m"},{"location":"05-test-doubles-and-di/#dummies","text":"Dummy l\u00e0 objects \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o nh\u01b0ng m\u00e0 kh\u00f4ng h\u1ec1 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Ch\u00fang th\u01b0\u1eddng ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 ho\u00e0n th\u00e0nh danh s\u00e1ch parameter.","title":"Dummies"},{"location":"05-test-doubles-and-di/#fake","text":"Fake objects th\u1ef1c ra c\u00f3 mang nh\u1eefng tri\u1ec3n khai logic, th\u1ebf nh\u01b0ng th\u01b0\u1eddng s\u1eed d\u1ee5ng nh\u1eefng \"l\u1ed1i t\u1eaft\", khi\u1ebfn ch\u00fang kh\u00f4ng th\u00edch h\u1ee3p \u0111\u1ec3 tri\u1ec3n khai tr\u00ean production (V\u00ed d\u1ee5 nh\u01b0 in memory database)","title":"Fake"},{"location":"05-test-doubles-and-di/#stubs","text":"Stubs \u0111\u01b0a ra nh\u1eefng c\u00e2u tr\u1ea3 l\u1eddi c\u00f3 s\u1eb5n cho c\u00e1c l\u1eddi g\u1ecdi h\u00e0m \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong qu\u00e1 tr\u00ecnh test, v\u00e0 th\u01b0\u1eddng s\u1ebd kh\u00f4ng tr\u1ea3 v\u1ec1 b\u1ea5t c\u1ee9 c\u00e1i g\u00ec ngo\u00e0i nh\u1eefng th\u1ee9 m\u00e0 ch\u00fang \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh trong b\u00e0i test.","title":"Stubs"},{"location":"05-test-doubles-and-di/#mocks","text":"Mocks l\u00e0 objects \u0111\u00e3 \u0111\u01b0\u1ee3c l\u1eadp tr\u00ecnh tr\u01b0\u1edbc v\u1edbi c\u00e1c expectations, t\u1ea1o ra m\u1ed9t \u0111\u1eb7c t\u1ea3 cho l\u1eddi g\u1ecdi m\u00e0 ch\u00fang d\u1ef1 ki\u1ebfn s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c.","title":"Mocks"},{"location":"05-test-doubles-and-di/#test-c\u00f4-l\u1eadp","text":"Test c\u00f4 l\u1eadp: Gi\u1ea3 l\u1eadp access API / web service ngo\u00e0i (m\u1ea1ng) Gi\u1ea3 l\u1eadp access database? Gi\u1ea3 l\u1eadp l\u1eddi g\u1ecdi h\u00e0m t\u1eeb c\u00e1c class kh\u00e1c? Gi\u1ea3 l\u1eadp l\u00e0 g\u00ec? Gi\u1ea3 l\u1eadp = thay th\u1ebf c\u00e1c object s\u1eed d\u1ee5ng cho production v\u1edbi 1 m\u1ed9t object gi\u00fap cho vi\u1ec7c testing Gi\u1ea3 l\u1eadp = thay th\u1ebf real object v\u1edbi mock object Mock object b\u1eaft ch\u01b0\u1edbc h\u00e0nh vi c\u1ee7a real object, nh\u01b0ng ch\u00fang ta c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ecbnh ngh\u0129a k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 theo t\u1eebng k\u1ecbch b\u1ea3n test case C\u00f3 hai quan \u0111i\u1ec3m v\u1ec1 unit test c\u00f4 l\u1eadp: Sociable test : Ch\u1ec9 gi\u1ea3 l\u1eadp (mock) c\u00e1c dependencies g\u00e2y ch\u1eadm ho\u1eb7c c\u00f3 side effects l\u1edbn ho\u1eb7c kh\u00f4ng th\u1ec3 d\u00f9ng trong test environment: database, network call... Solitary test : Gi\u1ea3 l\u1eadp t\u1ea5t c\u1ea3 dependencies https://martinfowler.com/bliki/UnitTest.html V\u00ed d\u1ee5: C\u00f3 3 class Order , Customer , Product , v\u1edbi y\u00eau c\u1ea7u khi user order 1 s\u1ea3n ph\u1ea9m, n\u1ebfu ng\u00e0y order tr\u00f9ng v\u1edbi ng\u00e0y sinh c\u1ee7a user th\u00ec user s\u1ebd \u0111\u01b0\u1ee3c gi\u1ea3m 20%. Class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer , c\u1ea7n vi\u1ebft test cho method Order::price() : Sociable Test : do Product::getPrice() v\u00e0 Customer::getDiscount() \u0111\u1ec1u kh\u00f4ng c\u00f3 logic ph\u1ee9c t\u1ea1p hay c\u00f3 kh\u1ea3 n\u0103ng l\u00e0m ch\u1eadm test n\u00ean s\u1ebd kh\u00f4ng th\u1ef1c hi\u1ec7n gi\u1ea3 l\u1eadp namespace Tests\\Unit ; use PHPUnit\\Framework\\TestCase ; use App\\Customer ; use App\\Product ; use App\\Order ; use DateTimeImmutable ; class SociableOrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); $customer = new Customer ( 'Hunter' , new DateTimeImmutable ( date ( 'Y/m/d' ))); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Solitary Test : class SolitaryOrderTest extends TestCase { public function test_price_return_correct_value () { // Gi\u1ea3 l\u1eadp (mock) Product $product = $this -> createMock ( Product :: class ); // Expect $product->getPrice() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 100 $product -> expects ( $this -> once ()) -> method ( 'getPrice' ) -> willReturn ( 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } V\u00ec \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea3 l\u1eadp n\u00ean khi logic c\u1ee7a Product::getPrice() v\u00e0 Customer::getDiscount() thay \u0111\u1ed5i th\u00ec SolitaryOrderTest kh\u00f4ng c\u1ea7n ph\u1ea3i update l\u1ea1i. V\u1eady khi n\u00e0o c\u1ea7n gi\u1ea3 l\u1eadp (mock), ch\u00fang ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng c\u1ea3 2 quan \u0111i\u1ec3m: N\u1ebfu code \u0111\u01b0\u1ee3c c\u1ea5u tr\u00fac t\u1ed1t th\u00ec th\u01b0\u1eddng c\u00f3 2 lo\u1ea1i class: Model: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 \u0111\u1ec3 l\u01b0u d\u1eef li\u1ec7u b\u00ean trong v\u00e0 kh\u00f4ng th\u1ef1c hi\u1ec7n nhi\u1ec1u logic b\u00ean trong => kh\u00f4ng c\u1ea7n mock, ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 kh\u1edfi t\u1ea1o \u0111\u1ed1i t\u01b0\u1ee3ng v\u00e0 truy\u1ec1n v\u00e0o fake data cho n\u00f3 Service: nhi\u1ec7m v\u1ee5 ch\u00ednh l\u00e0 th\u1ef1c hi\u1ec7n c\u00f4ng vi\u1ec7c, logic => mock class OrderTest extends TestCase { public function test_price_return_correct_value () { $product = new Product ( 'PS4' , 100 ); // Gi\u1ea3 l\u1eadp (mock) Customer $customer = $this -> createMock ( Customer :: class ); // Expect $customer->getDiscount() \u0111\u01b0\u1ee3c g\u1ecdi 1 l\u1ea7n v\u00e0 tr\u1ea3 v\u1ec1 20 $customer -> expects ( $this -> once ()) -> method ( 'getDiscount' ) -> willReturn ( 20 ); $order = new Order ( $customer , $product ); $this -> assertEquals ( 80 , $order -> price ()); } } Khi vi\u1ec7c mock qu\u00e1 ph\u1ee9c t\u1ea1p h\u00e3y th\u1ef1c hi\u1ec7n refactor code ho\u1eb7c th\u1ef1c hi\u1ec7n integration test","title":"Test c\u00f4 l\u1eadp"},{"location":"05-test-doubles-and-di/#dependency-injection","text":"Method Order::price() c\u1ea7n s\u1eed d\u1ee5ng Product::getPrice() v\u00e0 Customer::getDiscount() n\u00ean class Order c\u00f3 2 dependencies l\u00e0 Product v\u00e0 Customer Mu\u1ed1n gi\u1ea3 l\u1eadp th\u00ec c\u00e1c dependencies ph\u1ea3i \u0111\u01b0\u1ee3c khai b\u00e1o t\u01b0\u1eddng minh ( explicit dependencies ), t\u1ee9c l\u00e0 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o constructor, class kh\u00f4ng c\u00f3 nhi\u1ec7m v\u1ee5 kh\u1edfi t\u1ea1o dependencies N\u1ebfu kh\u1edfi t\u1ea1o b\u1eb1ng new ho\u1eb7c d\u00f9ng static method b\u00ean trong th\u00ec kh\u00f4ng c\u00f3 c\u00e1ch n\u00e0o \u0111\u1ec3 gi\u1ea3 l\u1eadp (th\u1ef1c ra th\u00ec c\u0169ng c\u00f3 nh\u01b0ng th\u01b0\u1eddng d\u00f9ng trick v\u1ec1 autoloading c\u1ee7a PHP ch\u1ee9 PHP kh\u00f4ng h\u1ed7 tr\u1ee3 k\u1ef9 thu\u1eadt Monkey Patching (*)) // Bad method public function register ( array $inputs ) { // ... ( new MailService ()) -> send ( $user ); // \u2026 MailService :: send ( $user ); } // Good, using dependency injection public function __construct ( MailService $mailService ) { $this -> mailService = $mailService ; } public function register ( array $inputs ) { $transaction = $this -> mailService -> send ( $user ); }","title":"Dependency Injection"},{"location":"05-test-doubles-and-di/#mocks-vs-stubs","text":"C\u00f3 nhi\u1ec1u lo\u1ea1i test doubles, nh\u01b0ng ch\u1ec9 c\u1ea7n focus v\u00e0o 2 lo\u1ea1i ch\u00ednh","title":"Mocks vs Stubs"},{"location":"05-test-doubles-and-di/#stubs_1","text":"Gi\u1ea3 l\u1eadp tr\u1ea1ng th\u00e1i => lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 logic b\u00ean trong method c\u1ee7a object th\u1eadt v\u00e0 c\u00f3 th\u1ec3 thay \u0111\u1ed5i k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a method theo \u00fd mu\u1ed1n // Create mock object $product = $this -> createMock ( Product :: class ); // Stub method price, make it return 100 $product -> method ( 'getPrice' ) -> will ( $this -> returnValue ( 100 ));","title":"Stubs"},{"location":"05-test-doubles-and-di/#mocks_1","text":"Verify h\u00e0nh vi => khi method under test \u0111\u01b0\u1ee3c g\u1ecdi th\u00ec ch\u00fang ta expect mock method c\u0169ng \u0111\u01b0\u1ee3c g\u1ecdi, 1 l\u1ea7n ho\u1eb7c 2 l\u1ea7n ho\u1eb7c nhi\u1ec1u l\u1ea7n, \u0111\u01b0\u1ee3c truy\u1ec1n tham s\u1ed1 g\u00ec... public function test_order_sends_mail_if_succeeded () { $mailService = $this -> createMock ( MailService :: class ); $order = new Order ( 'Wine' , 'user@localhost' , $mailService ); // Expect method MailService::send \u0111\u01b0\u1ee3c g\u1ecdi duy nh\u1ea5t 1 l\u1ea7n, // v\u1edbi 2 tham s\u1ed1 l\u00e0 'user@localhost' v\u00e0 'Order succeeded!' // Expect c\u1ea7n \u0111\u01b0\u1ee3c vi\u1ebft tr\u01b0\u1edbc khi g\u1ecdi method test $mailService -> expects ( once ()) -> method ( 'send' ); -> with ( $this -> equalTo ( 'user@localhost' ), $this -> equalTo ( 'Order succeeded!' ) ); $result = $order -> process (); $this -> assertTrue ( $result ); }","title":"Mocks"},{"location":"05-test-doubles-and-di/#tham-kh\u1ea3o","text":"(*) https://github.com/Codeception/AspectMock https://github.com/kahlan/kahlan https://github.com/infection/infection https://www.phpspec.net/en/stable/","title":"Tham kh\u1ea3o"},{"location":"06-checklist/","text":"Checklist \u00b6 [1] Self-describing test method \u00b6 Unit Test method names must be self-describing Also focus on naming style, keep the naming style consistent across all the test methods and tests. M\u1ee5c \u0111\u00edch: Test case l\u00e0 t\u00e0i li\u1ec7u \u0110\u1ecdc v\u00e0o t\u00ean method test c\u00f3 th\u1ec3 bi\u1ebft m\u1ee5c \u0111\u00edch c\u1ee7a test case Th\u1ef1c hi\u1ec7n T\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i qu\u00e1 ng\u1eafn g\u1ecdn T\u00ean test method ph\u1ea3i ch\u1ec9 ra \u0111i\u1ec1u ki\u1ec7n v\u00e0 expect c\u1ee7a test case Th\u1ed1ng nh\u1ea5t convention trong project, m\u1eb7c \u0111\u1ecbnh visibility c\u1ee7a 1 method trong class l\u00e0 public n\u00ean c\u00f3 th\u1ec3 lo\u1ea1i b\u1ecf t\u1eeb public trong method test Ch\u1ecdn m\u1ed9t trong c\u00e1c convention sau: [Recommend] S\u1eed d\u1ee5ng prefix test_ function test_it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng annotation @test th\u00ec t\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i b\u1eaft \u0111\u1ea7u b\u1eb1ng test_ /* @test */ function it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng camelCase thay cho snake_case , ch\u1ec9 n\u00ean s\u1eed d\u1ee5ng n\u1ebfu trong project \u0111\u00e3 vi\u1ebft theo c\u00e1ch n\u00e0y tr\u01b0\u1edbc \u0111\u00f3 function testItReturnsFalseWhenInputNumberIsOdd () [2] A3 (Arrange, Asset, Act) \u00b6 A3 (Arrange, Asset, Act) Arrange: thi\u1ebft l\u1eadp tr\u1ea1ng th\u00e1i, kh\u1edfi t\u1ea1o object, gi\u1ea3 l\u1eadp mock Act: Ch\u1ea1y unit \u0111ang c\u1ea7n test (method under test) Assert: So s\u00e1nh expected v\u1edbi k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 M\u1ee5c \u0111\u00edch: N\u1ed9i dung test method r\u00f5 r\u00e0ng d\u1ec5 \u0111\u1ecdc, d\u1ec5 vi\u1ebft Th\u1ef1c hi\u1ec7n Chia n\u1ed9i dung test l\u00e0m 3 ph\u1ea7n function test_validation_failed_when_value_exceed_max_length () { // Arrange $username = str_pad ( 'a' , UsernameValidation :: MAX_LENGTH + 1 ); // Act $validation = new UsernameValidation ; $isValidUsername = $validation -> isValid ( $username ); // Assert $this -> assertFalse ( $isValidUsername ); } Ngo\u1ea1i l\u1ec7 khi test m\u1ed9t method throw exception, do v\u1ea5n \u0111\u1ec1 k\u1ef9 thu\u1eadt n\u00ean ph\u1ea3i g\u1ecdi expectionException() tr\u01b0\u1edbc khi g\u1ecdi method: function test_it_throws_exception_when_input_is_not_a_number () { // Assert that $this -> expectException ( InvalidArgumentException :: class ); // Arrange $calculator = new Calculator ; $input1 = 'i am a string' ; $input2 = 100 ; // Act $calculator -> add ( $input1 , $input2 ); } [3] Use sematic/proper assert method \u00b6 Keep assert method descriptive. Use proper assert method to improve the readability of code and the error log. S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass ); [4] If you write code, write tests \u00b6 Th\u1ef1c hi\u1ec7n M\u1ecdi PR \u0111\u1ec1u ph\u1ea3i ch\u00fa \u00fd \u0111\u1ebfn test PR th\u00eam feature => vi\u1ebft test cho feature m\u1edbi PR fix bug => vi\u1ebft test \u0111\u1ec3 tr\u00e1nh bug x\u1ea3y ra 1 l\u1ea7n n\u1eefa PR refactor => ch\u1ea1y, update test \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o kh\u00f4ng ph\u00e1t sinh \u1ea3nh h\u01b0\u1edfng N\u00ean t\u00edch h\u1ee3p CI \u0111\u1ec3 ch\u1ea1y test FAQ : Q: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t \u0111\u1ec3 vi\u1ebft test? A: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t l\u00e0 khi code c\u00f2n m\u1edbi! Th\u1eddi \u0111i\u1ec3m m\u00e0 c\u1ea3 code v\u00e0 test \u0111\u1ec1u c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng thay \u0111\u1ed5i. T\u01b0\u1edfng t\u01b0\u1ee3ng code gi\u1ed1ng nh\u01b0 \u0111\u1ea5t s\u00e9t , khi c\u00f2n m\u1edbi th\u00ec n\u00f3 m\u1ec1m v\u00e0 d\u1ec5 n\u1eb7n, n\u1ebfu \u0111\u1ec3 l\u00e2u th\u00ec n\u00f3 s\u1ebd c\u1ee9ng v\u00e0 d\u1ec5 v\u1ee1 [5] Unit vs Integration? \u00b6 Rule \u0111\u01a1n gi\u1ea3n Unit test Test t\u1eebng function ho\u1eb7c method c\u1ee7a m\u1ed9t class Kh\u00f4ng th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c sau: Truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) S\u1eed d\u1ee5ng network (g\u1eedi mail, g\u1ecdi api b\u00ean ngo\u00e0i,...) (l\u00e0m ch\u1eadm, k\u1ebft qu\u1ea3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh v\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o m\u1ea1ng) S\u1eed d\u1ee5ng file system (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) Integration test Test vi\u1ec7c k\u1ebft h\u1ee3p gi\u1eefa c\u00e1c unit (function, method) v\u1edbi nhau => test m\u1ed9t nh\u00f3m Unit (v\u00ed d\u1ee5 test route) C\u00f3 th\u1ec3 truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (thi\u1ebft l\u1eadp m\u1ed9t database test ri\u00eang bi\u1ec7t) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng file system (test vi\u1ec7c import/export file, file permission...) L\u1eddi khuy\u00ean V\u1edbi ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u, b\u1ea1n c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u \u0111i t\u1eeb integration test b\u1eb1ng vi\u1ec7c test t\u1eebng route. Trong qu\u00e1 tr\u00ecnh vi\u1ebft integration test c\u1ed1 g\u1eafng split ra unit test nh\u1ecf h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c. Qu\u00e1 nhi\u1ec1u integration test s\u1ebd khi\u1ebfn th\u1eddi gian ch\u1ea1y test l\u00e2u h\u01a1n, vi\u1ec7c truy v\u1ebft l\u1ed7i c\u0169ng kh\u00f3 kh\u0103n h\u01a1n do 1 feature ch\u1ea1y qua nhi\u1ec1u l\u1edbp, layer code. [6] My tests are fast! \u00b6 Th\u1ef1c hi\u1ec7n Ngo\u00e0i vi\u1ec7c ch\u00fa tr\u1ecdng v\u00e0o vi\u1ec7c vi\u1ebft test case \u0111\u00fang, c\u1ea7n ch\u00fa \u00fd \u0111\u1ebfn th\u1eddi gian ch\u1ea1y test H\u1ea1n ch\u1ebf test database (integration), v\u00e0 n\u1ebfu c\u00f3 th\u1ec3 th\u00ec d\u00f9ng sqlite in-memory l\u00e0m database test Test kh\u00f4ng g\u1ecdi network hay api service ngo\u00e0i Khi test l\u00e0m vi\u1ec7c v\u1edbi file, c\u00e2n nh\u1eafc s\u1eed d\u1ee5ng vfsStream Khi ch\u1ea1y phpunit \u0111\u1ec3 generate code coverage c\u00e2n nh\u1eafc l\u1ef1a ch\u1ecdn driver th\u00edch h\u1ee3p, xem th\u00eam Code Coverage T\u1ea1i sao? B\u1ea1n s\u1ebd ph\u1ea3i ch\u1ea1y tests th\u01b0\u1eddng xuy\u00ean, l\u1eb7p l\u1ea1i => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd l\u00e0m \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn ti\u1ebfn \u0111\u1ed9, tinh th\u1ea7n l\u00e0m vi\u1ec7c D\u1ef1 \u00e1n \u00e1p d\u1ee5ng CI \u0111\u1ec3 build, test v\u00e0 deploy => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd d\u1eabn \u0111\u1ebfn vi\u1ec7c t\u00edch h\u1ee3p cho c\u1ea3 team b\u1ecb ch\u1eadm [7] Quality over code coverage number! \u00b6 S\u1ef1 th\u1eadt v\u1ec1 code coverage Kh\u00f4ng c\u1ea7n vi\u1ebft test \u0111\u00fang v\u1eabn c\u00f3 th\u1ec3 \u0111\u1ea1t 100% coverage! C\u00f3 tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 \u0111\u1ea1t 100% coverage r\u1ed3i nh\u01b0ng v\u1eabn c\u00f3 kh\u1ea3 n\u0103ng l\u1ecdt bug v\u00ec thi\u1ebfu test case => Tham kh\u1ea3o th\u00eam c\u00e1ch phpunit t\u00ednh coverage => link Th\u1ef1c hi\u1ec7n Ch\u00fa tr\u1ecdng v\u00e0o ch\u1ea5t l\u01b0\u1ee3ng test case, vi\u1ebft sao cho \u0111\u1ee7 test case? l\u00e0m sao \u0111\u1ec3 test ch\u1ea1y nhanh h\u01a1n? l\u00e0m sao \u0111\u1ec3 vi\u1ebft test d\u1ec5 h\u01a1n, refactor code? \u00c1p d\u1ee5ng mutation testing v\u00e0o d\u1ef1 \u00e1n n\u1ebfu c\u00f3 th\u1ec3, \u0111\u1ec3 c\u00f3 ch\u1ec9 s\u1ed1 \u0111\u00e1nh g\u00eda t\u1ed1t h\u01a1n => Mutation Testing Pull request template \u00b6 Tham kh\u1ea3o https://github.com/sun7pro/.github/blob/master/PULL_REQUEST_TEMPLATE.md \u0111\u1ec3 \u00e1p d\u1ee5ng pull request template cho d\u1ef1 \u00e1n.","title":"Checklist"},{"location":"06-checklist/#checklist","text":"","title":"Checklist"},{"location":"06-checklist/#1-self-describing-test-method","text":"Unit Test method names must be self-describing Also focus on naming style, keep the naming style consistent across all the test methods and tests. M\u1ee5c \u0111\u00edch: Test case l\u00e0 t\u00e0i li\u1ec7u \u0110\u1ecdc v\u00e0o t\u00ean method test c\u00f3 th\u1ec3 bi\u1ebft m\u1ee5c \u0111\u00edch c\u1ee7a test case Th\u1ef1c hi\u1ec7n T\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i qu\u00e1 ng\u1eafn g\u1ecdn T\u00ean test method ph\u1ea3i ch\u1ec9 ra \u0111i\u1ec1u ki\u1ec7n v\u00e0 expect c\u1ee7a test case Th\u1ed1ng nh\u1ea5t convention trong project, m\u1eb7c \u0111\u1ecbnh visibility c\u1ee7a 1 method trong class l\u00e0 public n\u00ean c\u00f3 th\u1ec3 lo\u1ea1i b\u1ecf t\u1eeb public trong method test Ch\u1ecdn m\u1ed9t trong c\u00e1c convention sau: [Recommend] S\u1eed d\u1ee5ng prefix test_ function test_it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng annotation @test th\u00ec t\u00ean test method kh\u00f4ng c\u1ea7n ph\u1ea3i b\u1eaft \u0111\u1ea7u b\u1eb1ng test_ /* @test */ function it_returns_false_when_input_number_is_odd () S\u1eed d\u1ee5ng camelCase thay cho snake_case , ch\u1ec9 n\u00ean s\u1eed d\u1ee5ng n\u1ebfu trong project \u0111\u00e3 vi\u1ebft theo c\u00e1ch n\u00e0y tr\u01b0\u1edbc \u0111\u00f3 function testItReturnsFalseWhenInputNumberIsOdd ()","title":"[1] Self-describing test method"},{"location":"06-checklist/#2-a3-arrange-asset-act","text":"A3 (Arrange, Asset, Act) Arrange: thi\u1ebft l\u1eadp tr\u1ea1ng th\u00e1i, kh\u1edfi t\u1ea1o object, gi\u1ea3 l\u1eadp mock Act: Ch\u1ea1y unit \u0111ang c\u1ea7n test (method under test) Assert: So s\u00e1nh expected v\u1edbi k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 M\u1ee5c \u0111\u00edch: N\u1ed9i dung test method r\u00f5 r\u00e0ng d\u1ec5 \u0111\u1ecdc, d\u1ec5 vi\u1ebft Th\u1ef1c hi\u1ec7n Chia n\u1ed9i dung test l\u00e0m 3 ph\u1ea7n function test_validation_failed_when_value_exceed_max_length () { // Arrange $username = str_pad ( 'a' , UsernameValidation :: MAX_LENGTH + 1 ); // Act $validation = new UsernameValidation ; $isValidUsername = $validation -> isValid ( $username ); // Assert $this -> assertFalse ( $isValidUsername ); } Ngo\u1ea1i l\u1ec7 khi test m\u1ed9t method throw exception, do v\u1ea5n \u0111\u1ec1 k\u1ef9 thu\u1eadt n\u00ean ph\u1ea3i g\u1ecdi expectionException() tr\u01b0\u1edbc khi g\u1ecdi method: function test_it_throws_exception_when_input_is_not_a_number () { // Assert that $this -> expectException ( InvalidArgumentException :: class ); // Arrange $calculator = new Calculator ; $input1 = 'i am a string' ; $input2 = 100 ; // Act $calculator -> add ( $input1 , $input2 ); }","title":"[2] A3 (Arrange, Asset, Act)"},{"location":"06-checklist/#3-use-sematicproper-assert-method","text":"Keep assert method descriptive. Use proper assert method to improve the readability of code and the error log. S\u1eed d\u1ee5ng assertion ph\u00f9 h\u1ee3p Code d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n N\u1ebfu assert failed th\u00ec message sinh ra c\u0169ng d\u1ec5 hi\u1ec3u h\u01a1n Signature c\u1ee7a c\u00e1c method assert th\u01b0\u1eddng c\u00f3 c\u00e1c tham s\u1ed1 theo th\u1ee9 t\u1ef1 l\u00e0 expected value (gi\u00e1 tr\u1ecb mong mu\u1ed1n), actual value (gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf khi ch\u1ea1y unit), message (message th\u00f4ng b\u00e1o n\u1ebfu fail) n\u00ean c\u1ea7n truy\u1ec1n theo th\u1ee9 t\u1ef1 \u0111\u1ec3 PHPUnit c\u00f3 th\u1ec3 generate ra message b\u00e1o l\u1ed7i ch\u00ednh x\u00e1c $this -> assertEquals ( $expected , $actual ); // => Failed asserting that $actual matches expected $expected. $this -> assertTrue ( $expected == $actual ); // => Failed asserting that false is true?? $this -> assertSame ( $expected , $actual ); $this -> assertTrue ( $expected === $actual ); $this -> assertContains ( $element , $array ); $this -> assertTrue ( in_array ( $element , $array ); $this -> assertCount ( $expected , $actual ); $this -> assertTrue ( count ( $actual ) == $expected ); $this -> assertInstanceOf ( ExpectedClass :: class , $actual ); $this -> assertTrue ( $actual instanceOf ExpectedClass );","title":"[3] Use sematic/proper assert method"},{"location":"06-checklist/#4-if-you-write-code-write-tests","text":"Th\u1ef1c hi\u1ec7n M\u1ecdi PR \u0111\u1ec1u ph\u1ea3i ch\u00fa \u00fd \u0111\u1ebfn test PR th\u00eam feature => vi\u1ebft test cho feature m\u1edbi PR fix bug => vi\u1ebft test \u0111\u1ec3 tr\u00e1nh bug x\u1ea3y ra 1 l\u1ea7n n\u1eefa PR refactor => ch\u1ea1y, update test \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o kh\u00f4ng ph\u00e1t sinh \u1ea3nh h\u01b0\u1edfng N\u00ean t\u00edch h\u1ee3p CI \u0111\u1ec3 ch\u1ea1y test FAQ : Q: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t \u0111\u1ec3 vi\u1ebft test? A: Th\u1eddi \u0111i\u1ec3m t\u1ed1t nh\u1ea5t l\u00e0 khi code c\u00f2n m\u1edbi! Th\u1eddi \u0111i\u1ec3m m\u00e0 c\u1ea3 code v\u00e0 test \u0111\u1ec1u c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng thay \u0111\u1ed5i. T\u01b0\u1edfng t\u01b0\u1ee3ng code gi\u1ed1ng nh\u01b0 \u0111\u1ea5t s\u00e9t , khi c\u00f2n m\u1edbi th\u00ec n\u00f3 m\u1ec1m v\u00e0 d\u1ec5 n\u1eb7n, n\u1ebfu \u0111\u1ec3 l\u00e2u th\u00ec n\u00f3 s\u1ebd c\u1ee9ng v\u00e0 d\u1ec5 v\u1ee1","title":"[4] If you write code, write tests"},{"location":"06-checklist/#5-unit-vs-integration","text":"Rule \u0111\u01a1n gi\u1ea3n Unit test Test t\u1eebng function ho\u1eb7c method c\u1ee7a m\u1ed9t class Kh\u00f4ng th\u1ef1c hi\u1ec7n nh\u1eefng vi\u1ec7c sau: Truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) S\u1eed d\u1ee5ng network (g\u1eedi mail, g\u1ecdi api b\u00ean ngo\u00e0i,...) (l\u00e0m ch\u1eadm, k\u1ebft qu\u1ea3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh v\u00ec ph\u1ee5 thu\u1ed9c v\u00e0o m\u1ea1ng) S\u1eed d\u1ee5ng file system (l\u00e0m ch\u1eadm qu\u00e1 tr\u00ecnh test) Integration test Test vi\u1ec7c k\u1ebft h\u1ee3p gi\u1eefa c\u00e1c unit (function, method) v\u1edbi nhau => test m\u1ed9t nh\u00f3m Unit (v\u00ed d\u1ee5 test route) C\u00f3 th\u1ec3 truy v\u1ea5n c\u01a1 s\u1edf d\u1eef li\u1ec7u (thi\u1ebft l\u1eadp m\u1ed9t database test ri\u00eang bi\u1ec7t) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng file system (test vi\u1ec7c import/export file, file permission...) L\u1eddi khuy\u00ean V\u1edbi ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u, b\u1ea1n c\u00f3 th\u1ec3 b\u1eaft \u0111\u1ea7u \u0111i t\u1eeb integration test b\u1eb1ng vi\u1ec7c test t\u1eebng route. Trong qu\u00e1 tr\u00ecnh vi\u1ebft integration test c\u1ed1 g\u1eafng split ra unit test nh\u1ecf h\u01a1n n\u1ebfu \u0111\u01b0\u1ee3c. Qu\u00e1 nhi\u1ec1u integration test s\u1ebd khi\u1ebfn th\u1eddi gian ch\u1ea1y test l\u00e2u h\u01a1n, vi\u1ec7c truy v\u1ebft l\u1ed7i c\u0169ng kh\u00f3 kh\u0103n h\u01a1n do 1 feature ch\u1ea1y qua nhi\u1ec1u l\u1edbp, layer code.","title":"[5] Unit vs Integration?"},{"location":"06-checklist/#6-my-tests-are-fast","text":"Th\u1ef1c hi\u1ec7n Ngo\u00e0i vi\u1ec7c ch\u00fa tr\u1ecdng v\u00e0o vi\u1ec7c vi\u1ebft test case \u0111\u00fang, c\u1ea7n ch\u00fa \u00fd \u0111\u1ebfn th\u1eddi gian ch\u1ea1y test H\u1ea1n ch\u1ebf test database (integration), v\u00e0 n\u1ebfu c\u00f3 th\u1ec3 th\u00ec d\u00f9ng sqlite in-memory l\u00e0m database test Test kh\u00f4ng g\u1ecdi network hay api service ngo\u00e0i Khi test l\u00e0m vi\u1ec7c v\u1edbi file, c\u00e2n nh\u1eafc s\u1eed d\u1ee5ng vfsStream Khi ch\u1ea1y phpunit \u0111\u1ec3 generate code coverage c\u00e2n nh\u1eafc l\u1ef1a ch\u1ecdn driver th\u00edch h\u1ee3p, xem th\u00eam Code Coverage T\u1ea1i sao? B\u1ea1n s\u1ebd ph\u1ea3i ch\u1ea1y tests th\u01b0\u1eddng xuy\u00ean, l\u1eb7p l\u1ea1i => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd l\u00e0m \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn ti\u1ebfn \u0111\u1ed9, tinh th\u1ea7n l\u00e0m vi\u1ec7c D\u1ef1 \u00e1n \u00e1p d\u1ee5ng CI \u0111\u1ec3 build, test v\u00e0 deploy => N\u1ebfu tests ch\u1ea1y qu\u00e1 ch\u1eadm s\u1ebd d\u1eabn \u0111\u1ebfn vi\u1ec7c t\u00edch h\u1ee3p cho c\u1ea3 team b\u1ecb ch\u1eadm","title":"[6] My tests are fast!"},{"location":"06-checklist/#7-quality-over-code-coverage-number","text":"S\u1ef1 th\u1eadt v\u1ec1 code coverage Kh\u00f4ng c\u1ea7n vi\u1ebft test \u0111\u00fang v\u1eabn c\u00f3 th\u1ec3 \u0111\u1ea1t 100% coverage! C\u00f3 tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 \u0111\u1ea1t 100% coverage r\u1ed3i nh\u01b0ng v\u1eabn c\u00f3 kh\u1ea3 n\u0103ng l\u1ecdt bug v\u00ec thi\u1ebfu test case => Tham kh\u1ea3o th\u00eam c\u00e1ch phpunit t\u00ednh coverage => link Th\u1ef1c hi\u1ec7n Ch\u00fa tr\u1ecdng v\u00e0o ch\u1ea5t l\u01b0\u1ee3ng test case, vi\u1ebft sao cho \u0111\u1ee7 test case? l\u00e0m sao \u0111\u1ec3 test ch\u1ea1y nhanh h\u01a1n? l\u00e0m sao \u0111\u1ec3 vi\u1ebft test d\u1ec5 h\u01a1n, refactor code? \u00c1p d\u1ee5ng mutation testing v\u00e0o d\u1ef1 \u00e1n n\u1ebfu c\u00f3 th\u1ec3, \u0111\u1ec3 c\u00f3 ch\u1ec9 s\u1ed1 \u0111\u00e1nh g\u00eda t\u1ed1t h\u01a1n => Mutation Testing","title":"[7] Quality over code coverage number!"},{"location":"06-checklist/#pull-request-template","text":"Tham kh\u1ea3o https://github.com/sun7pro/.github/blob/master/PULL_REQUEST_TEMPLATE.md \u0111\u1ec3 \u00e1p d\u1ee5ng pull request template cho d\u1ef1 \u00e1n.","title":"Pull request template"},{"location":"laravel/01-convention/","text":"Convention \u00b6 C\u1ea5u tr\u00fac th\u01b0 m\u1ee5c \u00b6 T\u1ea5t c\u1ea3 Unit Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Unit (xem config testsuite trong phpunit.xml ) T\u1ea5t c\u1ea3 Integration Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Feature N\u1ed9i dung b\u00ean trong th\u01b0 m\u1ee5c Unit c\u00f3 c\u1ea5u tr\u00fac gi\u1ed1ng v\u1edbi c\u1ea5u tr\u00fac b\u00ean trong th\u01b0 m\u1ee5c app . V\u00ed d\u1ee5 nh\u01b0 Unit Test cho file app/Models/User.php t\u01b0\u01a1ng \u1ee9ng l\u00e0 tests/Unit/Models/UserTest.php Quy t\u1eafc \u0111\u1eb7t t\u00ean \u00b6 Th\u01b0\u1eddng c\u00f3 namespace b\u1eaft \u0111\u1ea7u v\u1edbi Tests (xem ph\u1ea7n autoload-dev trong composer.json) Method test ph\u1ea3i \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u b\u1eb1ng test , vi\u1ebft d\u1ea1ng camelCase hay snake_case \u0111\u1ec1u \u0111\u01b0\u1ee3c, kh\u00f4ng ph\u1ea3i qu\u00e1 lo l\u1eafng v\u1ec1 t\u00ean method test qu\u00e1 d\u00e0i, nh\u01b0ng n\u00ean ch\u1ecdn 1 trong hai cho th\u1ed1ng nh\u1ea5t, prefer snake_case \u0111\u1ec3 cho d\u1ec5 \u0111\u1ecdc h\u01a1n: function test_it_throws_an_exception_when_email_is_too_long () { // }","title":"Convention"},{"location":"laravel/01-convention/#convention","text":"","title":"Convention"},{"location":"laravel/01-convention/#c\u1ea5u-tr\u00fac-th\u01b0-m\u1ee5c","text":"T\u1ea5t c\u1ea3 Unit Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Unit (xem config testsuite trong phpunit.xml ) T\u1ea5t c\u1ea3 Integration Tests \u0111\u01b0\u1ee3c \u0111\u1eb7t trong th\u01b0 m\u1ee5c tests/Feature N\u1ed9i dung b\u00ean trong th\u01b0 m\u1ee5c Unit c\u00f3 c\u1ea5u tr\u00fac gi\u1ed1ng v\u1edbi c\u1ea5u tr\u00fac b\u00ean trong th\u01b0 m\u1ee5c app . V\u00ed d\u1ee5 nh\u01b0 Unit Test cho file app/Models/User.php t\u01b0\u01a1ng \u1ee9ng l\u00e0 tests/Unit/Models/UserTest.php","title":"C\u1ea5u tr\u00fac th\u01b0 m\u1ee5c"},{"location":"laravel/01-convention/#quy-t\u1eafc-\u0111\u1eb7t-t\u00ean","text":"Th\u01b0\u1eddng c\u00f3 namespace b\u1eaft \u0111\u1ea7u v\u1edbi Tests (xem ph\u1ea7n autoload-dev trong composer.json) Method test ph\u1ea3i \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u b\u1eb1ng test , vi\u1ebft d\u1ea1ng camelCase hay snake_case \u0111\u1ec1u \u0111\u01b0\u1ee3c, kh\u00f4ng ph\u1ea3i qu\u00e1 lo l\u1eafng v\u1ec1 t\u00ean method test qu\u00e1 d\u00e0i, nh\u01b0ng n\u00ean ch\u1ecdn 1 trong hai cho th\u1ed1ng nh\u1ea5t, prefer snake_case \u0111\u1ec3 cho d\u1ec5 \u0111\u1ecdc h\u01a1n: function test_it_throws_an_exception_when_email_is_too_long () { // }","title":"Quy t\u1eafc \u0111\u1eb7t t\u00ean"},{"location":"laravel/02-mocking/","text":"Mocking \u00b6 Gi\u1edbi thi\u1ec7u \u00b6 Khi th\u1ef1c hi\u1ec7n vi\u1ebft unit test cho laravel, th\u00ec vi\u1ec7c th\u1ef1c hi\u1ec7n mock (m\u00f4 ph\u1ecfng m\u1ed9t ph\u1ea7n ch\u1ee9c n\u0103ng code) s\u1ebd c\u1ef1c k\u00ec c\u1ea7n thi\u1ebft. V\u00ec sao \u01b0. V\u00ed d\u1ee5 nh\u00e9. Khi th\u1ef1c hi\u1ec7n test m\u1ed9t Controller , controller n\u00e0y c\u00f3 th\u1ef1c hi\u1ec7n ph\u00e1t \u0111i m\u1ed9t s\u1ef1 ki\u1ec7n ( event ), l\u00fac n\u00e0y vi\u1ec7c mock m\u1ed9t event listenter r\u1ea5t quan tr\u1ecdng \u0111\u1ec3 tr\u00e1nh vi\u1ec7c truy\u1ec1n \u0111i s\u1ef1 ki\u1ec7n th\u1eadt v\u00e0 g\u00e2y \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn h\u1ec7 th\u1ed1ng. Vi\u1ec7c th\u1ef1c hi\u1ec7n mock trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y cho ph\u00e9p b\u1ea1n ch\u1ec9 test HTTP response c\u1ee7a controller m\u00e0 kh\u00f4ng c\u1ea7n lo \u0111\u1ebfn vi\u1ec7c s\u1ebd ph\u1ea3i th\u1ef1c thi c\u00e1c event listener \u1edf m\u00f4i tr\u01b0\u1eddng test ra sao khi m\u00e0 ch\u00fang n\u00ean \u0111\u01b0\u1ee3c test v\u1edbi test case ri\u00eang. Laravel cung c\u1ea5p nhi\u1ec1u ph\u01b0\u01a1ng th\u1ee9c h\u1eefu \u00edch \u0111\u1ec3 mock events , jobs v\u00e0 c\u00e1c facades kh\u00e1c. Ch\u00fang ch\u1ee7 y\u1ebfu cung c\u1ea5p m\u1ed9t layer ti\u1ec7n \u00edch tr\u00ean Mockery thay v\u00ec vi\u1ec7c s\u1ebd ph\u1ea3i th\u1ef1c hi\u1ec7n g\u1ecdi m\u1ed9t lo\u1ea1t Mockery method th\u00f4ng th\u01b0\u1eddng. Mocking Object \u00b6 M\u1ed9t mock object \u0111\u01b0\u1ee3c inject v\u00e0o \u1ee9ng d\u1ee5ng th\u00f4ng qua service container c\u1ee7a Laravel, b\u1ea1n ph\u1ea3i bind mock instance c\u1ee7a m\u00ecnh v\u00e0o container. Vi\u1ec7c n\u00e0y h\u01b0\u1edbng d\u1eabn container s\u1eed d\u1ee5ng mock c\u1ee7a object thay v\u00ec ch\u00ednh object \u0111\u00f3. use App\\Service ; use Mockery ; use Mockery\\MockInterface ; public function test_something_can_be_mocked () { $this -> instance ( Service :: class , Mockery :: mock ( Service :: class , function ( MockInterface $mock ) { $mock -> shouldReceive ( 'process' ) -> once (); }) ); } \u0110\u1ec3 thu\u1eadn ti\u1ec7n h\u01a1n, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng mock method c\u1ee7a Laravel base test case. \u0110o\u1ea1n code d\u01b0\u1edbi \u0111\u00e2y s\u1ebd t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi \u0111o\u1ea1n \u1edf b\u00ean tr\u00ean: use App\\Service ; use Mockery\\MockInterface ; $mock = $this -> mock ( Service :: class , function ( MockInterface $mock ) { $mock -> shouldReceive ( 'process' ) -> once (); }); Trong tr\u01b0\u1eddng h\u1ee3p ch\u1ec9 c\u1ea7n mock m\u1ed9t v\u00e0o methods c\u1ee7a m\u1ed9t object, nh\u1eefng ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng \u0111\u01b0\u1ee3c mock s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi b\u00ecnh th\u01b0\u1eddng khi g\u1ecdi \u0111\u1ebfn, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c partialMock : use App\\Service ; use Mockery\\MockInterface ; $mock = $this -> partialMock ( Service :: class , function ( MockInterface $mock ) { $mock -> shouldReceive ( 'process' ) -> once (); }); T\u01b0\u01a1ng t\u1ef1, n\u1ebfu mu\u1ed1n spy m\u1ed9t object, base test case class c\u1ee7a Larave cung c\u1ea5p spy method d\u1ef1a tr\u00ean ph\u01b0\u01a1ng th\u1ee9c Mockery::spy . Spies c\u0169ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 mock tuy nhi\u00ean n\u00f3 s\u1ebd ghi l\u1ea1i b\u1ea5t k\u00ec t\u01b0\u01a1ng t\u00e1c n\u00e0o gi\u1eefa spy v\u00e0 \u0111o\u1ea1n code \u0111ang \u0111\u01b0\u1ee3c test. Cho ph\u00e9p assertions sau khi \u0111o\u1ea1n code \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c thi. use App\\Service ; $spy = $this -> spy ( Service :: class ); // ... $spy -> shouldHaveReceived ( 'process' ); L\u01b0u \u00fd: Mock: assertions tr\u01b0\u1edbc khi g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c c\u1ea7n test (c\u00f3 ch\u1ee9a ph\u01b0\u01a1ng th\u1ee9c \u0111\u00e3 \u0111\u01b0\u1ee3c mock). Spies: C\u00f3 th\u1ec3 assertion sau khi th\u1ef1c hi\u1ec7n g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c c\u1ea7n test. Kh\u00e1c bi\u1ec7t gi\u1eefa mock v\u00e0 spies. Mock Facade \u00b6 Kh\u00f4ng gi\u1ed1ng nh\u01b0 nh\u1eefng static method kh\u00e1c, facade (c\u1ea3 realtime facade) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c mock. \u0110i\u1ec1u n\u00e0y gi\u00fap ta c\u00f3 th\u1ec3 test facade t\u01b0\u01a1ng t\u1ef1 nh\u01b0 nh\u01b0 c\u00e1c depedecy injection kh\u00e1c. Khi test, b\u1ea1n s\u1ebd mu\u1ed1n mock vi\u1ec7c g\u1ecdi \u0111\u1ebfn m\u1ed9t facade c\u1ee7a Laravel \u1edf controller. V\u00ed d\u1ee5 ta c\u00f3 m\u1ed9t controller nh\u01b0 sau: <? php namespace App\\Http\\Controllers ; use Illuminate\\Support\\Facades\\Cache ; class UserController extends Controller { /** * Retrieve a list of all users of the application. * * @return \\Illuminate\\Http\\Response */ public function index () { $value = Cache :: get ( 'key' ); // } } V\u1edbi controller nh\u01b0 tr\u00ean ta c\u00f3 th\u1ec3 mock vi\u1ec7c g\u1ecdi Cache facade b\u1eb1ng shouldReceive , n\u00f3 s\u1ebd tr\u1ea3 v\u1ec1 instance c\u1ee7a Mockery mock. V\u00ec c\u00e1c facade \u0111\u01b0\u1ee3c qu\u1ea3ng l\u00fd b\u1edfi service container c\u1ee7a Laravel n\u00ean n\u00f3 s\u1ebd c\u00f3 t\u00ednh testability cao h\u01a1n so v\u1edbi static class th\u00f4ng th\u01b0\u1eddng. V\u00ed d\u1ee5 th\u1eed mock get method c\u1ee7a Cache facade <? php namespace Tests\\Feature ; use Illuminate\\Foundation\\Testing\\RefreshDatabase ; use Illuminate\\Foundation\\Testing\\WithoutMiddleware ; use Illuminate\\Support\\Facades\\Cache ; use Tests\\TestCase ; class UserControllerTest extends TestCase { public function testGetIndex () { Cache :: shouldReceive ( 'get' ) -> once () -> with ( 'key' ) -> andReturn ( 'value' ); $response = $this -> get ( '/users' ); // ... } } L\u01b0u \u00fd: B\u1ea1n kh\u00f4ng n\u00ean mock Request facade, thay v\u00e0o \u0111\u00f3 truy\u1ec1n input v\u00e0o Http test method nh\u01b0 get ho\u1eb7c post . T\u01b0\u01a1ng t\u1ef1 tay v\u00ec mock facade Config g\u1ecdi Config::set khi th\u1ef1c hi\u1ec7n vi\u1ebft test Facade Spies \u00b6 N\u1ebfu b\u1ea1n mu\u1ed1n \"spy\" facade c\u1ee7a m\u00ecnh, b\u1ea1n c\u00f3 th\u1ec3 g\u1ecdi spy method t\u01b0\u01a1ng \u1ee9ng \u1edf facade. use Illuminate\\Support\\Facades\\Cache ; public function test_values_are_be_stored_in_cache () { Cache :: spy (); $response = $this -> get ( '/' ); $response -> assertStatus ( 200 ); Cache :: shouldHaveReceived ( 'put' ) -> once () -> with ( 'name' , 'Taylor' , 10 ); } Mockery \u00b6 Xem th\u00eam v\u1ec1 Mockery t\u1ea1i \u0111\u00e2y","title":"Mocking"},{"location":"laravel/02-mocking/#mocking","text":"","title":"Mocking"},{"location":"laravel/02-mocking/#gi\u1edbi-thi\u1ec7u","text":"Khi th\u1ef1c hi\u1ec7n vi\u1ebft unit test cho laravel, th\u00ec vi\u1ec7c th\u1ef1c hi\u1ec7n mock (m\u00f4 ph\u1ecfng m\u1ed9t ph\u1ea7n ch\u1ee9c n\u0103ng code) s\u1ebd c\u1ef1c k\u00ec c\u1ea7n thi\u1ebft. V\u00ec sao \u01b0. V\u00ed d\u1ee5 nh\u00e9. Khi th\u1ef1c hi\u1ec7n test m\u1ed9t Controller , controller n\u00e0y c\u00f3 th\u1ef1c hi\u1ec7n ph\u00e1t \u0111i m\u1ed9t s\u1ef1 ki\u1ec7n ( event ), l\u00fac n\u00e0y vi\u1ec7c mock m\u1ed9t event listenter r\u1ea5t quan tr\u1ecdng \u0111\u1ec3 tr\u00e1nh vi\u1ec7c truy\u1ec1n \u0111i s\u1ef1 ki\u1ec7n th\u1eadt v\u00e0 g\u00e2y \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn h\u1ec7 th\u1ed1ng. Vi\u1ec7c th\u1ef1c hi\u1ec7n mock trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y cho ph\u00e9p b\u1ea1n ch\u1ec9 test HTTP response c\u1ee7a controller m\u00e0 kh\u00f4ng c\u1ea7n lo \u0111\u1ebfn vi\u1ec7c s\u1ebd ph\u1ea3i th\u1ef1c thi c\u00e1c event listener \u1edf m\u00f4i tr\u01b0\u1eddng test ra sao khi m\u00e0 ch\u00fang n\u00ean \u0111\u01b0\u1ee3c test v\u1edbi test case ri\u00eang. Laravel cung c\u1ea5p nhi\u1ec1u ph\u01b0\u01a1ng th\u1ee9c h\u1eefu \u00edch \u0111\u1ec3 mock events , jobs v\u00e0 c\u00e1c facades kh\u00e1c. Ch\u00fang ch\u1ee7 y\u1ebfu cung c\u1ea5p m\u1ed9t layer ti\u1ec7n \u00edch tr\u00ean Mockery thay v\u00ec vi\u1ec7c s\u1ebd ph\u1ea3i th\u1ef1c hi\u1ec7n g\u1ecdi m\u1ed9t lo\u1ea1t Mockery method th\u00f4ng th\u01b0\u1eddng.","title":"Gi\u1edbi thi\u1ec7u"},{"location":"laravel/02-mocking/#mocking-object","text":"M\u1ed9t mock object \u0111\u01b0\u1ee3c inject v\u00e0o \u1ee9ng d\u1ee5ng th\u00f4ng qua service container c\u1ee7a Laravel, b\u1ea1n ph\u1ea3i bind mock instance c\u1ee7a m\u00ecnh v\u00e0o container. Vi\u1ec7c n\u00e0y h\u01b0\u1edbng d\u1eabn container s\u1eed d\u1ee5ng mock c\u1ee7a object thay v\u00ec ch\u00ednh object \u0111\u00f3. use App\\Service ; use Mockery ; use Mockery\\MockInterface ; public function test_something_can_be_mocked () { $this -> instance ( Service :: class , Mockery :: mock ( Service :: class , function ( MockInterface $mock ) { $mock -> shouldReceive ( 'process' ) -> once (); }) ); } \u0110\u1ec3 thu\u1eadn ti\u1ec7n h\u01a1n, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng mock method c\u1ee7a Laravel base test case. \u0110o\u1ea1n code d\u01b0\u1edbi \u0111\u00e2y s\u1ebd t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi \u0111o\u1ea1n \u1edf b\u00ean tr\u00ean: use App\\Service ; use Mockery\\MockInterface ; $mock = $this -> mock ( Service :: class , function ( MockInterface $mock ) { $mock -> shouldReceive ( 'process' ) -> once (); }); Trong tr\u01b0\u1eddng h\u1ee3p ch\u1ec9 c\u1ea7n mock m\u1ed9t v\u00e0o methods c\u1ee7a m\u1ed9t object, nh\u1eefng ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng \u0111\u01b0\u1ee3c mock s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi b\u00ecnh th\u01b0\u1eddng khi g\u1ecdi \u0111\u1ebfn, b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c partialMock : use App\\Service ; use Mockery\\MockInterface ; $mock = $this -> partialMock ( Service :: class , function ( MockInterface $mock ) { $mock -> shouldReceive ( 'process' ) -> once (); }); T\u01b0\u01a1ng t\u1ef1, n\u1ebfu mu\u1ed1n spy m\u1ed9t object, base test case class c\u1ee7a Larave cung c\u1ea5p spy method d\u1ef1a tr\u00ean ph\u01b0\u01a1ng th\u1ee9c Mockery::spy . Spies c\u0169ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 mock tuy nhi\u00ean n\u00f3 s\u1ebd ghi l\u1ea1i b\u1ea5t k\u00ec t\u01b0\u01a1ng t\u00e1c n\u00e0o gi\u1eefa spy v\u00e0 \u0111o\u1ea1n code \u0111ang \u0111\u01b0\u1ee3c test. Cho ph\u00e9p assertions sau khi \u0111o\u1ea1n code \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c thi. use App\\Service ; $spy = $this -> spy ( Service :: class ); // ... $spy -> shouldHaveReceived ( 'process' ); L\u01b0u \u00fd: Mock: assertions tr\u01b0\u1edbc khi g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c c\u1ea7n test (c\u00f3 ch\u1ee9a ph\u01b0\u01a1ng th\u1ee9c \u0111\u00e3 \u0111\u01b0\u1ee3c mock). Spies: C\u00f3 th\u1ec3 assertion sau khi th\u1ef1c hi\u1ec7n g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c c\u1ea7n test. Kh\u00e1c bi\u1ec7t gi\u1eefa mock v\u00e0 spies.","title":"Mocking Object"},{"location":"laravel/02-mocking/#mock-facade","text":"Kh\u00f4ng gi\u1ed1ng nh\u01b0 nh\u1eefng static method kh\u00e1c, facade (c\u1ea3 realtime facade) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c mock. \u0110i\u1ec1u n\u00e0y gi\u00fap ta c\u00f3 th\u1ec3 test facade t\u01b0\u01a1ng t\u1ef1 nh\u01b0 nh\u01b0 c\u00e1c depedecy injection kh\u00e1c. Khi test, b\u1ea1n s\u1ebd mu\u1ed1n mock vi\u1ec7c g\u1ecdi \u0111\u1ebfn m\u1ed9t facade c\u1ee7a Laravel \u1edf controller. V\u00ed d\u1ee5 ta c\u00f3 m\u1ed9t controller nh\u01b0 sau: <? php namespace App\\Http\\Controllers ; use Illuminate\\Support\\Facades\\Cache ; class UserController extends Controller { /** * Retrieve a list of all users of the application. * * @return \\Illuminate\\Http\\Response */ public function index () { $value = Cache :: get ( 'key' ); // } } V\u1edbi controller nh\u01b0 tr\u00ean ta c\u00f3 th\u1ec3 mock vi\u1ec7c g\u1ecdi Cache facade b\u1eb1ng shouldReceive , n\u00f3 s\u1ebd tr\u1ea3 v\u1ec1 instance c\u1ee7a Mockery mock. V\u00ec c\u00e1c facade \u0111\u01b0\u1ee3c qu\u1ea3ng l\u00fd b\u1edfi service container c\u1ee7a Laravel n\u00ean n\u00f3 s\u1ebd c\u00f3 t\u00ednh testability cao h\u01a1n so v\u1edbi static class th\u00f4ng th\u01b0\u1eddng. V\u00ed d\u1ee5 th\u1eed mock get method c\u1ee7a Cache facade <? php namespace Tests\\Feature ; use Illuminate\\Foundation\\Testing\\RefreshDatabase ; use Illuminate\\Foundation\\Testing\\WithoutMiddleware ; use Illuminate\\Support\\Facades\\Cache ; use Tests\\TestCase ; class UserControllerTest extends TestCase { public function testGetIndex () { Cache :: shouldReceive ( 'get' ) -> once () -> with ( 'key' ) -> andReturn ( 'value' ); $response = $this -> get ( '/users' ); // ... } } L\u01b0u \u00fd: B\u1ea1n kh\u00f4ng n\u00ean mock Request facade, thay v\u00e0o \u0111\u00f3 truy\u1ec1n input v\u00e0o Http test method nh\u01b0 get ho\u1eb7c post . T\u01b0\u01a1ng t\u1ef1 tay v\u00ec mock facade Config g\u1ecdi Config::set khi th\u1ef1c hi\u1ec7n vi\u1ebft test","title":"Mock Facade"},{"location":"laravel/02-mocking/#facade-spies","text":"N\u1ebfu b\u1ea1n mu\u1ed1n \"spy\" facade c\u1ee7a m\u00ecnh, b\u1ea1n c\u00f3 th\u1ec3 g\u1ecdi spy method t\u01b0\u01a1ng \u1ee9ng \u1edf facade. use Illuminate\\Support\\Facades\\Cache ; public function test_values_are_be_stored_in_cache () { Cache :: spy (); $response = $this -> get ( '/' ); $response -> assertStatus ( 200 ); Cache :: shouldHaveReceived ( 'put' ) -> once () -> with ( 'name' , 'Taylor' , 10 ); }","title":"Facade Spies"},{"location":"laravel/02-mocking/#mockery","text":"Xem th\u00eam v\u1ec1 Mockery t\u1ea1i \u0111\u00e2y","title":"Mockery"},{"location":"laravel/03-controller/","text":"Controller \u00b6 Intro \u00b6 Gi\u1ea3 s\u1eed b\u1ea1n c\u00f3 form request nh\u01b0 th\u1ebf n\u00e0y, b\u1ea1n s\u1ebd test n\u00f3 nh\u01b0 th\u1ebf n\u00e0o? class ProductCreateRequest extends FormRequest { public function rules () { return [ 'name' => [ 'required' , 'max:255' ], 'sku' => [ 'required' , Rule :: unique ( Product :: getTableName (), 'sku' )], 'image' => [ 'nullable' , 'mimes:jpg,png' ], 'quantity' => [ 'required' , 'integer' , 'min:1' ], 'description' => [ 'required' ], 'short_description' => [ 'nullable' , 'max:255' ], ]; } } class ProductController extends Controller { public function store ( ProductCreateRequest $request ) { $inputs = $request -> validated (); $product = $this -> productService -> create ( $inputs ); return back () -> with ( 'product' , $product ); } } Nh\u1eafc l\u1ea1i m\u1ed9t ch\u00fat v\u1ec1 Form Request: Nhi\u1ec7m v\u1ee5 ch\u00ednh c\u1ee7a class l\u00e0 d\u00f9ng \u0111\u1ec3 khai b\u00e1o validation rules cho form C\u00f3 th\u1ec3 k\u00e8m theo vi\u1ec7c check authorization (*1) C\u00f3 th\u1ec3 k\u00e8m theo \"after\" validation hook (*2) C\u00f3 th\u1ec3 k\u00e8m theo prepareForValidation Kh\u00f4ng d\u00f9ng \u0111\u1ed9c l\u1eadp m\u00e0 ch\u1ec9 inject v\u00e0o controller (type-hint bi\u1ebfn $request ) Laravel service container khi th\u1ef1c hi\u1ec7n controller action s\u1ebd t\u1ef1 \u0111\u1ed9ng resolve Form Request d\u1ef1a v\u00e0o type hint v\u00e0 t\u1ef1 \u0111\u1ed9ng th\u1ef1c hi\u1ec7n validate v\u1edbi c\u00e1c rules \u0111\u00e3 khai b\u00e1o trong Form Request Form Request c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c test th\u00f4ng qua Unit Test ho\u1eb7c Integration Test (Laravel th\u01b0\u1eddng g\u1ecdi l\u00e0 Feature Test). Unit Test \u00b6 The first way \u00b6 C\u00e1ch ti\u1ebfp c\u1eadn \u0111\u1ea7u ti\u00ean \u0111\u00f3 l\u00e0 test \u0111\u1ec3 ki\u1ec3m tra t\u1ea5t c\u1ea3 rules c\u1ea7n thi\u1ebft \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong Form Request: function test_it_should_contain_all_the_expected_validation_rules () { $request = new ProductCreateRequest (); $this -> assertEquals ([ 'name' => [ 'required' , 'max:255' ], 'sku' => [ 'required' , Rule :: unique ( Product :: getTableName (), 'sku' )], 'image' => [ 'nullable' , 'mimes:jpg,png' ], 'quantity' => [ 'required' , 'integer' , 'min:1' ], 'description' => [ 'required' ], 'short_description' => [ 'nullable' , 'max:255' ], ], $request -> rules ()); } R\u1ea5t \u0111\u01a1n gi\u1ea3n b\u1ea1n \u0111\u00e3 c\u00f3 100% code coverage cho class ProductCreateRequest ! V\u1ec1 l\u00fd thuy\u1ebft th\u00ec kh\u00f4ng sai, function l\u00e0m g\u00ec th\u00ec test \u0111\u00fang ch\u1ee9c n\u0103ng c\u1ee7a function \u0111\u1ea5y. Nh\u01b0ng t\u00f4i th\u00ec kh\u00f4ng th\u00edch c\u00e1ch n\u00e0y v\u00ec m\u1ed9t s\u1ed1 l\u00fd do: N\u00f3 gi\u1ed1ng nh\u01b0 \u0111ang duplicate code th\u00e0nh 2 n\u01a1i T\u1ea1o th\u00f3i quen kh\u00f4ng t\u1ed1t, ng\u01b0\u1eddi vi\u1ebft ch\u1ec9 vi\u1ec7c copy code l\u00e0 \u0111\u1ea1t \u0111\u01b0\u1ee3c coverage, m\u00e0 ch\u1eb3ng c\u1ea7n \u0111\u1ec3 \u00fd xem n\u00f3 c\u00f3 th\u1eadt s\u1ef1 ch\u1ea1y \u0111\u00fang kh\u00f4ng The second approach \u00b6 C\u00e1ch ti\u1ebfp c\u1eadn th\u1ee9 hai \u0111\u00f3 l\u00e0 d\u1ef1a v\u00e0o document c\u1ee7a Laravel v\u1ec1 Manually Creating Validators . Ch\u00fang ta s\u1ebd t\u1ef1 kh\u1edfi t\u1ea1o m\u1ed9t Validator instance v\u1edbi c\u00e1c rules \u0111\u01b0\u1ee3c khai b\u00e1o trong Form Request: function test_it_fails_when_name_is_missing () { $request = new ProductCreateRequest (); $validator = Validator :: make ([ 'sku' => 'a-product-sku' , 'quantity' => 1 , 'description' => 'I am the master key, buy me!' , ], $request -> rules ()); $this -> assertFalse ( $validator -> passes ()); $this -> assertContains ( 'title' , $validator -> errors () -> keys ()); } N\u1ebfu vi\u1ebft theo test case tr\u00ean, ch\u00fang ta s\u1ebd c\u1ea7n r\u1ea5t nhi\u1ec1u test case n\u1eefa \u0111\u1ec3 test cho t\u1eebng rule, c\u1ee7a t\u1eebng input: Test name required Test name max length Test sku required Test sku unique Test image type Test quantity required Test quantity is number ... Nh\u01b0ng c\u00f3 th\u1ec3 t\u00f3m g\u1ecdn l\u1ea1i b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng @dataProvider , v\u00ed d\u1ee5: /** * @dataProvider provideInvalidData */ function test_invalid_data ( array $data ) { $request = new ProductCreateRequest (); $validator = Validator :: make ( $data , $request -> rules ()); $this -> assertFalse ( $validator -> passes ()); } function makeInvalidData ( $invalidInputs ) { $validInputs = [ 'sku' => 'a-product-sku' , 'quantity' => 1 , 'description' => 'I am the master key, buy me!' , ]; return array_merge ( $validInputs , $invalidInputs ); } function provideInvalidData () { return [ [[]], // missing fields [ $this -> makeInvalidData ([ 'name' => '' ])], [ $this -> makeInvalidData ([ 'name' => 'name exceed length ' . str_repeat ( 'a' , 256 )])], // How to test file updload? [ $this -> makeInvalidData ([ 'sku' => '' ])], [ $this -> makeInvalidData ([ 'sku' => 'existed-sku' ])], // How to test Unique rule? ]; } V\u1eabn c\u00f2n m\u1ed9t s\u1ed1 c\u00e2u h\u1ecfi b\u1ecf ng\u00f5 \u1edf tr\u00ean :D nh\u01b0ng ch\u1ee7 y\u1ebfu l\u00e0 \u0111\u01b0a ra \u00fd t\u01b0\u1edfng test tr\u01b0\u1edbc. Nh\u01b0\u1ee3c \u0111i\u1ec3m l\u1edbn nh\u1ea5t c\u1ee7a c\u00e1ch n\u00e0y \u0111\u00f3 l\u00e0 kh\u00f4ng th\u1ec3 test \u0111\u01b0\u1ee3c hai \u00fd (*1) v\u00e0 (*2) n\u00eau \u1edf tr\u00ean v\u00e0 c\u00f2n nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p n\u1eefa \u0111\u00f2i h\u1ecfi b\u1ea1n \u0111\u00e0o s\u00e2u h\u01a1n v\u00e0o c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a framework (*3). Integration Test \u00b6 Tr\u01b0\u1edbc khi \u0111i v\u00e0o chi ti\u1ebft t\u00f4i ngh\u0129 c\u1ea7n th\u1ed1ng nh\u1ea5t m\u1ed9t ch\u00fat quan \u0111i\u1ec3m v\u1ec1 integration test. Integration test \u1edf \u0111\u00e2y t\u1ee9c l\u00e0 test t\u00edch h\u1ee3p m\u1ed9t nh\u00f3m c\u00e1c Unit v\u1edbi nhau. Laravel g\u1ecdi chung n\u00f3 l\u00e0 Feature Test, \u0111\u00e3 c\u00f3 pull request \u0111\u1ecbnh t\u00e1ch ra l\u00e0m 3 lo\u1ea1i ri\u00eang bi\u1ec7t Unit Test, Integration Test v\u00e0 Feature Test \u1edf \u0111\u00e2y nh\u01b0ng cu\u1ed1i c\u00f9ng v\u1eabn keep nh\u01b0 c\u0169 l\u00e0 Unit Test v\u00e0 Feature Test. Quan \u0111i\u1ec3m \u1edf b\u00e0i vi\u1ebft n\u00e0y v\u1ec1 Integration Test, c\u1ee5 th\u1ec3 v\u1edbi Laravel \u0111\u00f3 l\u00e0: S\u1eed d\u1ee5ng HTTP test \u0111\u1ec3 test route (t\u00edch h\u1ee3p controller, form request v\u00e0 framework routing) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng DB, v\u00ed d\u1ee5 khi test reposity integrate v\u1edbi DB C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng mock \u0111\u1ec3 mock queue, storage, mail, repository, service... N\u00f3 v\u1eabn g\u1ea7n g\u1ea7n v\u1edbi Unit Test, ch\u1ec9 l\u00e0 s\u1eed d\u1ee5ng th\u00eam c\u00e1c t\u00ednh n\u0103ng, helper c\u1ee7a framework \u0111\u1ec3 vi\u1ebft test d\u1ec5 d\u00e0ng h\u01a1n, ch\u01b0a \u0111\u1ebfn m\u1ee9c test full lu\u1ed3ng nh\u01b0 m\u1ed9t end-user th\u1ef1c s\u1ef1 c\u1ee7a h\u1ec7 th\u1ed1ng. B\u1eaft \u0111\u1ea7u Integration Test v\u1edbi t\u00e0i li\u1ec7u c\u1ee7a Laravel: HTTP Tests . function test_it_fails_when_name_is_missing () { $url = action ([ ProductController :: class , 'store' ]); $response = $this -> post ( $url , [ 'sku' => 'a-product-sku' , 'quantity' => 1 , 'description' => 'I am the master key, buy me!' , ]); $response -> assertStatus ( 422 ); $response -> assertSessionHasErrors ([ 'name' ]); } N\u00f3 kh\u00e1 gi\u1ed1ng v\u1edbi Unit Test c\u00e1ch 2 \u1edf tr\u00ean, nh\u01b0ng c\u00f3 m\u1ed9t s\u1ed1 \u0111i\u1ec3m kh\u00e1c bi\u1ec7t d\u1ec5 nh\u1eadn th\u1ea5y \u0111\u00f3 l\u00e0: Test tr\u00f4ng gi\u1ed1ng th\u1ef1c t\u1ebf h\u01a1n, v\u00ec ta th\u1ef1c hi\u1ec7n request tr\u1ef1c ti\u1ebfp \u0111\u1ebfn route url s\u1eed d\u1ee5ng helper method $this->post() c\u1ee7a Laravel. B\u1ea1n c\u00f3 th\u1ec3 xem c\u00e1ch Laravel gi\u1ea3 l\u1eadp request \u1edf \u0111\u00e2y , b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng HTTP Kernel, ch\u1ee9 kh\u00f4ng ph\u1ea3i request \u0111\u1ebfn server qua network! Kh\u1eafc ph\u1ee5c \u0111\u01b0\u1ee3c \u0111\u01b0\u1ee3c v\u1ea5n \u0111\u1ec1 (*3) v\u00ec lu\u1ed3ng x\u1eed l\u00fd request \u0111\u00e3 follow theo framework T\u1ea5t nhi\u00ean, ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng @dataProvider nh\u01b0 \u0111\u00e3 gi\u1edbi thi\u1ec7u \u1edf tr\u00ean, nh\u01b0ng li\u1ec7u c\u00f3 c\u00e1ch n\u00e0o t\u1ed1t h\u01a1n kh\u00f4ng? - S\u1eed d\u1ee5ng multiple data provider. function makeInvalidData ( $invalidInputs ) { $validInputs = [ 'sku' => 'a-product-sku' , 'quantity' => 1 , 'description' => 'I am the master key, buy me!' , ]; return array_filter ( array_merge ( $validInputs , $invalidInputs ), function ( $value ) { return $value !== null ; }); } /** * @dataProvider provideInvalidName * @dataProvider provideInvalidQuantity * @dataProvider provideInvalidSku * @dataProvider provideInvalidImage * ... */ function test_it_show_error_when_input_invalid ( $inputKey , $inputValue ) { $url = action ([ ProductController :: class , 'store' ]); $inputs = $this -> makeInvalidData ([ $inputKey => $inputValue , ]); $response = $this -> post ( $url , $inputs ); $response -> assertSessionHasErrors ([ $inputKey ]); } function provideInvalidName () { return [ // T\u00ean dataset => dataset value [$inputKey, $inputValue] 'Name is required' => [ 'name' , null ], 'Name is limit to 255 chars' => [ 'name' , str_repeat ( 'a' , 256 )], ]; } function provideInvalidQuantity () { return [ 'Quantity is required' => [ 'quantity' , null ], 'Quantity should be integer' => [ 'quantity' , 1.1 ], 'Quantity should be greater than 1' => [ 'quantity' , 0 ], ]; } PHPUnit h\u1ed7 tr\u1ee3 nhi\u1ec1u data provider cho m\u1ed9t test case, n\u00ean \u00fd t\u01b0\u1edfng \u1edf \u0111\u00e2y l\u00e0: m\u1ed7i input s\u1ebd c\u00f3 m\u1ed9t data provider v\u00e0 trong provider ch\u00fang ta s\u1ebd m\u00f4 t\u1ea3 d\u1eef li\u1ec7u cho case l\u00e0m validation failed. V\u1edbi c\u00e1ch n\u00e0y, ch\u00fang ta focus v\u00e0o vi\u1ec7c t\u1ea1o d\u1eef li\u1ec7u test. V\u00e0 v\u1edbi vi\u1ec7c \u0111\u1eb7t t\u00ean cho m\u1ed7i dataset, khi \u0111\u1ecdc l\u1ea1i code s\u1ebd r\u1ea5t d\u1ec5 hi\u1ec3u, c\u0169ng nh\u01b0 khi m\u1ed9t tr\u01b0\u1eddng h\u1ee3p fail, PHPUnit s\u1ebd hi\u1ec3n th\u1ecb message r\u00f5 r\u00e0ng: 1) Tests\\Feature\\ProductControllerTest::test_it_show_error_when_input_invalid with dataset \"Quantity should be integer\" ('quantity', 1.1) N\u1ebfu b\u1ea1n follow theo convention: Controller ch\u1ec9 x\u1eed l\u00fd \u0111i\u1ec1u h\u01b0\u1edbng request, logic \u0111\u01b0\u1ee3c x\u1eed l\u00fd \u1edf Repository hay Service class. Th\u00ec vi\u1ec7c test unit thu\u1ea7n cho controller l\u00e0 kh\u00f4ng c\u1ea7n thi\u1ebft, thay v\u00e0o \u0111\u00f3 ch\u00fang ta s\u1ebd th\u1ef1c hi\u1ec7n test integration: routing, controller, form request. Vi\u1ec7c assert c\u0169ng d\u1ec5 d\u00e0ng h\u01a1n do Laravel \u0111\u00e3 h\u1ed7 tr\u1ee3 s\u1eb5n nhi\u1ec1u method asserts cho HTTP Test . \u1ede ph\u1ea7n tr\u00ean, ch\u00fang ta m\u1edbi ch\u1ec9 v\u00ed d\u1ee5 v\u1ec1 c\u00e1c input \u0111\u01a1n gi\u1ea3n, c\u00f2n 2 v\u1ea5n \u0111\u1ec1 ch\u01b0a \u0111\u01b0\u1ee3c nh\u1eafc t\u1edbi \u0111\u00f3 l\u00e0 test database rule unique v\u00e0 image upload. Database rule \u00b6 C\u00e1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t theo h\u01b0\u1edbng ti\u1ebfp c\u1eadn Integration Test \u0111\u00f3 l\u00e0 s\u1eed d\u1ee5ng database test \u0111\u1ec3 t\u1ea1o d\u1eef li\u1ec7u m\u1eabu theo test case. V\u00ed d\u1ee5 \u1edf ProductCreateRequest ch\u00fang ta c\u00f3 khai b\u00e1o rule unique cho sku , v\u1eady th\u00ec c\u00e1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t l\u00e0 chu\u1ea9n b\u1ecb database test v\u1edbi 1 b\u1ea3n khi c\u00f3 sku = existed-sku , sau \u0111\u00f3 trong test case b\u1ea1n s\u1ebd truy\u1ec1n input cho sku l\u00e0 existed-sku . Th\u00f4ng th\u01b0\u1eddng factory s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 t\u1ea1o data test cho model. V\u00ec factory kh\u00f4ng s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c b\u00ean trong data provider c\u1ee7a phpunit, n\u00ean ch\u00fang ta c\u1ea7n thay \u0111\u1ed5i ch\u00fat v\u1ec1 method test: /** * ... * @dataProvider provideInvalidSku * ... */ function test_it_show_error_when_input_invalid ( $inputKey , $inputValue ) { $url = action ([ ProductController :: class , 'store' ]); $inputs = $this -> makeInvalidData ([ $inputKey => is_callable ( $inputValue ) ? $inputValue () : $inputValue , ]); $response = $this -> post ( $url , $inputs ); $response -> assertSessionHasErrors ([ $inputKey ]); } function provideInvalidSku () { return [ // T\u00ean dataset => dataset value [$inputKey, $inputValue] 'SKU is required' => [ 'sku' , null ], 'SKU must be unique' => [ 'sku' , function () { Product :: factory () -> create ([ 'sku' => 'existed-sku' ]); return 'existed-sku' ; }, ], ]; } File upload \u00b6 Laravel h\u1ed7 tr\u1ee3 t\u1ea1o fake upload file, ch\u00fang ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng n\u00f3 nh\u01b0 sau: function provideInvalidImage () { return [ // T\u00ean dataset => dataset value [$inputKey, $inputValue] 'Image must be jpg or png' => [ 'image' , function () { Storage :: fake (); return UploadedFile :: fake () -> image ( 'product.gif' ); }, ], ]; } R\u1ea5t \u0111\u01a1n gi\u1ea3n ph\u1ea3i kh\u00f4ng. T\u01b0\u01a1ng t\u1ef1 ch\u00fang ta s\u1ebd c\u00f3 th\u00eam c\u00e1c case validation success. K\u1ebft lu\u1eadn \u00b6 Nh\u01b0 c\u00e1c b\u1ea1n th\u1ea5y, c\u00f3 nhi\u1ec1u c\u00e1ch \u0111\u1ec3 test form validation trong laravel, v\u00ec v\u1eady vi\u1ec7c l\u00e0m theo h\u01b0\u1edbng n\u00e0o ph\u1ee5 thu\u1ed9c v\u00e0o ch\u00ednh b\u1ea1n hay d\u1ef1 \u00e1n quy\u1ebft \u0111\u1ecbnh, b\u00e0i vi\u1ebft ch\u1ec9 n\u00eau ra m\u1ed9t s\u1ed1 c\u00e1ch \u0111\u1ec3 b\u1ea1n tham kh\u1ea3o.","title":"Controller"},{"location":"laravel/03-controller/#controller","text":"","title":"Controller"},{"location":"laravel/03-controller/#intro","text":"Gi\u1ea3 s\u1eed b\u1ea1n c\u00f3 form request nh\u01b0 th\u1ebf n\u00e0y, b\u1ea1n s\u1ebd test n\u00f3 nh\u01b0 th\u1ebf n\u00e0o? class ProductCreateRequest extends FormRequest { public function rules () { return [ 'name' => [ 'required' , 'max:255' ], 'sku' => [ 'required' , Rule :: unique ( Product :: getTableName (), 'sku' )], 'image' => [ 'nullable' , 'mimes:jpg,png' ], 'quantity' => [ 'required' , 'integer' , 'min:1' ], 'description' => [ 'required' ], 'short_description' => [ 'nullable' , 'max:255' ], ]; } } class ProductController extends Controller { public function store ( ProductCreateRequest $request ) { $inputs = $request -> validated (); $product = $this -> productService -> create ( $inputs ); return back () -> with ( 'product' , $product ); } } Nh\u1eafc l\u1ea1i m\u1ed9t ch\u00fat v\u1ec1 Form Request: Nhi\u1ec7m v\u1ee5 ch\u00ednh c\u1ee7a class l\u00e0 d\u00f9ng \u0111\u1ec3 khai b\u00e1o validation rules cho form C\u00f3 th\u1ec3 k\u00e8m theo vi\u1ec7c check authorization (*1) C\u00f3 th\u1ec3 k\u00e8m theo \"after\" validation hook (*2) C\u00f3 th\u1ec3 k\u00e8m theo prepareForValidation Kh\u00f4ng d\u00f9ng \u0111\u1ed9c l\u1eadp m\u00e0 ch\u1ec9 inject v\u00e0o controller (type-hint bi\u1ebfn $request ) Laravel service container khi th\u1ef1c hi\u1ec7n controller action s\u1ebd t\u1ef1 \u0111\u1ed9ng resolve Form Request d\u1ef1a v\u00e0o type hint v\u00e0 t\u1ef1 \u0111\u1ed9ng th\u1ef1c hi\u1ec7n validate v\u1edbi c\u00e1c rules \u0111\u00e3 khai b\u00e1o trong Form Request Form Request c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c test th\u00f4ng qua Unit Test ho\u1eb7c Integration Test (Laravel th\u01b0\u1eddng g\u1ecdi l\u00e0 Feature Test).","title":"Intro"},{"location":"laravel/03-controller/#unit-test","text":"","title":"Unit Test"},{"location":"laravel/03-controller/#the-first-way","text":"C\u00e1ch ti\u1ebfp c\u1eadn \u0111\u1ea7u ti\u00ean \u0111\u00f3 l\u00e0 test \u0111\u1ec3 ki\u1ec3m tra t\u1ea5t c\u1ea3 rules c\u1ea7n thi\u1ebft \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong Form Request: function test_it_should_contain_all_the_expected_validation_rules () { $request = new ProductCreateRequest (); $this -> assertEquals ([ 'name' => [ 'required' , 'max:255' ], 'sku' => [ 'required' , Rule :: unique ( Product :: getTableName (), 'sku' )], 'image' => [ 'nullable' , 'mimes:jpg,png' ], 'quantity' => [ 'required' , 'integer' , 'min:1' ], 'description' => [ 'required' ], 'short_description' => [ 'nullable' , 'max:255' ], ], $request -> rules ()); } R\u1ea5t \u0111\u01a1n gi\u1ea3n b\u1ea1n \u0111\u00e3 c\u00f3 100% code coverage cho class ProductCreateRequest ! V\u1ec1 l\u00fd thuy\u1ebft th\u00ec kh\u00f4ng sai, function l\u00e0m g\u00ec th\u00ec test \u0111\u00fang ch\u1ee9c n\u0103ng c\u1ee7a function \u0111\u1ea5y. Nh\u01b0ng t\u00f4i th\u00ec kh\u00f4ng th\u00edch c\u00e1ch n\u00e0y v\u00ec m\u1ed9t s\u1ed1 l\u00fd do: N\u00f3 gi\u1ed1ng nh\u01b0 \u0111ang duplicate code th\u00e0nh 2 n\u01a1i T\u1ea1o th\u00f3i quen kh\u00f4ng t\u1ed1t, ng\u01b0\u1eddi vi\u1ebft ch\u1ec9 vi\u1ec7c copy code l\u00e0 \u0111\u1ea1t \u0111\u01b0\u1ee3c coverage, m\u00e0 ch\u1eb3ng c\u1ea7n \u0111\u1ec3 \u00fd xem n\u00f3 c\u00f3 th\u1eadt s\u1ef1 ch\u1ea1y \u0111\u00fang kh\u00f4ng","title":"The first way"},{"location":"laravel/03-controller/#the-second-approach","text":"C\u00e1ch ti\u1ebfp c\u1eadn th\u1ee9 hai \u0111\u00f3 l\u00e0 d\u1ef1a v\u00e0o document c\u1ee7a Laravel v\u1ec1 Manually Creating Validators . Ch\u00fang ta s\u1ebd t\u1ef1 kh\u1edfi t\u1ea1o m\u1ed9t Validator instance v\u1edbi c\u00e1c rules \u0111\u01b0\u1ee3c khai b\u00e1o trong Form Request: function test_it_fails_when_name_is_missing () { $request = new ProductCreateRequest (); $validator = Validator :: make ([ 'sku' => 'a-product-sku' , 'quantity' => 1 , 'description' => 'I am the master key, buy me!' , ], $request -> rules ()); $this -> assertFalse ( $validator -> passes ()); $this -> assertContains ( 'title' , $validator -> errors () -> keys ()); } N\u1ebfu vi\u1ebft theo test case tr\u00ean, ch\u00fang ta s\u1ebd c\u1ea7n r\u1ea5t nhi\u1ec1u test case n\u1eefa \u0111\u1ec3 test cho t\u1eebng rule, c\u1ee7a t\u1eebng input: Test name required Test name max length Test sku required Test sku unique Test image type Test quantity required Test quantity is number ... Nh\u01b0ng c\u00f3 th\u1ec3 t\u00f3m g\u1ecdn l\u1ea1i b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng @dataProvider , v\u00ed d\u1ee5: /** * @dataProvider provideInvalidData */ function test_invalid_data ( array $data ) { $request = new ProductCreateRequest (); $validator = Validator :: make ( $data , $request -> rules ()); $this -> assertFalse ( $validator -> passes ()); } function makeInvalidData ( $invalidInputs ) { $validInputs = [ 'sku' => 'a-product-sku' , 'quantity' => 1 , 'description' => 'I am the master key, buy me!' , ]; return array_merge ( $validInputs , $invalidInputs ); } function provideInvalidData () { return [ [[]], // missing fields [ $this -> makeInvalidData ([ 'name' => '' ])], [ $this -> makeInvalidData ([ 'name' => 'name exceed length ' . str_repeat ( 'a' , 256 )])], // How to test file updload? [ $this -> makeInvalidData ([ 'sku' => '' ])], [ $this -> makeInvalidData ([ 'sku' => 'existed-sku' ])], // How to test Unique rule? ]; } V\u1eabn c\u00f2n m\u1ed9t s\u1ed1 c\u00e2u h\u1ecfi b\u1ecf ng\u00f5 \u1edf tr\u00ean :D nh\u01b0ng ch\u1ee7 y\u1ebfu l\u00e0 \u0111\u01b0a ra \u00fd t\u01b0\u1edfng test tr\u01b0\u1edbc. Nh\u01b0\u1ee3c \u0111i\u1ec3m l\u1edbn nh\u1ea5t c\u1ee7a c\u00e1ch n\u00e0y \u0111\u00f3 l\u00e0 kh\u00f4ng th\u1ec3 test \u0111\u01b0\u1ee3c hai \u00fd (*1) v\u00e0 (*2) n\u00eau \u1edf tr\u00ean v\u00e0 c\u00f2n nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p n\u1eefa \u0111\u00f2i h\u1ecfi b\u1ea1n \u0111\u00e0o s\u00e2u h\u01a1n v\u00e0o c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a framework (*3).","title":"The second approach"},{"location":"laravel/03-controller/#integration-test","text":"Tr\u01b0\u1edbc khi \u0111i v\u00e0o chi ti\u1ebft t\u00f4i ngh\u0129 c\u1ea7n th\u1ed1ng nh\u1ea5t m\u1ed9t ch\u00fat quan \u0111i\u1ec3m v\u1ec1 integration test. Integration test \u1edf \u0111\u00e2y t\u1ee9c l\u00e0 test t\u00edch h\u1ee3p m\u1ed9t nh\u00f3m c\u00e1c Unit v\u1edbi nhau. Laravel g\u1ecdi chung n\u00f3 l\u00e0 Feature Test, \u0111\u00e3 c\u00f3 pull request \u0111\u1ecbnh t\u00e1ch ra l\u00e0m 3 lo\u1ea1i ri\u00eang bi\u1ec7t Unit Test, Integration Test v\u00e0 Feature Test \u1edf \u0111\u00e2y nh\u01b0ng cu\u1ed1i c\u00f9ng v\u1eabn keep nh\u01b0 c\u0169 l\u00e0 Unit Test v\u00e0 Feature Test. Quan \u0111i\u1ec3m \u1edf b\u00e0i vi\u1ebft n\u00e0y v\u1ec1 Integration Test, c\u1ee5 th\u1ec3 v\u1edbi Laravel \u0111\u00f3 l\u00e0: S\u1eed d\u1ee5ng HTTP test \u0111\u1ec3 test route (t\u00edch h\u1ee3p controller, form request v\u00e0 framework routing) C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng DB, v\u00ed d\u1ee5 khi test reposity integrate v\u1edbi DB C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng mock \u0111\u1ec3 mock queue, storage, mail, repository, service... N\u00f3 v\u1eabn g\u1ea7n g\u1ea7n v\u1edbi Unit Test, ch\u1ec9 l\u00e0 s\u1eed d\u1ee5ng th\u00eam c\u00e1c t\u00ednh n\u0103ng, helper c\u1ee7a framework \u0111\u1ec3 vi\u1ebft test d\u1ec5 d\u00e0ng h\u01a1n, ch\u01b0a \u0111\u1ebfn m\u1ee9c test full lu\u1ed3ng nh\u01b0 m\u1ed9t end-user th\u1ef1c s\u1ef1 c\u1ee7a h\u1ec7 th\u1ed1ng. B\u1eaft \u0111\u1ea7u Integration Test v\u1edbi t\u00e0i li\u1ec7u c\u1ee7a Laravel: HTTP Tests . function test_it_fails_when_name_is_missing () { $url = action ([ ProductController :: class , 'store' ]); $response = $this -> post ( $url , [ 'sku' => 'a-product-sku' , 'quantity' => 1 , 'description' => 'I am the master key, buy me!' , ]); $response -> assertStatus ( 422 ); $response -> assertSessionHasErrors ([ 'name' ]); } N\u00f3 kh\u00e1 gi\u1ed1ng v\u1edbi Unit Test c\u00e1ch 2 \u1edf tr\u00ean, nh\u01b0ng c\u00f3 m\u1ed9t s\u1ed1 \u0111i\u1ec3m kh\u00e1c bi\u1ec7t d\u1ec5 nh\u1eadn th\u1ea5y \u0111\u00f3 l\u00e0: Test tr\u00f4ng gi\u1ed1ng th\u1ef1c t\u1ebf h\u01a1n, v\u00ec ta th\u1ef1c hi\u1ec7n request tr\u1ef1c ti\u1ebfp \u0111\u1ebfn route url s\u1eed d\u1ee5ng helper method $this->post() c\u1ee7a Laravel. B\u1ea1n c\u00f3 th\u1ec3 xem c\u00e1ch Laravel gi\u1ea3 l\u1eadp request \u1edf \u0111\u00e2y , b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng HTTP Kernel, ch\u1ee9 kh\u00f4ng ph\u1ea3i request \u0111\u1ebfn server qua network! Kh\u1eafc ph\u1ee5c \u0111\u01b0\u1ee3c \u0111\u01b0\u1ee3c v\u1ea5n \u0111\u1ec1 (*3) v\u00ec lu\u1ed3ng x\u1eed l\u00fd request \u0111\u00e3 follow theo framework T\u1ea5t nhi\u00ean, ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng @dataProvider nh\u01b0 \u0111\u00e3 gi\u1edbi thi\u1ec7u \u1edf tr\u00ean, nh\u01b0ng li\u1ec7u c\u00f3 c\u00e1ch n\u00e0o t\u1ed1t h\u01a1n kh\u00f4ng? - S\u1eed d\u1ee5ng multiple data provider. function makeInvalidData ( $invalidInputs ) { $validInputs = [ 'sku' => 'a-product-sku' , 'quantity' => 1 , 'description' => 'I am the master key, buy me!' , ]; return array_filter ( array_merge ( $validInputs , $invalidInputs ), function ( $value ) { return $value !== null ; }); } /** * @dataProvider provideInvalidName * @dataProvider provideInvalidQuantity * @dataProvider provideInvalidSku * @dataProvider provideInvalidImage * ... */ function test_it_show_error_when_input_invalid ( $inputKey , $inputValue ) { $url = action ([ ProductController :: class , 'store' ]); $inputs = $this -> makeInvalidData ([ $inputKey => $inputValue , ]); $response = $this -> post ( $url , $inputs ); $response -> assertSessionHasErrors ([ $inputKey ]); } function provideInvalidName () { return [ // T\u00ean dataset => dataset value [$inputKey, $inputValue] 'Name is required' => [ 'name' , null ], 'Name is limit to 255 chars' => [ 'name' , str_repeat ( 'a' , 256 )], ]; } function provideInvalidQuantity () { return [ 'Quantity is required' => [ 'quantity' , null ], 'Quantity should be integer' => [ 'quantity' , 1.1 ], 'Quantity should be greater than 1' => [ 'quantity' , 0 ], ]; } PHPUnit h\u1ed7 tr\u1ee3 nhi\u1ec1u data provider cho m\u1ed9t test case, n\u00ean \u00fd t\u01b0\u1edfng \u1edf \u0111\u00e2y l\u00e0: m\u1ed7i input s\u1ebd c\u00f3 m\u1ed9t data provider v\u00e0 trong provider ch\u00fang ta s\u1ebd m\u00f4 t\u1ea3 d\u1eef li\u1ec7u cho case l\u00e0m validation failed. V\u1edbi c\u00e1ch n\u00e0y, ch\u00fang ta focus v\u00e0o vi\u1ec7c t\u1ea1o d\u1eef li\u1ec7u test. V\u00e0 v\u1edbi vi\u1ec7c \u0111\u1eb7t t\u00ean cho m\u1ed7i dataset, khi \u0111\u1ecdc l\u1ea1i code s\u1ebd r\u1ea5t d\u1ec5 hi\u1ec3u, c\u0169ng nh\u01b0 khi m\u1ed9t tr\u01b0\u1eddng h\u1ee3p fail, PHPUnit s\u1ebd hi\u1ec3n th\u1ecb message r\u00f5 r\u00e0ng: 1) Tests\\Feature\\ProductControllerTest::test_it_show_error_when_input_invalid with dataset \"Quantity should be integer\" ('quantity', 1.1) N\u1ebfu b\u1ea1n follow theo convention: Controller ch\u1ec9 x\u1eed l\u00fd \u0111i\u1ec1u h\u01b0\u1edbng request, logic \u0111\u01b0\u1ee3c x\u1eed l\u00fd \u1edf Repository hay Service class. Th\u00ec vi\u1ec7c test unit thu\u1ea7n cho controller l\u00e0 kh\u00f4ng c\u1ea7n thi\u1ebft, thay v\u00e0o \u0111\u00f3 ch\u00fang ta s\u1ebd th\u1ef1c hi\u1ec7n test integration: routing, controller, form request. Vi\u1ec7c assert c\u0169ng d\u1ec5 d\u00e0ng h\u01a1n do Laravel \u0111\u00e3 h\u1ed7 tr\u1ee3 s\u1eb5n nhi\u1ec1u method asserts cho HTTP Test . \u1ede ph\u1ea7n tr\u00ean, ch\u00fang ta m\u1edbi ch\u1ec9 v\u00ed d\u1ee5 v\u1ec1 c\u00e1c input \u0111\u01a1n gi\u1ea3n, c\u00f2n 2 v\u1ea5n \u0111\u1ec1 ch\u01b0a \u0111\u01b0\u1ee3c nh\u1eafc t\u1edbi \u0111\u00f3 l\u00e0 test database rule unique v\u00e0 image upload.","title":"Integration Test"},{"location":"laravel/03-controller/#database-rule","text":"C\u00e1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t theo h\u01b0\u1edbng ti\u1ebfp c\u1eadn Integration Test \u0111\u00f3 l\u00e0 s\u1eed d\u1ee5ng database test \u0111\u1ec3 t\u1ea1o d\u1eef li\u1ec7u m\u1eabu theo test case. V\u00ed d\u1ee5 \u1edf ProductCreateRequest ch\u00fang ta c\u00f3 khai b\u00e1o rule unique cho sku , v\u1eady th\u00ec c\u00e1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t l\u00e0 chu\u1ea9n b\u1ecb database test v\u1edbi 1 b\u1ea3n khi c\u00f3 sku = existed-sku , sau \u0111\u00f3 trong test case b\u1ea1n s\u1ebd truy\u1ec1n input cho sku l\u00e0 existed-sku . Th\u00f4ng th\u01b0\u1eddng factory s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 t\u1ea1o data test cho model. V\u00ec factory kh\u00f4ng s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c b\u00ean trong data provider c\u1ee7a phpunit, n\u00ean ch\u00fang ta c\u1ea7n thay \u0111\u1ed5i ch\u00fat v\u1ec1 method test: /** * ... * @dataProvider provideInvalidSku * ... */ function test_it_show_error_when_input_invalid ( $inputKey , $inputValue ) { $url = action ([ ProductController :: class , 'store' ]); $inputs = $this -> makeInvalidData ([ $inputKey => is_callable ( $inputValue ) ? $inputValue () : $inputValue , ]); $response = $this -> post ( $url , $inputs ); $response -> assertSessionHasErrors ([ $inputKey ]); } function provideInvalidSku () { return [ // T\u00ean dataset => dataset value [$inputKey, $inputValue] 'SKU is required' => [ 'sku' , null ], 'SKU must be unique' => [ 'sku' , function () { Product :: factory () -> create ([ 'sku' => 'existed-sku' ]); return 'existed-sku' ; }, ], ]; }","title":"Database rule"},{"location":"laravel/03-controller/#file-upload","text":"Laravel h\u1ed7 tr\u1ee3 t\u1ea1o fake upload file, ch\u00fang ta c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng n\u00f3 nh\u01b0 sau: function provideInvalidImage () { return [ // T\u00ean dataset => dataset value [$inputKey, $inputValue] 'Image must be jpg or png' => [ 'image' , function () { Storage :: fake (); return UploadedFile :: fake () -> image ( 'product.gif' ); }, ], ]; } R\u1ea5t \u0111\u01a1n gi\u1ea3n ph\u1ea3i kh\u00f4ng. T\u01b0\u01a1ng t\u1ef1 ch\u00fang ta s\u1ebd c\u00f3 th\u00eam c\u00e1c case validation success.","title":"File upload"},{"location":"laravel/03-controller/#k\u1ebft-lu\u1eadn","text":"Nh\u01b0 c\u00e1c b\u1ea1n th\u1ea5y, c\u00f3 nhi\u1ec1u c\u00e1ch \u0111\u1ec3 test form validation trong laravel, v\u00ec v\u1eady vi\u1ec7c l\u00e0m theo h\u01b0\u1edbng n\u00e0o ph\u1ee5 thu\u1ed9c v\u00e0o ch\u00ednh b\u1ea1n hay d\u1ef1 \u00e1n quy\u1ebft \u0111\u1ecbnh, b\u00e0i vi\u1ebft ch\u1ec9 n\u00eau ra m\u1ed9t s\u1ed1 c\u00e1ch \u0111\u1ec3 b\u1ea1n tham kh\u1ea3o.","title":"K\u1ebft lu\u1eadn"},{"location":"laravel/04-model/","text":"Model \u00b6","title":"Model"},{"location":"laravel/04-model/#model","text":"","title":"Model"},{"location":"laravel/05-repository-service/","text":"Repository / Service \u00b6","title":"Repository / Service"},{"location":"laravel/05-repository-service/#repository--service","text":"","title":"Repository / Service"},{"location":"laravel/06-middleware/","text":"Middleware \u00b6","title":"Middleware"},{"location":"laravel/06-middleware/#middleware","text":"","title":"Middleware"},{"location":"laravel/07-mail/","text":"Mail \u00b6 https://laravel.com/docs/8.x/mocking#mail-fake https://laravel.com/docs/8.x/mail","title":"Mail"},{"location":"laravel/07-mail/#mail","text":"https://laravel.com/docs/8.x/mocking#mail-fake https://laravel.com/docs/8.x/mail","title":"Mail"},{"location":"laravel/08-command/","text":"Command \u00b6 https://laravel.com/docs/8.x/console-tests","title":"Command"},{"location":"laravel/08-command/#command","text":"https://laravel.com/docs/8.x/console-tests","title":"Command"},{"location":"laravel/09-queue/","text":"Queue \u00b6 https://laravel.com/docs/8.x/mocking#queue-fake https://laravel.com/docs/8.x/queues","title":"Queue"},{"location":"laravel/09-queue/#queue","text":"https://laravel.com/docs/8.x/mocking#queue-fake https://laravel.com/docs/8.x/queues","title":"Queue"},{"location":"laravel/10-others/","text":"Others \u00b6","title":"Others"},{"location":"laravel/10-others/#others","text":"","title":"Others"},{"location":"read-more/mockery/","text":"Mockery \u00b6 Expectation \u00b6 L\u01b0u \u00fd: \u0110\u1ec3 c\u00e1c expectation \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n ch\u00fang ta ph\u1ea3i g\u1ecdi \u0111\u1ebfn h\u00e0m Mockery::close() , t\u1ed1i nh\u1ea5t n\u00f3 n\u00ean \u0111\u01b0\u1ee3c \u0111\u1ec3 trong m\u1ed9t callback method nh\u01b0 teardown ho\u1eb7c _after (t\u00f9y thu\u1ed9c v\u00e0o vi\u1ec7c ta k\u1ebft h\u1ee3p Mockery v\u1edbi framework n\u00e0o. V\u1edbi Laravel l\u00e0 teardown ). L\u1ec7nh n\u00e0y d\u1ecdn d\u1eb9p v\u00f9ng ch\u1ee9a Mockery \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng b\u1edfi h\u00e0m test hi\u1ec7n t\u1ea1i v\u00e0 s\u1ebd ch\u1ea1y b\u1ea5t k\u1ef3 t\u00e1c v\u1ee5 n\u00e0o cho expectation Khi \u0111\u00e3 t\u1ea1o m\u1ed9t mock object ngh\u0129a l\u00e0 ch\u00fang ta mu\u1ed1n x\u00e1c \u0111\u1ecbnh ch\u00ednh x\u00e1c c\u00e1ch n\u00f3 ho\u1ea1t \u0111\u1ed9ng (n\u00f3 \u0111\u01b0\u1ee3c g\u1ecdi nh\u01b0 th\u1ebf n\u00e0o). \u0110\u00e2y ch\u00ednh l\u00e0 vi\u1ec7c \u0111\u1ecbnh ngh\u0129a m\u1ed9t expectation Ph\u01b0\u01a1ng th\u1ee9c \u00b6 \u0110\u1ec3 n\u00f3i v\u1edbi test ch\u00fang ta s\u1ebd th\u1ef1c hi\u1ec7n g\u1ecdi m\u1ed9t method v\u1edbi t\u00ean ch\u1ec9 \u0111\u1ecbnh, s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c shouldReceive $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ); \u0110\u00e2y s\u1ebd l\u00e0 expectation m\u00e0 d\u1ef1a v\u00e0o \u0111\u00f3 t\u1ea5t c\u1ea3 c\u00e1c k\u1ef3 v\u1ecdng r\u00e0ng bu\u1ed9c kh\u00e1c \u0111\u01b0\u1ee3c th\u00eam v\u00e0o. Ch\u00fang ta c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a nhi\u1ec1u method $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method_1' , 'name_of_method_2' ); C\u00f3 th\u1ec3 khai b\u00e1o c\u00e1c expectation c\u00f9ng v\u1edbi gi\u00e1 tr\u1ecb m\u00e0 n\u00f3 tr\u1ea3 v\u1ec1 $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ([ 'name_of_method_1' => 'return value 1' , 'name_of_method_2' => 'return value 2' , ]); C\u00e1ch kh\u00e1c \u0111\u1ec3 thi\u1ebft l\u1eadp ph\u01b0\u01a1ng th\u1ee9c v\u00e0 k\u1ef3 v\u1ecdng c\u1ee7a n\u00f3: $mock = \\Mockery :: mock ( 'MyClass' , [ 'name_of_method_1' => 'return value 1' , 'name_of_method_2' => 'return value 2' ]); Ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a nh\u1eefng method kh\u00f4ng n\u00ean \u0111\u01b0\u1ee3c g\u1ecdi $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldNotReceive ( 'name_of_method' ); Ph\u01b0\u01a1ng th\u1ee9c n\u00e0y ch\u00ednh l\u00e0 vi\u1ec7c g\u1ecdi ng\u1eafn g\u1ecdn shouldReceive()->never() Tham s\u1ed1 \u00b6 V\u1edbi m\u1ecdi ph\u01b0\u01a1ng th\u1ee9c khai b\u00e1o k\u1ef3 v\u1ecdng, ch\u00fang ta c\u00f3 th\u1ec3 th\u00eam k\u1ef3 v\u1ecdng v\u1ec1 tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> with ( $arg1 , $arg2 , ... ); // or $mock -> shouldReceive ( 'name_of_method' ) -> withArgs ([ $arg1 , $arg2 , ... ]); \u0110\u1ec3 t\u0103ng t\u00ednh linh ho\u1ea1t, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c matcher class . V\u00ed d\u1ee5 ph\u01b0\u01a1ng th\u1ee9c \\Mockery::any() s\u1ebd kh\u1edbp b\u1ea5t k\u1ef3 tham s\u1ed1 n\u00e0o \u0111\u01b0\u1ee3c truy\u1ec1n v\u1edbi with . Mockery cho ph\u00e9p th\u01b0 vi\u1ec7n Hamcrest , v\u00ed d\u1ee5 h\u00e0m anything() ch\u00ednh l\u00e0 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng \\Mockery::any() . M\u1ed9t \u0111i\u1ec1u quan tr\u1ecdng c\u1ea7n l\u01b0u \u00fd, \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 t\u1ea5t c\u1ea3 c\u00e1c expectation \u0111\u01b0\u1ee3c \u0111\u00ednh k\u00e8m s\u1ebd ch\u1ec9 apply cho method khi n\u00f3 g\u1ecdi ch\u00ednh x\u00e1c c\u00e1c tham s\u1ed1. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( 'Hello' ); $mock -> foo ( 'Goodbye' ); // throws a NoMatchingExpectationException \u0110i\u1ec1u n\u00e0y cho ph\u00e9p thi\u1ebft l\u1eadp c\u00e1c k\u1ef3 v\u1ecdng kh\u00e1c nhau d\u1ef1a tr\u00ean tham s\u1ed1 \u0111\u01b0\u1ee3c cung c\u1ea5p cho c\u00e1c cu\u1ed9c g\u1ecdi d\u1ef1 ki\u1ebfn. Match tham s\u1ed1 v\u1edbi closure \u00b6 Thay v\u00ec cung c\u1ea5p m\u1ed9t tr\u00ecnh \u0111\u1ed1i kh\u1edbp cho t\u1eebng tham s\u1ed1, ta c\u00f3 th\u1ec3 cung c\u1ea5p m\u1ed9t closure cho t\u1ea5t c\u1ea3 c\u00e1c tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n m\u1ed9t l\u00fac: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> withArgs ( closure ); Closure nh\u1eadn t\u1ea5t c\u1ea3 c\u00e1c tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n khi g\u1ecdi \u0111\u1ebfn ph\u01b0\u01a1ng th\u1ee9c. B\u1eb1ng c\u00e1ch n\u00e0y expectation s\u1ebd ch\u1ec9 \u0111\u01b0\u1ee3c apply cho method c\u00f3 tham s\u1ed1 truy\u1ec1n v\u00e0o th\u1ecfa m\u00e3n closure $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> withArgs ( function ( $arg ) { if ( $arg % 2 == 0 ) { return true ; } return false ; }); $mock -> foo ( 4 ); // matches the expectation $mock -> foo ( 3 ); // throws a NoMatchingExpectationException Match tham s\u1ed1 v\u1edbi gi\u00e1 tr\u1ecb \u0111\u1ecbnh s\u1eb5n \u00b6 Ch\u00fang ta c\u00f3 th\u1ec3 cung c\u1ea5p c\u00e1c tham s\u1ed1 \u0111\u01b0\u1ee3c mong \u0111\u1ee3i match v\u1edbi tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o khi m\u1ed9t mock method \u0111\u01b0\u1ee3c g\u1ecdi $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> withSomeOfArgs ( arg1 , arg2 , arg3 , ... ); Th\u1ee9 t\u1ef1 c\u1ee7a c\u00e1c tham s\u1ed1 kh\u00f4ng quan tr\u1ecdng, n\u00f3 ch\u1ec9 check c\u00f3 bao g\u1ed3m gi\u00e1 tr\u1ecb mong \u0111\u1ee3i hay kh\u00f4ng, ki\u1ec3u gi\u00e1 tr\u1ecb c\u0169ng c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c match $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> withSomeOfArgs ( 1 , 2 ); $mock -> foo ( 1 , 2 , 3 ); // matches the expectation $mock -> foo ( 3 , 2 , 1 ); // matches the expectation (passed order doesn't matter) $mock -> foo ( '1' , '2' ); // throws a NoMatchingExpectationException (type should be matched) $mock -> foo ( 3 ); // throws a NoMatchingExpectationException Any / no \u00b6 Ch\u00fang ta c\u00f3 th\u1ec3 khai b\u00e1o r\u1eb1ng expectation match v\u1edbi b\u1ea5t k\u1ef3 tham s\u1ed1 n\u00e0o $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> withAnyArgs (); \u0110i\u1ec1u n\u00e0y lu\u00f4n \u0111\u01b0\u1ee3c set m\u1eb7c \u0111\u1ecbnh tr\u1eeb khi c\u00f3 ch\u1ec9 \u0111\u1ecbng kh\u00e1c. Ngo\u00e0i ra ch\u00fang ta c\u00f3 th\u1ec3 khai b\u00e1o exptation match v\u1edbi vi\u1ec7c g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng c\u00f3 \u0111\u1ed1i s\u1ed1. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> withNoArgs (); Return value Expectation \u00b6 V\u1edbi mock object. ch\u00fang ta c\u00f3 th\u1ec3 khai b\u00e1o v\u1edbi Mockery k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a m\u1ed9t method v\u1edbi andReturn() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturn ( $value ); N\u00f3 thi\u1ebft l\u1eadp gi\u00e1 tr\u1ee5 \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1 t\u1eeb vi\u1ec7c g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c. C\u00f3 th\u1ec3 thi\u1ebft l\u1eadp k\u1ef3 v\u1ecdng cho nhi\u1ec1u gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturn ( $value1 , $value2 , ... ) Nh\u01b0 v\u1eady l\u1ea7n g\u1ecdi \u0111\u1ea7u ti\u00ean s\u1ebd tr\u1ea3 v\u1ec1 $value1 v\u00e0 l\u1ea7n g\u1ecdi ti\u1ebfp theo s\u1ebd tr\u1ea3 v\u1ec1 $value2 . N\u1ebfu g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c nhi\u1ec1u l\u1ea7n h\u01a1n s\u1ed1 return value m\u00e0 ch\u00fang ta \u0111\u00e3 khai b\u00e1o, Mockery s\u1ebd tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb cu\u1ed1i c\u00f9ng cho b\u1ea5t k\u1ef3 l\u1ec7nh g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c ti\u1ebfp theo n\u00e0o $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> andReturn ( 1 , 2 , 3 ); $mock -> foo (); // int(1) $mock -> foo (); // int(2) $mock -> foo (); // int(3) $mock -> foo (); // int(3) Ho\u1eb7c s\u1eed d\u1ee5ng c\u00fa ph\u00e1p $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturnValues ([ $value1 , $value2 , ... ]) V\u1edbi c\u00fa ph\u00e1p tr\u00ean, th\u1ee9 t\u1ef1 tr\u1ea3 v\u1ec1 \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh b\u1edfi ch\u1ec9 s\u1ed1 c\u1ee7a m\u1ea3ng v\u00e0 c\u0169ng t\u01b0\u01a1ng t\u1ef1 c\u00e1ch \u0111\u1ea7u, gi\u00e1 tr\u1ecb cu\u1ed1i c\u00f9ng s\u1ebd \u0111\u01b0\u1ee3c apply cho t\u1ea5t c\u1ea3 c\u00e1c l\u1ea7n g\u1ecdi h\u00e0m sau \u0111\u00f3. Hai c\u00fa ph\u00e1p sau \u0111\u00e2y s\u1ebd ch\u1ee7 y\u1ebfu \u0111\u1ec3 giao ti\u1ebfp v\u1edbi ng\u01b0\u1eddi \u0111\u1ecdc test: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturnNull (); // or $mock -> shouldReceive ( 'name_of_method' ) -> andReturn ([ null ]); N\u00f3 \u0111\u00e1nh d\u1ea5u nh\u1eefng l\u1ea7n g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c c\u1ee7a mock object tr\u1ea3 v\u1ec1 null ho\u1eb7c kh\u00f4ng g\u00ec c\u1ea3. \u0110\u00f4i khi ch\u00fang ta mu\u1ed1n t\u00ednh k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1, d\u1ef1a v\u00e0o c\u00e1c tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n, khi \u1ea5y ch\u00fang ta c\u1ea7n d\u00f9ng andReturnUsing() . N\u00f3 nh\u1eadn nhi\u1ec1u h\u01a1n m\u1ed9t closure . $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturnUsing ( closure , ... ); Closure \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo h\u00e0ng \u0111\u1ee3i b\u1eb1ng c\u00e1ch truy\u1ec1n ch\u00fang d\u01b0\u1edbi d\u1ea1ng tham s\u1ed1 cho h\u00e0m andReturn() . \u0110\u00f4i khi ph\u01b0\u01a1ng th\u1ee9c s\u1ebd tr\u1ea3 v\u1ec1 ch\u00ednh m\u1ed9t trong c\u00e1c \u0111\u1ed1i s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. Khi \u0111\u00f3 ph\u01b0\u01a1ng th\u1ee9c andReturnArg() s\u1ebd h\u1eefu \u00edch, tham s\u1ed1 \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1 ch\u00fang l\u00e0 index trong list tham s\u1ed1 $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturnArg ( 1 ); \u0110o\u1ea1n tr\u00ean s\u1ebd tr\u1ea3 v\u1ec1 \u0111\u1ed1i s\u1ed1 th\u1ee9 2 (c\u00f3 index l\u00e0 1) t\u1eeb danh s\u00e1ch c\u00e1c \u0111\u1ed1i s\u1ed1 khi th\u1ef1c hi\u1ec7n g\u1ecdi h\u00e0m. L\u01b0u \u00fd: Kh\u00f4ng th\u1ec3 mix andReturnUsing() ho\u1eb7c andReturnArg v\u1edbi andReturn() N\u1ebfu mu\u1ed1n mock fluid interface , ph\u01b0\u01a1ng th\u1ee9c sau s\u1ebd h\u1eefu d\u1ee5ng: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturnSelf (); N\u00f3 thi\u1ebft l\u1eadp gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 l\u00e0 t\u00ean class \u0111\u01b0\u1ee3c mock. Throw exception \u00b6 Ch\u00fang ta c\u00f3 th\u1ec3 gi\u1ea3 l\u1eadp ph\u01b0\u01a1ng th\u1ee9c s\u1ebd throw exception: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andThrow ( new Exception ); Thay v\u00ec m\u1ed9t \u0111\u1ed1i \u0111\u01b0\u1ee3ng, ta cs th\u1ec3 truy\u1ec1n v\u00e0o m\u1ed9t Exception class, message v\u00e0 / ho\u1eb7c code. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andThrow ( 'exception_name' , 'message' , 123456789 ); K\u1ef3 v\u1ecdng s\u1ed1 l\u1ea7n g\u1ecdi \u00b6 B\u00ean c\u1ea1nh vi\u1ec7c thi\u1ebft l\u1eadp expectation cho c\u00e1c tham s\u1ed1 truy\u1ec1n v\u00e0o h\u00e0m v\u00e0 k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a ch\u00fang, ch\u00fang ta c\u00f3 th\u1ec3 thi\u1ebft l\u1eadp k\u1ef3 v\u1ecdng v\u1ec1 s\u1ed1 l\u1ea7n g\u1ecdi \u0111\u1ebfn h\u00e0m \u0111\u00f3. Khi thi\u1ebft l\u1eadp k\u1ef3 v\u1ecdng s\u1ed1 l\u1ea7n g\u1ecdi cho m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ebfn s\u1ebd throw \\Mockery\\Expectation\\InvalidCountException . L\u01b0u \u00fd: Ph\u01b0\u01a1ng th\u1ee9c n\u00e0y b\u1eaft bu\u1ed9c ph\u1ea3i g\u1ecdi \\Mockery::close() \u1edf cu\u1ed1i test, ch\u1eb3ng h\u1ea1n nh\u01b0 c\u00f3 th\u1ec3 g\u1ecdi \u1edf ph\u01b0\u01a1ng th\u1ee9c teardown v\u1edbi PHPUnit. N\u1ebfu kh\u00f4ng Mockery s\u1ebd kh\u00f4ng x\u00e1c minh c\u00e1c l\u1ec7nh g\u1ecdi \u0111\u1ed1i v\u1edbi mock object (v\u00ec th\u1ebf vi\u1ec7c count c\u0169ng kh\u00f4ng th\u1ec3 th\u1ef1c hi\u1ec7n) \u0110\u1ec3 khai b\u00e1o ph\u01b0\u01a1ng th\u1ee9c s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi 0 ho\u1eb7c nhi\u1ec1u l\u1ea7n: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> zeroOrMoreTimes (); \u0110i\u1ec1u n\u00e0y c\u0169ng l\u00e0 m\u1eb7c \u0111\u1ecbnh v\u1edbi t\u1ea5t c\u1ea3 c\u00e1c method. \u0110\u1ec3 n\u00f3i v\u1edbi Mockery m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng ch\u00ednh x\u00e1c s\u1ed1 l\u1ea7n g\u1ecdi h\u00e0m, ta s\u1ebd s\u1eed d\u1ee5ng nh\u01b0 sau: $mock = \\Mockery::mock('MyClass'); $mock->shouldReceive('name_of_method') ->times($n); V\u1edbi $n s\u1ebd l\u00e0 s\u1ed1 l\u1ea7n h\u00e0m \u0111\u01b0\u1ee3c g\u1ecdi. M\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p ph\u1ed5 bi\u1ebfn s\u1ebd c\u00f3 ph\u01b0\u01a1ng th\u1ee9c g\u1ecdi tr\u1ef1c ti\u1ebfp. \u0110\u1ecbnh ngh\u0129a method mong \u0111\u1ee3i \u0111\u01b0\u1ee3c g\u1ecdi m\u1ed9t l\u1ea7n $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> once (); V\u1edbi ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c g\u1ecdi hai l\u1ea7n $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> twice (); Ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> never (); Count modifier \u00b6 Mockery b\u1ed5 sung m\u1ed9t s\u1ed1 ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ec3 thi\u1ebft l\u1eadp k\u1ef3 v\u1ecdng cho s\u1ed1 l\u1ea7n g\u1ecdi method N\u1ebfu mu\u1ed1n khai b\u00e1o s\u1ed1 l\u1ea7n t\u1ed1i thi\u1ec3u m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi, s\u1eed d\u1ee5ng atLeast() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> atLeast () -> times ( 3 ); \u0110o\u1ea1n code tr\u00ean c\u00f3 ngh\u0129a l\u00e0 ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c g\u1ecdi \u00edt nh\u1ea5t 3 l\u1ea7n. T\u01b0\u01a1ng t\u1ef1, ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 khai b\u00e1o cho Mockery bi\u1ebft s\u1ed1 l\u1ea7n nhi\u1ec1u nh\u1ea5t m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1ecdi v\u1edbi atMost() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> atMost () -> times ( 3 ); Ngo\u00e0i ra, \u0111\u1ec3 set ph\u1ea1m vi s\u1ed1 l\u1ea7n \u0111\u01b0\u1ee3c g\u1ecdi: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> between ( $min , $max ); B\u1ea3n ch\u1ea5t c\u1ee7a between() ch\u00ednh l\u00e0 vi\u1ec7c s\u1eed d\u1ee5ng atLeast()->times($min)->atMost()->times($max) Argument Validation \u00b6 Validate tham s\u1ed1 \u00b6 \u0110\u00e2y ch\u00ednh l\u00e0 vi\u1ec7c match tham s\u1ed1 khi t\u1ea1o m\u1ed9t k\u1ef3 v\u1ecdng cho tham s\u1ed1 truy\u1ec1n v\u00e0o ph\u01b0\u01a1ng th\u1ee9c. Mockery s\u1ebd h\u1ed7 tr\u1ee3 th\u01b0 vi\u1ec7n Hamcrest. C\u00e1c v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y t\u00ecm hi\u1ec3u v\u1ec1 c\u00e1c h\u00e0m match c\u1ee7a Mockery v\u00e0 h\u00e0m t\u01b0\u01a1ng \u0111\u1ed3ng ph\u00eda Hamcrest L\u01b0u \u00fd: N\u1ebfu b\u1ea1n kh\u00f4ng mu\u1ed1n s\u1eed d\u1ee5ng h\u00e0m global c\u1ee7a Hamcrest th\u00ec c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng class \\Hamcrest\\Matchers . V\u00ed d\u1ee5 identicalTo($arg) ch\u00ednh l\u00e0 \\Hamcrest\\Matchers::identicalTo($arg) Tr\u00ecnh match ph\u1ed5 bi\u1ebfn nh\u1ea5t ch\u00ednh l\u00e0 h\u00e0m with() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( 1 ) : Mockery s\u1ebd hi\u1ec3u n\u00f3 c\u1ea7n \u0111\u01b0\u1ee3c g\u1ecdi h\u00e0m foo v\u1edbi tham s\u1ed1 ki\u1ec3u integer gi\u00e1 tr\u1ecb 1 . Trong t\u01b0\u1eddng h\u1ee3p n\u00e0y, Mockery \u0111\u1ea7y ti\u00ean s\u1ebd th\u1eed so s\u00e1nh v\u1edbi ph\u00e9p === . N\u1ebfu n\u00f3 fail ph\u00e9p th\u1eed n\u00e0y Mockery s\u1ebd c\u1ed1 g\u1eafng fallback v\u1edbi ph\u00e9p so s\u00e1nh == . Khi th\u1ef1c hi\u1ec7n match m\u1ed9t object Mockery ch\u1ec9 s\u1eed d\u1ee5ng ph\u00e9p so s\u00e1nh === . $object = new stdClass (); $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> with ( $object ); // Hamcrest equivalent $mock -> shouldReceive ( \"foo\" ) -> with ( identicalTo ( $object )); instance kh\u00e1c c\u1ee7a stdCalss s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 match. L\u01b0u \u00fd: Mockery\\Matcher\\MustBe s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng n\u1eefa C\u00f2n n\u1ebfu b\u1ea1n ch\u1ec9 mu\u1ed1n so s\u00e1nh == cho object th\u00ec s\u1ebd ph\u1ea3i d\u00f9ng ph\u01b0\u01a1ng th\u1ee9c equalTo c\u1ee7a Hamcrest $mock -> shouldReceive ( \"foo\" ) -> with ( equalTo ( new stdClass )); Trong tr\u01b0\u1eddng h\u1ee3p ch\u00fang ta kh\u00f4ng quan t\u00e2m \u0111\u1ebfn ki\u1ec3u d\u1eef li\u1ec7u, gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o, ch\u1ec9 c\u1ea7n c\u00f3 b\u1ea5t k\u00ec tham s\u1ed1 n\u00e0o \u0111\u00f3 tr\u01b0\u1ee3c truy\u1ec1n v\u00e0o, s\u1eed d\u1ee5ng any() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> with ( \\Mockery :: any ()); // Hamcrest equivalent $mock -> shouldReceive ( \"foo\" ) -> with ( anything ()) Validate ki\u1ec3u d\u1eef li\u1ec7u \u00b6 H\u00e0m type() s\u1ebd nh\u1eadn m\u1ed9t chu\u1ed7i, chu\u1ed7 \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c gh\u00e9p v\u00e0o is_ \u0111\u1ec3 t\u1ea1o th\u00e0nh m\u1ed9t ph\u00e9p ki\u1ec3u tra h\u1ee3p l\u1ec7 \u0110\u1ec3 match b\u1ea5t k\u1ef3 PHP resource n\u00e0o ta s\u1ebd truy\u1ec1n resource v\u00e0o h\u00e0m type() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> with ( \\Mockery :: type ( 'resource' )); // Hamcrest equivalents $mock -> shouldReceive ( \"foo\" ) -> with ( resourceValue ()); $mock -> shouldReceive ( \"foo\" ) -> with ( typeOf ( 'resource' )); N\u00f3 s\u1ebd tr\u1ea3 v\u1ec1 true t\u1eeb m\u1ed9t is_resoruce \u0111\u01b0\u1ee3c g\u1ecdi n\u1ebfu \u0111\u1ed1i s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o l\u00e0 m\u1ed9t resource c\u1ee7a PHP. V\u00ed d\u1ee5 ti\u1ebfp \u0111\u1ec3 d\u1ec5 hi\u1ec3u h\u01a1n \\Mockery::type('float') ho\u1eb7c floatValue() v\u00e0 typeOf('float') ki\u1ec3m tra s\u1eed d\u1ee5ng is_float() , v\u00e0 \\Mockery::type('callable') hay callable() c\u1ee7a Hamcrest s\u1eed d\u1ee5ng is_callable() . type() c\u0169ng ch\u1ea5p nh\u1eadn t\u00ean c\u1ee7a m\u1ed9t class hay m\u1ed9t interface \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong instanceOf . H\u00e0m t\u01b0\u01a1ng t\u1ef1 c\u1ee7a Hamcrest l\u00e0 anInstanceOf . Tham kh\u1ea3o \u0111\u1ea7y \u0111\u1ee7 c\u00e1c h\u00e0m check t\u1ea1i php.net v\u00e0 c\u00e1c h\u00e0m c\u1ee7a Hamcrest N\u1ebfu mu\u1ed1n th\u1ef1c hi\u1ec7n match \u0111\u1ed1i s\u1ed1 m\u1ed9t c\u00e1ch ph\u1ee9c t\u1ea1p h\u01a1n, on() ch\u00ednh l\u00e0 h\u00e0m h\u1ed7 tr\u1ee3 \u0111i\u1ec1u n\u00e0y. N\u00f3 ch\u1ea5p nh\u1eadn anonymous function l\u00e0 m\u1ed9t \u0111\u1ed1i s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> with ( \\Mockery :: on ( closure )); N\u1ebfu closure tr\u1ea3 v\u1ec1 true ngh\u0129a l\u00e0 tham s\u1ed1 \u0111\u01b0\u1ee3c gi\u1ea3 \u0111\u1ecbnh kh\u1edbp v\u1edbi k\u1ef3 v\u1ecdng v\u00e0 ng\u01b0\u1ee3c l\u1ea1i $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: on ( function ( $argument ) { if ( $argument % 2 == 0 ) { return true ; } return false ; })); $mock -> foo ( 4 ); // matches the expectation $mock -> foo ( 3 ); // throws a NoMatchingExpectationException Kh\u00f4ng c\u00f3 phi\u00ean b\u1ea3n Hamcrest n\u00e0o cho on() . Ngo\u00e0i ra, ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c withArgs() . Closure s\u1ebd ki\u1ec3m tra c\u00e1c \u0111\u1ed1i s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c k\u1ef3 v\u1ecdng v\u00e0 \u0111\u1ed1i s\u1ed1 l\u00e0 kh\u1edbp n\u1ebfu closure tr\u1ea3 v\u1ec1 true. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> withArgs ( closure ); Closue match c\u0169ng h\u1ed7 tr\u1ee3 tham s\u1ed1 l\u00e0 optional $closure = function ( $odd , $even , $sum = null ) { $result = ( $odd % 2 != 0 ) && ( $even % 2 == 0 ); if ( ! is_null ( $sum )) { return $result && ( $odd + $even == $sum ); } return $result ; }; $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> withArgs ( $closure ); $mock -> foo ( 1 , 2 ); // It matches the expectation: the optional argument is not needed $mock -> foo ( 1 , 2 , 3 ); // It also matches the expectation: the optional argument pass the validation $mock -> foo ( 1 , 2 , 4 ); // It doesn't match the expectation: the optional doesn't pass the validation N\u1ebfu mu\u1ed1n so kh\u1edbp m\u1ed9t \u0111\u1ed1i s\u1ed1 v\u1edbi m\u1ed9t bi\u1ec3u th\u1ee9c ch\u00ednh quy, Mockery h\u1ed7 tr\u1ee3 ph\u01b0\u01a1ng th\u1ee9c pattern() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: pattern ( '/^foo/' )); // Hamcrest equivalent $mock -> shouldReceive ( 'foo' ) -> with ( matchesPattern ( '/^foo/' )); ducktype() l\u00e0 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ec3 match ki\u1ec3u c\u1ee7a class $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: ducktype ( 'foo' , 'bar' )); N\u00f3 s\u1ebd kh\u1edbp b\u1ea5t k\u1ef3 tham s\u1ed1 n\u00e0o l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng ch\u1ee9a danh s\u00e1ch c\u00e1c ch\u1ee9a danh s\u00e1ch c\u00e1c method \u0111\u00e3 \u0111\u01b0\u1ee3c cung c\u1ea5p. T\u01b0\u01a1ng t\u1ef1 v\u1edbi on() , kh\u00f4ng c\u00f3 version Hamcrest n\u00e0o cho ducktype() . Capturing Arguments \u00b6 N\u1ebfu ch\u00fang ta mu\u1ed1n th\u1ef1c hi\u1ec7n nhi\u1ec1u match cho c\u00f9ng m\u1ed9t \u0111\u1ed1i s\u1ed1, capture cung c\u1ea5p m\u1ed9t gi\u1ea3i ph\u00e1p \u0111\u1ec3 c\u00f9ng h\u00e0m on() ph\u1ee5c v\u1ee5 \u0111i\u1ec1u \u0111\u00f3. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> with ( \\Mockery :: capture ( $bar )); N\u00f3 ch\u1ec9 \u0111\u1ecbng t\u1ea5t c\u1ea3 nh\u1eefng \u0111\u1ed1i s\u1ed1 n\u00e0o \u0111\u01b0\u1ee3c truy\u1ec1n cho foo v\u00e0o bi\u1ebfn $bar , t\u1eeb \u0111\u00f3 ta s\u1ebd b\u1ed5 sung validation s\u1eed d\u1ee5ng assertion. B\u1ed5 sung \u0111\u1ed1i s\u00e1nh tham s\u1ed1 \u00b6 not() s\u1ebd kh\u1edbp v\u1edbi b\u1ea5t k\u1ef3 \u0111\u1ed1i s\u1ed1 n\u00f3 kh\u00f4ng b\u1eb1ng ho\u1eb7c kh\u00f4ng gi\u1ed1ng v\u1edbi tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o n\u00f3 $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: not ( 2 )); // Hamcrest equivalent $mock -> shouldReceive ( 'foo' ) -> with ( not ( 2 )); anyOf() s\u1ebd match n\u1ebfu nh\u01b0 tham s\u1ed1 c\u1ee7a expectation b\u1eb1ng m\u1ed9t trong b\u1ea5t k\u1ef3 tham s\u1ed1 n\u00e0o c\u1ee7a h\u00e0m $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: anyOf ( 1 , 2 )); // Hamcrest equivalent $mock -> shouldReceive ( 'foo' ) -> with ( anyOf ( 1 , 2 )); notAnyOf() s\u1ebd ng\u01b0\u1ee3c l\u1ea1i v\u1edbi anyOf() n\u00f3 s\u1ebd match n\u1ebfu nh\u01b0 tham s\u1ed1 c\u1ee7a expectation kh\u00f4ng b\u1eb1ng b\u1ea5t k\u1ef3 tham s\u1ed1 n\u00e0o c\u1ee7a ph\u01b0\u01a1ng th\u1ee9c: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: notAnyOf ( 1 , 2 )); notAnyOf() s\u1ebd kh\u00f4ng c\u00f3 b\u00ean Hamcrest subset() s\u1ebd match n\u1ebfu nh\u01b0 tham s\u1ed1 l\u00e0 m\u1ed9t m\u1ea3ng c\u00f3 ch\u1ee9a m\u1ea3ng \u0111\u00e3 cho.f $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: subset ( array ( 0 => 'foo' ))); Vi\u1ec7c n\u00e0y s\u1ebd th\u1ef1c hi\u1ec7n c\u1ea3 tr\u00ean c\u1ea3 t\u00ean bi\u1ebfn v\u00e0 gi\u00e1 tr\u1ecb, n\u00f3 t\u01b0\u01a1ng \u1ee9ng v\u1edbi key v\u00e0 value c\u1ee7a m\u1ea3ng tham s\u1ed1. contains() c\u0169ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 subset() nh\u01b0ng s\u1ebd kh\u00f4ng quan t\u00e2m \u0111\u1ebfn t\u00ean c\u1ee7a key c\u1ee7a m\u1ea3ng. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: contains ( value1 , value2 )); hasKey() kh\u1edbp v\u1edbi \u0111\u1ed1i s\u1ed1 l\u00e0 m\u1ed9t m\u1ea3ng c\u00f3 ch\u1ee9a key name \u0111\u00e3 cho $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: hasKey ( key )); hasValue() kh\u1edbp v\u1edbi \u0111\u1ed1i s\u1ed1 l\u00e0 m\u1ed9t m\u1ea3ng c\u00f3 ch\u1ee9a value \u0111\u00e3 cho $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: hasValue ( value )); Spies \u00b6 Spies l\u00e0 m\u1ed9t lo\u1ea1i test double, tuy nhi\u00ean kh\u00e1c v\u1edbi mock \u1edf ch\u1ed7 n\u00f3 ghi l\u1ea1i t\u1ea5t c\u1ea3 t\u01b0\u01a1ng t\u00e1c gi\u1eefa n\u00f3 v\u1edbi h\u1ec7 th\u1ed1ng test (SUT) v\u00e0 cho ph\u00e9p \u0111\u01b0a ra c\u00e1c assertion v\u1edbi nh\u1eefng t\u01b0\u01a1ng t\u00e1c \u0111\u00f3 sau khi SUT ch\u1ea1y. T\u1ea1o m\u1ed9t spy gi\u00fap b\u1ea1n kh\u00f4ng c\u1ea7n ph\u1ea3i thi\u1ebft l\u1eadp vi\u1ec7c call t\u1ea5t c\u1ea3 c\u00e1c ph\u01b0\u01a1ng th\u1ee9c nh\u01b0 mock. B\u1ea1n ch\u1ec9 c\u1ea7n t\u1ea1o assertion cho vi\u1ec7c call m\u1ed9t v\u00e0i ph\u01b0\u01a1ng th\u1ee9c m\u00e0 b\u1ea1n quan t\u00e2m \u0111\u1ebfn, b\u1edfi l\u1ebd kh\u00f4ng ph\u1ea3i ph\u01b0\u01a1ng th\u1ee9c n\u00e0o c\u0169ng \u1ea3nh h\u01b0\u1edfng cho m\u1ed9t test case nh\u1ea5t \u0111\u1ecbnh. Trong khi v\u1edbi mock th\u00ec h\u1ea7u nh\u01b0 ph\u1ea3i \u00e1p d\u1ee5ng style Arrange-Act-Assert v\u00ec ch\u00fang ph\u1ea3i khai b\u00e1o expect nh\u1eefng h\u00e0m \u0111\u01b0\u1ee3c g\u1ecdi c\u00f9ng k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 tr\u01b0\u1edbc khi g\u1ecdi h\u00e0m th\u1ef1c thi trong test, cu\u1ed1i c\u00f9ng m\u1edbi l\u00e0 assert xem nh\u1eefng expect \u0111\u00f3 \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u00e1p \u1ee9ng. // arrange $mock = \\Mockery :: mock ( 'MyDependency' ); $sut = new MyClass ( $mock ); // expect $mock -> shouldReceive ( 'foo' ) -> once () -> with ( 'bar' ); // act $sut -> callFoo (); // assert \\Mockery :: close (); C\u00f2n spies c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng linh ho\u1ea1t c\u1ea3 style Arrange-Act-Assert ho\u1eb7c Given-When-Then . N\u00f3 cho ph\u00e9p b\u1ecf qua expect v\u00e0 chuy\u1ec3n assertion \u0111\u1ebfn sau act \u1edf SUT, gi\u00fap cho test case d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n. // arrange $spy = \\Mockery :: spy ( 'MyDependency' ); $sut = new MyClass ( $spy ); // act $sut -> callFoo (); // assert $spy -> shouldHaveReceived () -> foo () -> with ( 'bar' ); spies \u00edt h\u1ea1n ch\u1ebf h\u01a1n so v\u1edbi mock , N\u00f3 gi\u00fap n\u00eau b\u1eadt m\u1ee5c \u0111\u00edch test v\u00e0 h\u1ea1n ch\u1ebf l\u1ed9 c\u1ea5u tr\u00fac c\u1ee7a SUT. Tuy nhi\u00ean, h\u1ea1n ch\u1ebf c\u1ee7a spies l\u00e0 debug. Khi mock b\u1ecb g\u1ecdi ngo\u00e0i expect, n\u00f3 l\u1eadp t\u1ee9c throw exception, n\u00f3 g\u1ea7n nh\u01b0 \u0111\u01b0\u1ee3c coi l\u00e0 m\u1ed9t tr\u00ecnh debug. V\u1edbi spies n\u1ebfu c\u00f3 m\u1ed9t h\u00e0m call sai, n\u00f3 s\u1ebd kh\u00f4ng th\u1ec3 c\u00f3 b\u1ed1i c\u1ea3nh th\u1eddi gian l\u1eadp t\u1ee9c nh\u01b0 mock , n\u00f3 ch\u1ec9 \u0111\u01a1n gi\u1ea3n kh\u1eb3ng \u0111\u1ecbnh m\u1ed9t h\u00e0m \u0111\u01b0\u1ee3c g\u1ecdi. Cu\u1ed1i c\u00f9ng, spy kh\u00f4ng th\u1ec3 \u0111\u1ecbnh ngh\u0129a gi\u00e1 tr\u1ecb return c\u1ee7a h\u00e0m, ch\u1ec9 c\u00f3 mock m\u1edbi l\u00e0m \u0111\u01b0\u1ee3c \u0111i\u1ec1u \u0111\u00f3. M\u1ed9t s\u1ed1 h\u00e0m th\u00f4ng d\u1ee5ng c\u1ee7a spies \u00b6 \u0110\u1ec3 verify m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c g\u1ecdi trong spy, s\u1eed d\u1ee5ng shouldHaveReceived() $spy -> shouldHaveReceived ( 'foo' ); \u0110\u1ec3 verify m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi, s\u1eed d\u1ee5ng shouldNotHaveReceived() $spy -> shouldNotHaveReceived ( 'foo' ); \u0110\u1ec3 \u0111\u1ed1i s\u00e1nh tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o m\u1ed9t h\u00e0m v\u1edbi spies ta c\u00f3 th\u1ec3 d\u00f9ng hai c\u00e1ch: s\u1eed d\u00f9ng h\u00e0m with ho\u1eb7c s\u1eed d\u1ee5ng m\u1ed9t m\u1ea3ng g\u1ed3m c\u00e1c tham s\u1ed1 c\u1ea7n c\u1ea7n \u0111\u1ed1i s\u00e1nh \u0111\u1ec3 truy\u1ec1n v\u00e0o h\u00e0m: $spy -> shouldHaveReceived ( 'foo' ) -> with ( 'bar' ); // Or $spy -> shouldHaveReceived ( 'foo' , [ 'bar' ]); L\u01b0u \u00fd c\u00e1ch 1 kh\u00f4ng th\u1ec3 d\u00f9ng cho shouldNotHaveReceived() . N\u1ebfu mu\u1ed1n s\u1eed d\u1ee5ng v\u1edbi m\u1ed9t h\u00e0m kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi b\u1ea1n c\u1ea7n ph\u1ea3i s\u1eed d\u1ee5ng c\u00e1ch 2: $spy -> shouldNotHaveReceived ( 'foo' , [ 'bar' ]); \u0110\u1ec3 x\u00e1c nh\u1eadn s\u1ed1 l\u1ea7n h\u00e0m \u0111\u01b0\u1ee3c g\u1ecdi $spy -> shouldHaveReceived ( 'foo' ) -> with ( 'bar' ) -> twice (); Thay th\u1ebf c\u00fa ph\u00e1p shouldReceive \u00b6 K\u1ec3 t\u1eeb Mockery 1.0.0, h\u1ed7 tr\u1ee3 g\u1ecdi c\u00e1c ph\u01b0\u01a1ng th\u1ee9c t\u01b0\u01a1ng t\u1ef1 nh\u01b0 c\u00e1c ph\u01b0\u01a1ng th\u1ee9c c\u1ee7a PHP m\u00e0 kh\u00f4ng c\u1ea7n \u0111\u1ed1i s\u1ed1 d\u1ea1ng String trong should method V\u1edbi spies n\u00f3 m\u1edbi ch\u1ec9 \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng cho shouldHaveReceived() $spy -> shouldHaveReceived () -> foo ( 'bar' ); // Expect number of call $spy -> shouldHaveReceived () -> foo ( 'bar' ) -> twice (); V\u00ec m\u1ed9t s\u1ed1 h\u1ea1n ch\u1ebf c\u00fa ph\u00e1p n\u00e0y ch\u01b0a \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng cho ph\u01b0\u01a1ng th\u1ee9c shouldNotHaveReceived() . Xem th\u00eam \u00b6 http://docs.mockery.io/en/latest/","title":"Mockery"},{"location":"read-more/mockery/#mockery","text":"","title":"Mockery"},{"location":"read-more/mockery/#expectation","text":"L\u01b0u \u00fd: \u0110\u1ec3 c\u00e1c expectation \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n ch\u00fang ta ph\u1ea3i g\u1ecdi \u0111\u1ebfn h\u00e0m Mockery::close() , t\u1ed1i nh\u1ea5t n\u00f3 n\u00ean \u0111\u01b0\u1ee3c \u0111\u1ec3 trong m\u1ed9t callback method nh\u01b0 teardown ho\u1eb7c _after (t\u00f9y thu\u1ed9c v\u00e0o vi\u1ec7c ta k\u1ebft h\u1ee3p Mockery v\u1edbi framework n\u00e0o. V\u1edbi Laravel l\u00e0 teardown ). L\u1ec7nh n\u00e0y d\u1ecdn d\u1eb9p v\u00f9ng ch\u1ee9a Mockery \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng b\u1edfi h\u00e0m test hi\u1ec7n t\u1ea1i v\u00e0 s\u1ebd ch\u1ea1y b\u1ea5t k\u1ef3 t\u00e1c v\u1ee5 n\u00e0o cho expectation Khi \u0111\u00e3 t\u1ea1o m\u1ed9t mock object ngh\u0129a l\u00e0 ch\u00fang ta mu\u1ed1n x\u00e1c \u0111\u1ecbnh ch\u00ednh x\u00e1c c\u00e1ch n\u00f3 ho\u1ea1t \u0111\u1ed9ng (n\u00f3 \u0111\u01b0\u1ee3c g\u1ecdi nh\u01b0 th\u1ebf n\u00e0o). \u0110\u00e2y ch\u00ednh l\u00e0 vi\u1ec7c \u0111\u1ecbnh ngh\u0129a m\u1ed9t expectation","title":"Expectation"},{"location":"read-more/mockery/#ph\u01b0\u01a1ng-th\u1ee9c","text":"\u0110\u1ec3 n\u00f3i v\u1edbi test ch\u00fang ta s\u1ebd th\u1ef1c hi\u1ec7n g\u1ecdi m\u1ed9t method v\u1edbi t\u00ean ch\u1ec9 \u0111\u1ecbnh, s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c shouldReceive $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ); \u0110\u00e2y s\u1ebd l\u00e0 expectation m\u00e0 d\u1ef1a v\u00e0o \u0111\u00f3 t\u1ea5t c\u1ea3 c\u00e1c k\u1ef3 v\u1ecdng r\u00e0ng bu\u1ed9c kh\u00e1c \u0111\u01b0\u1ee3c th\u00eam v\u00e0o. Ch\u00fang ta c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a nhi\u1ec1u method $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method_1' , 'name_of_method_2' ); C\u00f3 th\u1ec3 khai b\u00e1o c\u00e1c expectation c\u00f9ng v\u1edbi gi\u00e1 tr\u1ecb m\u00e0 n\u00f3 tr\u1ea3 v\u1ec1 $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ([ 'name_of_method_1' => 'return value 1' , 'name_of_method_2' => 'return value 2' , ]); C\u00e1ch kh\u00e1c \u0111\u1ec3 thi\u1ebft l\u1eadp ph\u01b0\u01a1ng th\u1ee9c v\u00e0 k\u1ef3 v\u1ecdng c\u1ee7a n\u00f3: $mock = \\Mockery :: mock ( 'MyClass' , [ 'name_of_method_1' => 'return value 1' , 'name_of_method_2' => 'return value 2' ]); Ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a nh\u1eefng method kh\u00f4ng n\u00ean \u0111\u01b0\u1ee3c g\u1ecdi $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldNotReceive ( 'name_of_method' ); Ph\u01b0\u01a1ng th\u1ee9c n\u00e0y ch\u00ednh l\u00e0 vi\u1ec7c g\u1ecdi ng\u1eafn g\u1ecdn shouldReceive()->never()","title":"Ph\u01b0\u01a1ng th\u1ee9c"},{"location":"read-more/mockery/#tham-s\u1ed1","text":"V\u1edbi m\u1ecdi ph\u01b0\u01a1ng th\u1ee9c khai b\u00e1o k\u1ef3 v\u1ecdng, ch\u00fang ta c\u00f3 th\u1ec3 th\u00eam k\u1ef3 v\u1ecdng v\u1ec1 tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> with ( $arg1 , $arg2 , ... ); // or $mock -> shouldReceive ( 'name_of_method' ) -> withArgs ([ $arg1 , $arg2 , ... ]); \u0110\u1ec3 t\u0103ng t\u00ednh linh ho\u1ea1t, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c matcher class . V\u00ed d\u1ee5 ph\u01b0\u01a1ng th\u1ee9c \\Mockery::any() s\u1ebd kh\u1edbp b\u1ea5t k\u1ef3 tham s\u1ed1 n\u00e0o \u0111\u01b0\u1ee3c truy\u1ec1n v\u1edbi with . Mockery cho ph\u00e9p th\u01b0 vi\u1ec7n Hamcrest , v\u00ed d\u1ee5 h\u00e0m anything() ch\u00ednh l\u00e0 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng \\Mockery::any() . M\u1ed9t \u0111i\u1ec1u quan tr\u1ecdng c\u1ea7n l\u01b0u \u00fd, \u0111i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 t\u1ea5t c\u1ea3 c\u00e1c expectation \u0111\u01b0\u1ee3c \u0111\u00ednh k\u00e8m s\u1ebd ch\u1ec9 apply cho method khi n\u00f3 g\u1ecdi ch\u00ednh x\u00e1c c\u00e1c tham s\u1ed1. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( 'Hello' ); $mock -> foo ( 'Goodbye' ); // throws a NoMatchingExpectationException \u0110i\u1ec1u n\u00e0y cho ph\u00e9p thi\u1ebft l\u1eadp c\u00e1c k\u1ef3 v\u1ecdng kh\u00e1c nhau d\u1ef1a tr\u00ean tham s\u1ed1 \u0111\u01b0\u1ee3c cung c\u1ea5p cho c\u00e1c cu\u1ed9c g\u1ecdi d\u1ef1 ki\u1ebfn.","title":"Tham s\u1ed1"},{"location":"read-more/mockery/#match-tham-s\u1ed1-v\u1edbi-closure","text":"Thay v\u00ec cung c\u1ea5p m\u1ed9t tr\u00ecnh \u0111\u1ed1i kh\u1edbp cho t\u1eebng tham s\u1ed1, ta c\u00f3 th\u1ec3 cung c\u1ea5p m\u1ed9t closure cho t\u1ea5t c\u1ea3 c\u00e1c tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n m\u1ed9t l\u00fac: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> withArgs ( closure ); Closure nh\u1eadn t\u1ea5t c\u1ea3 c\u00e1c tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n khi g\u1ecdi \u0111\u1ebfn ph\u01b0\u01a1ng th\u1ee9c. B\u1eb1ng c\u00e1ch n\u00e0y expectation s\u1ebd ch\u1ec9 \u0111\u01b0\u1ee3c apply cho method c\u00f3 tham s\u1ed1 truy\u1ec1n v\u00e0o th\u1ecfa m\u00e3n closure $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> withArgs ( function ( $arg ) { if ( $arg % 2 == 0 ) { return true ; } return false ; }); $mock -> foo ( 4 ); // matches the expectation $mock -> foo ( 3 ); // throws a NoMatchingExpectationException","title":"Match tham s\u1ed1 v\u1edbi closure"},{"location":"read-more/mockery/#match-tham-s\u1ed1-v\u1edbi-gi\u00e1-tr\u1ecb-\u0111\u1ecbnh-s\u1eb5n","text":"Ch\u00fang ta c\u00f3 th\u1ec3 cung c\u1ea5p c\u00e1c tham s\u1ed1 \u0111\u01b0\u1ee3c mong \u0111\u1ee3i match v\u1edbi tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o khi m\u1ed9t mock method \u0111\u01b0\u1ee3c g\u1ecdi $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> withSomeOfArgs ( arg1 , arg2 , arg3 , ... ); Th\u1ee9 t\u1ef1 c\u1ee7a c\u00e1c tham s\u1ed1 kh\u00f4ng quan tr\u1ecdng, n\u00f3 ch\u1ec9 check c\u00f3 bao g\u1ed3m gi\u00e1 tr\u1ecb mong \u0111\u1ee3i hay kh\u00f4ng, ki\u1ec3u gi\u00e1 tr\u1ecb c\u0169ng c\u1ea7n ph\u1ea3i \u0111\u01b0\u1ee3c match $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> withSomeOfArgs ( 1 , 2 ); $mock -> foo ( 1 , 2 , 3 ); // matches the expectation $mock -> foo ( 3 , 2 , 1 ); // matches the expectation (passed order doesn't matter) $mock -> foo ( '1' , '2' ); // throws a NoMatchingExpectationException (type should be matched) $mock -> foo ( 3 ); // throws a NoMatchingExpectationException","title":"Match tham s\u1ed1 v\u1edbi gi\u00e1 tr\u1ecb \u0111\u1ecbnh s\u1eb5n"},{"location":"read-more/mockery/#any--no","text":"Ch\u00fang ta c\u00f3 th\u1ec3 khai b\u00e1o r\u1eb1ng expectation match v\u1edbi b\u1ea5t k\u1ef3 tham s\u1ed1 n\u00e0o $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> withAnyArgs (); \u0110i\u1ec1u n\u00e0y lu\u00f4n \u0111\u01b0\u1ee3c set m\u1eb7c \u0111\u1ecbnh tr\u1eeb khi c\u00f3 ch\u1ec9 \u0111\u1ecbng kh\u00e1c. Ngo\u00e0i ra ch\u00fang ta c\u00f3 th\u1ec3 khai b\u00e1o exptation match v\u1edbi vi\u1ec7c g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng c\u00f3 \u0111\u1ed1i s\u1ed1. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> withNoArgs ();","title":"Any / no"},{"location":"read-more/mockery/#return-value-expectation","text":"V\u1edbi mock object. ch\u00fang ta c\u00f3 th\u1ec3 khai b\u00e1o v\u1edbi Mockery k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a m\u1ed9t method v\u1edbi andReturn() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturn ( $value ); N\u00f3 thi\u1ebft l\u1eadp gi\u00e1 tr\u1ee5 \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1 t\u1eeb vi\u1ec7c g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c. C\u00f3 th\u1ec3 thi\u1ebft l\u1eadp k\u1ef3 v\u1ecdng cho nhi\u1ec1u gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturn ( $value1 , $value2 , ... ) Nh\u01b0 v\u1eady l\u1ea7n g\u1ecdi \u0111\u1ea7u ti\u00ean s\u1ebd tr\u1ea3 v\u1ec1 $value1 v\u00e0 l\u1ea7n g\u1ecdi ti\u1ebfp theo s\u1ebd tr\u1ea3 v\u1ec1 $value2 . N\u1ebfu g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c nhi\u1ec1u l\u1ea7n h\u01a1n s\u1ed1 return value m\u00e0 ch\u00fang ta \u0111\u00e3 khai b\u00e1o, Mockery s\u1ebd tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb cu\u1ed1i c\u00f9ng cho b\u1ea5t k\u1ef3 l\u1ec7nh g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c ti\u1ebfp theo n\u00e0o $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> andReturn ( 1 , 2 , 3 ); $mock -> foo (); // int(1) $mock -> foo (); // int(2) $mock -> foo (); // int(3) $mock -> foo (); // int(3) Ho\u1eb7c s\u1eed d\u1ee5ng c\u00fa ph\u00e1p $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturnValues ([ $value1 , $value2 , ... ]) V\u1edbi c\u00fa ph\u00e1p tr\u00ean, th\u1ee9 t\u1ef1 tr\u1ea3 v\u1ec1 \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh b\u1edfi ch\u1ec9 s\u1ed1 c\u1ee7a m\u1ea3ng v\u00e0 c\u0169ng t\u01b0\u01a1ng t\u1ef1 c\u00e1ch \u0111\u1ea7u, gi\u00e1 tr\u1ecb cu\u1ed1i c\u00f9ng s\u1ebd \u0111\u01b0\u1ee3c apply cho t\u1ea5t c\u1ea3 c\u00e1c l\u1ea7n g\u1ecdi h\u00e0m sau \u0111\u00f3. Hai c\u00fa ph\u00e1p sau \u0111\u00e2y s\u1ebd ch\u1ee7 y\u1ebfu \u0111\u1ec3 giao ti\u1ebfp v\u1edbi ng\u01b0\u1eddi \u0111\u1ecdc test: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturnNull (); // or $mock -> shouldReceive ( 'name_of_method' ) -> andReturn ([ null ]); N\u00f3 \u0111\u00e1nh d\u1ea5u nh\u1eefng l\u1ea7n g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c c\u1ee7a mock object tr\u1ea3 v\u1ec1 null ho\u1eb7c kh\u00f4ng g\u00ec c\u1ea3. \u0110\u00f4i khi ch\u00fang ta mu\u1ed1n t\u00ednh k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1, d\u1ef1a v\u00e0o c\u00e1c tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n, khi \u1ea5y ch\u00fang ta c\u1ea7n d\u00f9ng andReturnUsing() . N\u00f3 nh\u1eadn nhi\u1ec1u h\u01a1n m\u1ed9t closure . $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturnUsing ( closure , ... ); Closure \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo h\u00e0ng \u0111\u1ee3i b\u1eb1ng c\u00e1ch truy\u1ec1n ch\u00fang d\u01b0\u1edbi d\u1ea1ng tham s\u1ed1 cho h\u00e0m andReturn() . \u0110\u00f4i khi ph\u01b0\u01a1ng th\u1ee9c s\u1ebd tr\u1ea3 v\u1ec1 ch\u00ednh m\u1ed9t trong c\u00e1c \u0111\u1ed1i s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. Khi \u0111\u00f3 ph\u01b0\u01a1ng th\u1ee9c andReturnArg() s\u1ebd h\u1eefu \u00edch, tham s\u1ed1 \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1 ch\u00fang l\u00e0 index trong list tham s\u1ed1 $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturnArg ( 1 ); \u0110o\u1ea1n tr\u00ean s\u1ebd tr\u1ea3 v\u1ec1 \u0111\u1ed1i s\u1ed1 th\u1ee9 2 (c\u00f3 index l\u00e0 1) t\u1eeb danh s\u00e1ch c\u00e1c \u0111\u1ed1i s\u1ed1 khi th\u1ef1c hi\u1ec7n g\u1ecdi h\u00e0m. L\u01b0u \u00fd: Kh\u00f4ng th\u1ec3 mix andReturnUsing() ho\u1eb7c andReturnArg v\u1edbi andReturn() N\u1ebfu mu\u1ed1n mock fluid interface , ph\u01b0\u01a1ng th\u1ee9c sau s\u1ebd h\u1eefu d\u1ee5ng: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andReturnSelf (); N\u00f3 thi\u1ebft l\u1eadp gi\u00e1 tr\u1ecb tr\u1ea3 v\u1ec1 l\u00e0 t\u00ean class \u0111\u01b0\u1ee3c mock.","title":"Return value Expectation"},{"location":"read-more/mockery/#throw-exception","text":"Ch\u00fang ta c\u00f3 th\u1ec3 gi\u1ea3 l\u1eadp ph\u01b0\u01a1ng th\u1ee9c s\u1ebd throw exception: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andThrow ( new Exception ); Thay v\u00ec m\u1ed9t \u0111\u1ed1i \u0111\u01b0\u1ee3ng, ta cs th\u1ec3 truy\u1ec1n v\u00e0o m\u1ed9t Exception class, message v\u00e0 / ho\u1eb7c code. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> andThrow ( 'exception_name' , 'message' , 123456789 );","title":"Throw exception"},{"location":"read-more/mockery/#k\u1ef3-v\u1ecdng-s\u1ed1-l\u1ea7n-g\u1ecdi","text":"B\u00ean c\u1ea1nh vi\u1ec7c thi\u1ebft l\u1eadp expectation cho c\u00e1c tham s\u1ed1 truy\u1ec1n v\u00e0o h\u00e0m v\u00e0 k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a ch\u00fang, ch\u00fang ta c\u00f3 th\u1ec3 thi\u1ebft l\u1eadp k\u1ef3 v\u1ecdng v\u1ec1 s\u1ed1 l\u1ea7n g\u1ecdi \u0111\u1ebfn h\u00e0m \u0111\u00f3. Khi thi\u1ebft l\u1eadp k\u1ef3 v\u1ecdng s\u1ed1 l\u1ea7n g\u1ecdi cho m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ebfn s\u1ebd throw \\Mockery\\Expectation\\InvalidCountException . L\u01b0u \u00fd: Ph\u01b0\u01a1ng th\u1ee9c n\u00e0y b\u1eaft bu\u1ed9c ph\u1ea3i g\u1ecdi \\Mockery::close() \u1edf cu\u1ed1i test, ch\u1eb3ng h\u1ea1n nh\u01b0 c\u00f3 th\u1ec3 g\u1ecdi \u1edf ph\u01b0\u01a1ng th\u1ee9c teardown v\u1edbi PHPUnit. N\u1ebfu kh\u00f4ng Mockery s\u1ebd kh\u00f4ng x\u00e1c minh c\u00e1c l\u1ec7nh g\u1ecdi \u0111\u1ed1i v\u1edbi mock object (v\u00ec th\u1ebf vi\u1ec7c count c\u0169ng kh\u00f4ng th\u1ec3 th\u1ef1c hi\u1ec7n) \u0110\u1ec3 khai b\u00e1o ph\u01b0\u01a1ng th\u1ee9c s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi 0 ho\u1eb7c nhi\u1ec1u l\u1ea7n: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> zeroOrMoreTimes (); \u0110i\u1ec1u n\u00e0y c\u0169ng l\u00e0 m\u1eb7c \u0111\u1ecbnh v\u1edbi t\u1ea5t c\u1ea3 c\u00e1c method. \u0110\u1ec3 n\u00f3i v\u1edbi Mockery m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng ch\u00ednh x\u00e1c s\u1ed1 l\u1ea7n g\u1ecdi h\u00e0m, ta s\u1ebd s\u1eed d\u1ee5ng nh\u01b0 sau: $mock = \\Mockery::mock('MyClass'); $mock->shouldReceive('name_of_method') ->times($n); V\u1edbi $n s\u1ebd l\u00e0 s\u1ed1 l\u1ea7n h\u00e0m \u0111\u01b0\u1ee3c g\u1ecdi. M\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p ph\u1ed5 bi\u1ebfn s\u1ebd c\u00f3 ph\u01b0\u01a1ng th\u1ee9c g\u1ecdi tr\u1ef1c ti\u1ebfp. \u0110\u1ecbnh ngh\u0129a method mong \u0111\u1ee3i \u0111\u01b0\u1ee3c g\u1ecdi m\u1ed9t l\u1ea7n $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> once (); V\u1edbi ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c g\u1ecdi hai l\u1ea7n $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> twice (); Ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> never ();","title":"K\u1ef3 v\u1ecdng s\u1ed1 l\u1ea7n g\u1ecdi"},{"location":"read-more/mockery/#count-modifier","text":"Mockery b\u1ed5 sung m\u1ed9t s\u1ed1 ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ec3 thi\u1ebft l\u1eadp k\u1ef3 v\u1ecdng cho s\u1ed1 l\u1ea7n g\u1ecdi method N\u1ebfu mu\u1ed1n khai b\u00e1o s\u1ed1 l\u1ea7n t\u1ed1i thi\u1ec3u m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi, s\u1eed d\u1ee5ng atLeast() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> atLeast () -> times ( 3 ); \u0110o\u1ea1n code tr\u00ean c\u00f3 ngh\u0129a l\u00e0 ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c g\u1ecdi \u00edt nh\u1ea5t 3 l\u1ea7n. T\u01b0\u01a1ng t\u1ef1, ch\u00fang ta c\u0169ng c\u00f3 th\u1ec3 khai b\u00e1o cho Mockery bi\u1ebft s\u1ed1 l\u1ea7n nhi\u1ec1u nh\u1ea5t m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1ecdi v\u1edbi atMost() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> atMost () -> times ( 3 ); Ngo\u00e0i ra, \u0111\u1ec3 set ph\u1ea1m vi s\u1ed1 l\u1ea7n \u0111\u01b0\u1ee3c g\u1ecdi: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'name_of_method' ) -> between ( $min , $max ); B\u1ea3n ch\u1ea5t c\u1ee7a between() ch\u00ednh l\u00e0 vi\u1ec7c s\u1eed d\u1ee5ng atLeast()->times($min)->atMost()->times($max)","title":"Count modifier"},{"location":"read-more/mockery/#argument-validation","text":"","title":"Argument Validation"},{"location":"read-more/mockery/#validate-tham-s\u1ed1","text":"\u0110\u00e2y ch\u00ednh l\u00e0 vi\u1ec7c match tham s\u1ed1 khi t\u1ea1o m\u1ed9t k\u1ef3 v\u1ecdng cho tham s\u1ed1 truy\u1ec1n v\u00e0o ph\u01b0\u01a1ng th\u1ee9c. Mockery s\u1ebd h\u1ed7 tr\u1ee3 th\u01b0 vi\u1ec7n Hamcrest. C\u00e1c v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y t\u00ecm hi\u1ec3u v\u1ec1 c\u00e1c h\u00e0m match c\u1ee7a Mockery v\u00e0 h\u00e0m t\u01b0\u01a1ng \u0111\u1ed3ng ph\u00eda Hamcrest L\u01b0u \u00fd: N\u1ebfu b\u1ea1n kh\u00f4ng mu\u1ed1n s\u1eed d\u1ee5ng h\u00e0m global c\u1ee7a Hamcrest th\u00ec c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng class \\Hamcrest\\Matchers . V\u00ed d\u1ee5 identicalTo($arg) ch\u00ednh l\u00e0 \\Hamcrest\\Matchers::identicalTo($arg) Tr\u00ecnh match ph\u1ed5 bi\u1ebfn nh\u1ea5t ch\u00ednh l\u00e0 h\u00e0m with() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( 1 ) : Mockery s\u1ebd hi\u1ec3u n\u00f3 c\u1ea7n \u0111\u01b0\u1ee3c g\u1ecdi h\u00e0m foo v\u1edbi tham s\u1ed1 ki\u1ec3u integer gi\u00e1 tr\u1ecb 1 . Trong t\u01b0\u1eddng h\u1ee3p n\u00e0y, Mockery \u0111\u1ea7y ti\u00ean s\u1ebd th\u1eed so s\u00e1nh v\u1edbi ph\u00e9p === . N\u1ebfu n\u00f3 fail ph\u00e9p th\u1eed n\u00e0y Mockery s\u1ebd c\u1ed1 g\u1eafng fallback v\u1edbi ph\u00e9p so s\u00e1nh == . Khi th\u1ef1c hi\u1ec7n match m\u1ed9t object Mockery ch\u1ec9 s\u1eed d\u1ee5ng ph\u00e9p so s\u00e1nh === . $object = new stdClass (); $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> with ( $object ); // Hamcrest equivalent $mock -> shouldReceive ( \"foo\" ) -> with ( identicalTo ( $object )); instance kh\u00e1c c\u1ee7a stdCalss s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c coi l\u00e0 match. L\u01b0u \u00fd: Mockery\\Matcher\\MustBe s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng n\u1eefa C\u00f2n n\u1ebfu b\u1ea1n ch\u1ec9 mu\u1ed1n so s\u00e1nh == cho object th\u00ec s\u1ebd ph\u1ea3i d\u00f9ng ph\u01b0\u01a1ng th\u1ee9c equalTo c\u1ee7a Hamcrest $mock -> shouldReceive ( \"foo\" ) -> with ( equalTo ( new stdClass )); Trong tr\u01b0\u1eddng h\u1ee3p ch\u00fang ta kh\u00f4ng quan t\u00e2m \u0111\u1ebfn ki\u1ec3u d\u1eef li\u1ec7u, gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o, ch\u1ec9 c\u1ea7n c\u00f3 b\u1ea5t k\u00ec tham s\u1ed1 n\u00e0o \u0111\u00f3 tr\u01b0\u1ee3c truy\u1ec1n v\u00e0o, s\u1eed d\u1ee5ng any() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> with ( \\Mockery :: any ()); // Hamcrest equivalent $mock -> shouldReceive ( \"foo\" ) -> with ( anything ())","title":"Validate tham s\u1ed1"},{"location":"read-more/mockery/#validate-ki\u1ec3u-d\u1eef-li\u1ec7u","text":"H\u00e0m type() s\u1ebd nh\u1eadn m\u1ed9t chu\u1ed7i, chu\u1ed7 \u0111\u00f3 s\u1ebd \u0111\u01b0\u1ee3c gh\u00e9p v\u00e0o is_ \u0111\u1ec3 t\u1ea1o th\u00e0nh m\u1ed9t ph\u00e9p ki\u1ec3u tra h\u1ee3p l\u1ec7 \u0110\u1ec3 match b\u1ea5t k\u1ef3 PHP resource n\u00e0o ta s\u1ebd truy\u1ec1n resource v\u00e0o h\u00e0m type() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> with ( \\Mockery :: type ( 'resource' )); // Hamcrest equivalents $mock -> shouldReceive ( \"foo\" ) -> with ( resourceValue ()); $mock -> shouldReceive ( \"foo\" ) -> with ( typeOf ( 'resource' )); N\u00f3 s\u1ebd tr\u1ea3 v\u1ec1 true t\u1eeb m\u1ed9t is_resoruce \u0111\u01b0\u1ee3c g\u1ecdi n\u1ebfu \u0111\u1ed1i s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o l\u00e0 m\u1ed9t resource c\u1ee7a PHP. V\u00ed d\u1ee5 ti\u1ebfp \u0111\u1ec3 d\u1ec5 hi\u1ec3u h\u01a1n \\Mockery::type('float') ho\u1eb7c floatValue() v\u00e0 typeOf('float') ki\u1ec3m tra s\u1eed d\u1ee5ng is_float() , v\u00e0 \\Mockery::type('callable') hay callable() c\u1ee7a Hamcrest s\u1eed d\u1ee5ng is_callable() . type() c\u0169ng ch\u1ea5p nh\u1eadn t\u00ean c\u1ee7a m\u1ed9t class hay m\u1ed9t interface \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong instanceOf . H\u00e0m t\u01b0\u01a1ng t\u1ef1 c\u1ee7a Hamcrest l\u00e0 anInstanceOf . Tham kh\u1ea3o \u0111\u1ea7y \u0111\u1ee7 c\u00e1c h\u00e0m check t\u1ea1i php.net v\u00e0 c\u00e1c h\u00e0m c\u1ee7a Hamcrest N\u1ebfu mu\u1ed1n th\u1ef1c hi\u1ec7n match \u0111\u1ed1i s\u1ed1 m\u1ed9t c\u00e1ch ph\u1ee9c t\u1ea1p h\u01a1n, on() ch\u00ednh l\u00e0 h\u00e0m h\u1ed7 tr\u1ee3 \u0111i\u1ec1u n\u00e0y. N\u00f3 ch\u1ea5p nh\u1eadn anonymous function l\u00e0 m\u1ed9t \u0111\u1ed1i s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> with ( \\Mockery :: on ( closure )); N\u1ebfu closure tr\u1ea3 v\u1ec1 true ngh\u0129a l\u00e0 tham s\u1ed1 \u0111\u01b0\u1ee3c gi\u1ea3 \u0111\u1ecbnh kh\u1edbp v\u1edbi k\u1ef3 v\u1ecdng v\u00e0 ng\u01b0\u1ee3c l\u1ea1i $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: on ( function ( $argument ) { if ( $argument % 2 == 0 ) { return true ; } return false ; })); $mock -> foo ( 4 ); // matches the expectation $mock -> foo ( 3 ); // throws a NoMatchingExpectationException Kh\u00f4ng c\u00f3 phi\u00ean b\u1ea3n Hamcrest n\u00e0o cho on() . Ngo\u00e0i ra, ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c withArgs() . Closure s\u1ebd ki\u1ec3m tra c\u00e1c \u0111\u1ed1i s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c k\u1ef3 v\u1ecdng v\u00e0 \u0111\u1ed1i s\u1ed1 l\u00e0 kh\u1edbp n\u1ebfu closure tr\u1ea3 v\u1ec1 true. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> withArgs ( closure ); Closue match c\u0169ng h\u1ed7 tr\u1ee3 tham s\u1ed1 l\u00e0 optional $closure = function ( $odd , $even , $sum = null ) { $result = ( $odd % 2 != 0 ) && ( $even % 2 == 0 ); if ( ! is_null ( $sum )) { return $result && ( $odd + $even == $sum ); } return $result ; }; $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> withArgs ( $closure ); $mock -> foo ( 1 , 2 ); // It matches the expectation: the optional argument is not needed $mock -> foo ( 1 , 2 , 3 ); // It also matches the expectation: the optional argument pass the validation $mock -> foo ( 1 , 2 , 4 ); // It doesn't match the expectation: the optional doesn't pass the validation N\u1ebfu mu\u1ed1n so kh\u1edbp m\u1ed9t \u0111\u1ed1i s\u1ed1 v\u1edbi m\u1ed9t bi\u1ec3u th\u1ee9c ch\u00ednh quy, Mockery h\u1ed7 tr\u1ee3 ph\u01b0\u01a1ng th\u1ee9c pattern() $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: pattern ( '/^foo/' )); // Hamcrest equivalent $mock -> shouldReceive ( 'foo' ) -> with ( matchesPattern ( '/^foo/' )); ducktype() l\u00e0 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ec3 match ki\u1ec3u c\u1ee7a class $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: ducktype ( 'foo' , 'bar' )); N\u00f3 s\u1ebd kh\u1edbp b\u1ea5t k\u1ef3 tham s\u1ed1 n\u00e0o l\u00e0 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng ch\u1ee9a danh s\u00e1ch c\u00e1c ch\u1ee9a danh s\u00e1ch c\u00e1c method \u0111\u00e3 \u0111\u01b0\u1ee3c cung c\u1ea5p. T\u01b0\u01a1ng t\u1ef1 v\u1edbi on() , kh\u00f4ng c\u00f3 version Hamcrest n\u00e0o cho ducktype() .","title":"Validate ki\u1ec3u d\u1eef li\u1ec7u"},{"location":"read-more/mockery/#capturing-arguments","text":"N\u1ebfu ch\u00fang ta mu\u1ed1n th\u1ef1c hi\u1ec7n nhi\u1ec1u match cho c\u00f9ng m\u1ed9t \u0111\u1ed1i s\u1ed1, capture cung c\u1ea5p m\u1ed9t gi\u1ea3i ph\u00e1p \u0111\u1ec3 c\u00f9ng h\u00e0m on() ph\u1ee5c v\u1ee5 \u0111i\u1ec1u \u0111\u00f3. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( \"foo\" ) -> with ( \\Mockery :: capture ( $bar )); N\u00f3 ch\u1ec9 \u0111\u1ecbng t\u1ea5t c\u1ea3 nh\u1eefng \u0111\u1ed1i s\u1ed1 n\u00e0o \u0111\u01b0\u1ee3c truy\u1ec1n cho foo v\u00e0o bi\u1ebfn $bar , t\u1eeb \u0111\u00f3 ta s\u1ebd b\u1ed5 sung validation s\u1eed d\u1ee5ng assertion.","title":"Capturing Arguments"},{"location":"read-more/mockery/#b\u1ed5-sung-\u0111\u1ed1i-s\u00e1nh-tham-s\u1ed1","text":"not() s\u1ebd kh\u1edbp v\u1edbi b\u1ea5t k\u1ef3 \u0111\u1ed1i s\u1ed1 n\u00f3 kh\u00f4ng b\u1eb1ng ho\u1eb7c kh\u00f4ng gi\u1ed1ng v\u1edbi tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o n\u00f3 $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: not ( 2 )); // Hamcrest equivalent $mock -> shouldReceive ( 'foo' ) -> with ( not ( 2 )); anyOf() s\u1ebd match n\u1ebfu nh\u01b0 tham s\u1ed1 c\u1ee7a expectation b\u1eb1ng m\u1ed9t trong b\u1ea5t k\u1ef3 tham s\u1ed1 n\u00e0o c\u1ee7a h\u00e0m $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: anyOf ( 1 , 2 )); // Hamcrest equivalent $mock -> shouldReceive ( 'foo' ) -> with ( anyOf ( 1 , 2 )); notAnyOf() s\u1ebd ng\u01b0\u1ee3c l\u1ea1i v\u1edbi anyOf() n\u00f3 s\u1ebd match n\u1ebfu nh\u01b0 tham s\u1ed1 c\u1ee7a expectation kh\u00f4ng b\u1eb1ng b\u1ea5t k\u1ef3 tham s\u1ed1 n\u00e0o c\u1ee7a ph\u01b0\u01a1ng th\u1ee9c: $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: notAnyOf ( 1 , 2 )); notAnyOf() s\u1ebd kh\u00f4ng c\u00f3 b\u00ean Hamcrest subset() s\u1ebd match n\u1ebfu nh\u01b0 tham s\u1ed1 l\u00e0 m\u1ed9t m\u1ea3ng c\u00f3 ch\u1ee9a m\u1ea3ng \u0111\u00e3 cho.f $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: subset ( array ( 0 => 'foo' ))); Vi\u1ec7c n\u00e0y s\u1ebd th\u1ef1c hi\u1ec7n c\u1ea3 tr\u00ean c\u1ea3 t\u00ean bi\u1ebfn v\u00e0 gi\u00e1 tr\u1ecb, n\u00f3 t\u01b0\u01a1ng \u1ee9ng v\u1edbi key v\u00e0 value c\u1ee7a m\u1ea3ng tham s\u1ed1. contains() c\u0169ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 subset() nh\u01b0ng s\u1ebd kh\u00f4ng quan t\u00e2m \u0111\u1ebfn t\u00ean c\u1ee7a key c\u1ee7a m\u1ea3ng. $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: contains ( value1 , value2 )); hasKey() kh\u1edbp v\u1edbi \u0111\u1ed1i s\u1ed1 l\u00e0 m\u1ed9t m\u1ea3ng c\u00f3 ch\u1ee9a key name \u0111\u00e3 cho $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: hasKey ( key )); hasValue() kh\u1edbp v\u1edbi \u0111\u1ed1i s\u1ed1 l\u00e0 m\u1ed9t m\u1ea3ng c\u00f3 ch\u1ee9a value \u0111\u00e3 cho $mock = \\Mockery :: mock ( 'MyClass' ); $mock -> shouldReceive ( 'foo' ) -> with ( \\Mockery :: hasValue ( value ));","title":"B\u1ed5 sung \u0111\u1ed1i s\u00e1nh tham s\u1ed1"},{"location":"read-more/mockery/#spies","text":"Spies l\u00e0 m\u1ed9t lo\u1ea1i test double, tuy nhi\u00ean kh\u00e1c v\u1edbi mock \u1edf ch\u1ed7 n\u00f3 ghi l\u1ea1i t\u1ea5t c\u1ea3 t\u01b0\u01a1ng t\u00e1c gi\u1eefa n\u00f3 v\u1edbi h\u1ec7 th\u1ed1ng test (SUT) v\u00e0 cho ph\u00e9p \u0111\u01b0a ra c\u00e1c assertion v\u1edbi nh\u1eefng t\u01b0\u01a1ng t\u00e1c \u0111\u00f3 sau khi SUT ch\u1ea1y. T\u1ea1o m\u1ed9t spy gi\u00fap b\u1ea1n kh\u00f4ng c\u1ea7n ph\u1ea3i thi\u1ebft l\u1eadp vi\u1ec7c call t\u1ea5t c\u1ea3 c\u00e1c ph\u01b0\u01a1ng th\u1ee9c nh\u01b0 mock. B\u1ea1n ch\u1ec9 c\u1ea7n t\u1ea1o assertion cho vi\u1ec7c call m\u1ed9t v\u00e0i ph\u01b0\u01a1ng th\u1ee9c m\u00e0 b\u1ea1n quan t\u00e2m \u0111\u1ebfn, b\u1edfi l\u1ebd kh\u00f4ng ph\u1ea3i ph\u01b0\u01a1ng th\u1ee9c n\u00e0o c\u0169ng \u1ea3nh h\u01b0\u1edfng cho m\u1ed9t test case nh\u1ea5t \u0111\u1ecbnh. Trong khi v\u1edbi mock th\u00ec h\u1ea7u nh\u01b0 ph\u1ea3i \u00e1p d\u1ee5ng style Arrange-Act-Assert v\u00ec ch\u00fang ph\u1ea3i khai b\u00e1o expect nh\u1eefng h\u00e0m \u0111\u01b0\u1ee3c g\u1ecdi c\u00f9ng k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 tr\u01b0\u1edbc khi g\u1ecdi h\u00e0m th\u1ef1c thi trong test, cu\u1ed1i c\u00f9ng m\u1edbi l\u00e0 assert xem nh\u1eefng expect \u0111\u00f3 \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u00e1p \u1ee9ng. // arrange $mock = \\Mockery :: mock ( 'MyDependency' ); $sut = new MyClass ( $mock ); // expect $mock -> shouldReceive ( 'foo' ) -> once () -> with ( 'bar' ); // act $sut -> callFoo (); // assert \\Mockery :: close (); C\u00f2n spies c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng linh ho\u1ea1t c\u1ea3 style Arrange-Act-Assert ho\u1eb7c Given-When-Then . N\u00f3 cho ph\u00e9p b\u1ecf qua expect v\u00e0 chuy\u1ec3n assertion \u0111\u1ebfn sau act \u1edf SUT, gi\u00fap cho test case d\u1ec5 \u0111\u1ecdc hi\u1ec3u h\u01a1n. // arrange $spy = \\Mockery :: spy ( 'MyDependency' ); $sut = new MyClass ( $spy ); // act $sut -> callFoo (); // assert $spy -> shouldHaveReceived () -> foo () -> with ( 'bar' ); spies \u00edt h\u1ea1n ch\u1ebf h\u01a1n so v\u1edbi mock , N\u00f3 gi\u00fap n\u00eau b\u1eadt m\u1ee5c \u0111\u00edch test v\u00e0 h\u1ea1n ch\u1ebf l\u1ed9 c\u1ea5u tr\u00fac c\u1ee7a SUT. Tuy nhi\u00ean, h\u1ea1n ch\u1ebf c\u1ee7a spies l\u00e0 debug. Khi mock b\u1ecb g\u1ecdi ngo\u00e0i expect, n\u00f3 l\u1eadp t\u1ee9c throw exception, n\u00f3 g\u1ea7n nh\u01b0 \u0111\u01b0\u1ee3c coi l\u00e0 m\u1ed9t tr\u00ecnh debug. V\u1edbi spies n\u1ebfu c\u00f3 m\u1ed9t h\u00e0m call sai, n\u00f3 s\u1ebd kh\u00f4ng th\u1ec3 c\u00f3 b\u1ed1i c\u1ea3nh th\u1eddi gian l\u1eadp t\u1ee9c nh\u01b0 mock , n\u00f3 ch\u1ec9 \u0111\u01a1n gi\u1ea3n kh\u1eb3ng \u0111\u1ecbnh m\u1ed9t h\u00e0m \u0111\u01b0\u1ee3c g\u1ecdi. Cu\u1ed1i c\u00f9ng, spy kh\u00f4ng th\u1ec3 \u0111\u1ecbnh ngh\u0129a gi\u00e1 tr\u1ecb return c\u1ee7a h\u00e0m, ch\u1ec9 c\u00f3 mock m\u1edbi l\u00e0m \u0111\u01b0\u1ee3c \u0111i\u1ec1u \u0111\u00f3.","title":"Spies"},{"location":"read-more/mockery/#m\u1ed9t-s\u1ed1-h\u00e0m-th\u00f4ng-d\u1ee5ng-c\u1ee7a-spies","text":"\u0110\u1ec3 verify m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c g\u1ecdi trong spy, s\u1eed d\u1ee5ng shouldHaveReceived() $spy -> shouldHaveReceived ( 'foo' ); \u0110\u1ec3 verify m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi, s\u1eed d\u1ee5ng shouldNotHaveReceived() $spy -> shouldNotHaveReceived ( 'foo' ); \u0110\u1ec3 \u0111\u1ed1i s\u00e1nh tham s\u1ed1 \u0111\u01b0\u1ee3c truy\u1ec1n v\u00e0o m\u1ed9t h\u00e0m v\u1edbi spies ta c\u00f3 th\u1ec3 d\u00f9ng hai c\u00e1ch: s\u1eed d\u00f9ng h\u00e0m with ho\u1eb7c s\u1eed d\u1ee5ng m\u1ed9t m\u1ea3ng g\u1ed3m c\u00e1c tham s\u1ed1 c\u1ea7n c\u1ea7n \u0111\u1ed1i s\u00e1nh \u0111\u1ec3 truy\u1ec1n v\u00e0o h\u00e0m: $spy -> shouldHaveReceived ( 'foo' ) -> with ( 'bar' ); // Or $spy -> shouldHaveReceived ( 'foo' , [ 'bar' ]); L\u01b0u \u00fd c\u00e1ch 1 kh\u00f4ng th\u1ec3 d\u00f9ng cho shouldNotHaveReceived() . N\u1ebfu mu\u1ed1n s\u1eed d\u1ee5ng v\u1edbi m\u1ed9t h\u00e0m kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi b\u1ea1n c\u1ea7n ph\u1ea3i s\u1eed d\u1ee5ng c\u00e1ch 2: $spy -> shouldNotHaveReceived ( 'foo' , [ 'bar' ]); \u0110\u1ec3 x\u00e1c nh\u1eadn s\u1ed1 l\u1ea7n h\u00e0m \u0111\u01b0\u1ee3c g\u1ecdi $spy -> shouldHaveReceived ( 'foo' ) -> with ( 'bar' ) -> twice ();","title":"M\u1ed9t s\u1ed1 h\u00e0m th\u00f4ng d\u1ee5ng c\u1ee7a spies"},{"location":"read-more/mockery/#thay-th\u1ebf-c\u00fa-ph\u00e1p-shouldreceive","text":"K\u1ec3 t\u1eeb Mockery 1.0.0, h\u1ed7 tr\u1ee3 g\u1ecdi c\u00e1c ph\u01b0\u01a1ng th\u1ee9c t\u01b0\u01a1ng t\u1ef1 nh\u01b0 c\u00e1c ph\u01b0\u01a1ng th\u1ee9c c\u1ee7a PHP m\u00e0 kh\u00f4ng c\u1ea7n \u0111\u1ed1i s\u1ed1 d\u1ea1ng String trong should method V\u1edbi spies n\u00f3 m\u1edbi ch\u1ec9 \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng cho shouldHaveReceived() $spy -> shouldHaveReceived () -> foo ( 'bar' ); // Expect number of call $spy -> shouldHaveReceived () -> foo ( 'bar' ) -> twice (); V\u00ec m\u1ed9t s\u1ed1 h\u1ea1n ch\u1ebf c\u00fa ph\u00e1p n\u00e0y ch\u01b0a \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng cho ph\u01b0\u01a1ng th\u1ee9c shouldNotHaveReceived() .","title":"Thay th\u1ebf c\u00fa ph\u00e1p shouldReceive"},{"location":"read-more/mockery/#xem-th\u00eam","text":"http://docs.mockery.io/en/latest/","title":"Xem th\u00eam"},{"location":"read-more/mutation-testing/","text":"Mutation Testing \u00b6 TODO https://medium.com/@maks_rafalko/infection-mutation-testing-framework-c9ccf02eefd1 https://github.com/infection/infection","title":"Mutation Testing"},{"location":"read-more/mutation-testing/#mutation-testing","text":"TODO https://medium.com/@maks_rafalko/infection-mutation-testing-framework-c9ccf02eefd1 https://github.com/infection/infection","title":"Mutation Testing"},{"location":"read-more/references/","text":"T\u00e0i li\u1ec7u kh\u00e1c \u00b6 Framgia's Laravel Testing Guidelines JeffreyWay - Laravel Testing Decoded Martin Fowler - Unit Test Viblo's Automation Testing ASP.NET Core 2.0 Viblo's T\u1ea3n m\u1ea1n v\u1ec1 Testing Ham Vocke - The Practical Test Pyramid Viblo's PHP Unit Testing With PHPUnit PHPUnit Manual Laravel Testing Official Documents Laravel Testing Decoded Laracast's Testing Jargon Laracast's Testing Laravel Laracast's Intuitive Integration Testing https://blog.jgrossi.com/2018/solitary-or-sociable-testing-events-and-listeners-using-laravel/ https://symfonycasts.com/screencast/phpunit/ Rails Testing Guides Martin Fowler - UnitTest M\u1ed9t s\u1ed1 k\u1ef9 thu\u1eadt kh\u00e1c \u00b6 Codeception Kahlan - The PHP Test Framework for Freedom, Truth, and Justice Infection - Mutation Testing framework PHPSPEC","title":"T\u00e0i li\u1ec7u kh\u00e1c"},{"location":"read-more/references/#t\u00e0i-li\u1ec7u-kh\u00e1c","text":"Framgia's Laravel Testing Guidelines JeffreyWay - Laravel Testing Decoded Martin Fowler - Unit Test Viblo's Automation Testing ASP.NET Core 2.0 Viblo's T\u1ea3n m\u1ea1n v\u1ec1 Testing Ham Vocke - The Practical Test Pyramid Viblo's PHP Unit Testing With PHPUnit PHPUnit Manual Laravel Testing Official Documents Laravel Testing Decoded Laracast's Testing Jargon Laracast's Testing Laravel Laracast's Intuitive Integration Testing https://blog.jgrossi.com/2018/solitary-or-sociable-testing-events-and-listeners-using-laravel/ https://symfonycasts.com/screencast/phpunit/ Rails Testing Guides Martin Fowler - UnitTest","title":"T\u00e0i li\u1ec7u kh\u00e1c"},{"location":"read-more/references/#m\u1ed9t-s\u1ed1-k\u1ef9-thu\u1eadt-kh\u00e1c","text":"Codeception Kahlan - The PHP Test Framework for Freedom, Truth, and Justice Infection - Mutation Testing framework PHPSPEC","title":"M\u1ed9t s\u1ed1 k\u1ef9 thu\u1eadt kh\u00e1c"},{"location":"read-more/tdd/","text":"TDD \u00b6 TODO","title":"TDD"},{"location":"read-more/tdd/#tdd","text":"TODO","title":"TDD"}]}